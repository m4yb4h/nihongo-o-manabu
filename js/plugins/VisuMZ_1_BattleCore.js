//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.73;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.73] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x164fcd=_0x341e;(function(_0x3b0a6a,_0x1a1d21){const _0x139616=_0x341e,_0x5bb1d6=_0x3b0a6a();while(!![]){try{const _0x363036=parseInt(_0x139616(0xbb9))/0x1+parseInt(_0x139616(0x3ec))/0x2+parseInt(_0x139616(0xacf))/0x3*(parseInt(_0x139616(0x9aa))/0x4)+-parseInt(_0x139616(0x3fe))/0x5*(parseInt(_0x139616(0x906))/0x6)+parseInt(_0x139616(0xada))/0x7*(-parseInt(_0x139616(0x158))/0x8)+parseInt(_0x139616(0xc76))/0x9+-parseInt(_0x139616(0x56d))/0xa*(parseInt(_0x139616(0x69d))/0xb);if(_0x363036===_0x1a1d21)break;else _0x5bb1d6['push'](_0x5bb1d6['shift']());}catch(_0xf7fa7f){_0x5bb1d6['push'](_0x5bb1d6['shift']());}}}(_0x4741,0x75ca6));var label=_0x164fcd(0xb36),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x164fcd(0x69f)](function(_0x2928ff){const _0x10134c=_0x164fcd;return _0x2928ff[_0x10134c(0x9b0)]&&_0x2928ff['description'][_0x10134c(0x893)]('['+label+']');})[0x0];VisuMZ[label][_0x164fcd(0x1de)]=VisuMZ[label][_0x164fcd(0x1de)]||{},VisuMZ[_0x164fcd(0x48e)]=function(_0x7ec80,_0x5244b4){const _0x324cb2=_0x164fcd;for(const _0x3a0c2f in _0x5244b4){if(_0x3a0c2f['match'](/(.*):(.*)/i)){const _0x540c83=String(RegExp['$1']),_0x112b50=String(RegExp['$2'])[_0x324cb2(0x7e1)]()[_0x324cb2(0xab7)]();let _0x17cd0c,_0x159788,_0x23f470;switch(_0x112b50){case _0x324cb2(0x3d7):_0x17cd0c=_0x5244b4[_0x3a0c2f]!==''?Number(_0x5244b4[_0x3a0c2f]):0x0;break;case _0x324cb2(0x3a5):_0x159788=_0x5244b4[_0x3a0c2f]!==''?JSON[_0x324cb2(0x144)](_0x5244b4[_0x3a0c2f]):[],_0x17cd0c=_0x159788[_0x324cb2(0xa98)](_0x42262f=>Number(_0x42262f));break;case _0x324cb2(0xaae):_0x17cd0c=_0x5244b4[_0x3a0c2f]!==''?eval(_0x5244b4[_0x3a0c2f]):null;break;case'ARRAYEVAL':_0x159788=_0x5244b4[_0x3a0c2f]!==''?JSON['parse'](_0x5244b4[_0x3a0c2f]):[],_0x17cd0c=_0x159788[_0x324cb2(0xa98)](_0x336782=>eval(_0x336782));break;case _0x324cb2(0x327):_0x17cd0c=_0x5244b4[_0x3a0c2f]!==''?JSON[_0x324cb2(0x144)](_0x5244b4[_0x3a0c2f]):'';break;case'ARRAYJSON':_0x159788=_0x5244b4[_0x3a0c2f]!==''?JSON[_0x324cb2(0x144)](_0x5244b4[_0x3a0c2f]):[],_0x17cd0c=_0x159788[_0x324cb2(0xa98)](_0x349276=>JSON['parse'](_0x349276));break;case _0x324cb2(0x915):_0x17cd0c=_0x5244b4[_0x3a0c2f]!==''?new Function(JSON['parse'](_0x5244b4[_0x3a0c2f])):new Function(_0x324cb2(0x210));break;case _0x324cb2(0x7fb):_0x159788=_0x5244b4[_0x3a0c2f]!==''?JSON[_0x324cb2(0x144)](_0x5244b4[_0x3a0c2f]):[],_0x17cd0c=_0x159788[_0x324cb2(0xa98)](_0x439250=>new Function(JSON[_0x324cb2(0x144)](_0x439250)));break;case'STR':_0x17cd0c=_0x5244b4[_0x3a0c2f]!==''?String(_0x5244b4[_0x3a0c2f]):'';break;case _0x324cb2(0x4da):_0x159788=_0x5244b4[_0x3a0c2f]!==''?JSON[_0x324cb2(0x144)](_0x5244b4[_0x3a0c2f]):[],_0x17cd0c=_0x159788[_0x324cb2(0xa98)](_0x11507b=>String(_0x11507b));break;case _0x324cb2(0x907):_0x23f470=_0x5244b4[_0x3a0c2f]!==''?JSON[_0x324cb2(0x144)](_0x5244b4[_0x3a0c2f]):{},_0x7ec80[_0x540c83]={},VisuMZ[_0x324cb2(0x48e)](_0x7ec80[_0x540c83],_0x23f470);continue;case _0x324cb2(0xbe8):_0x159788=_0x5244b4[_0x3a0c2f]!==''?JSON[_0x324cb2(0x144)](_0x5244b4[_0x3a0c2f]):[],_0x17cd0c=_0x159788[_0x324cb2(0xa98)](_0x149f58=>VisuMZ[_0x324cb2(0x48e)]({},JSON[_0x324cb2(0x144)](_0x149f58)));break;default:continue;}_0x7ec80[_0x540c83]=_0x17cd0c;}}return _0x7ec80;},(_0xd3027b=>{const _0x53c68d=_0x164fcd,_0x3798e1=_0xd3027b[_0x53c68d(0x16d)];for(const _0x2272e8 of dependencies){if(!Imported[_0x2272e8]){alert(_0x53c68d(0xab4)[_0x53c68d(0x272)](_0x3798e1,_0x2272e8)),SceneManager[_0x53c68d(0x7f7)]();break;}}const _0x4662ad=_0xd3027b[_0x53c68d(0x655)];if(_0x4662ad[_0x53c68d(0xa5d)](/\[Version[ ](.*?)\]/i)){const _0x4685cc=Number(RegExp['$1']);_0x4685cc!==VisuMZ[label][_0x53c68d(0xb5c)]&&(alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0x53c68d(0x272)](_0x3798e1,_0x4685cc)),SceneManager[_0x53c68d(0x7f7)]());}if(_0x4662ad[_0x53c68d(0xa5d)](/\[Tier[ ](\d+)\]/i)){const _0x30ef34=Number(RegExp['$1']);if(_0x30ef34<tier)alert(_0x53c68d(0x256)[_0x53c68d(0x272)](_0x3798e1,_0x30ef34,tier)),SceneManager[_0x53c68d(0x7f7)]();else{if(_0x53c68d(0x82d)==='zBkCN')tier=Math[_0x53c68d(0xc92)](_0x30ef34,tier);else{if(this[_0x53c68d(0xc12)]===_0x5b1e76&&!_0x5c7d59['hasSvBattler']())return;}}}VisuMZ[_0x53c68d(0x48e)](VisuMZ[label]['Settings'],_0xd3027b[_0x53c68d(0xb98)]);})(pluginData),VisuMZ[_0x164fcd(0xb62)]=function(_0x522d22){const _0x2e1d74=_0x164fcd;let _0x1a66bb=[];for(const _0xdd968b of _0x522d22){if(_0x2e1d74(0x53e)==='DwbLH'){if(this[_0x2e1d74(0x41e)]){if(!_0x5c2b54[_0x2e1d74(0x8fc)][_0x2e1d74(0xa60)](this[_0x2e1d74(0x41e)],_0x530e6c))return!![];if(!_0x28e6b0[_0x2e1d74(0x8fc)][_0x2e1d74(0x292)](this[_0x2e1d74(0x41e)],_0x32ae83))return!![];if(!_0x4321ef[_0x2e1d74(0x8fc)][_0x2e1d74(0x3f5)](this[_0x2e1d74(0x41e)],_0x3c926a))return!![];}}else _0x1a66bb=_0x1a66bb[_0x2e1d74(0x395)](VisuMZ[_0x2e1d74(0xc70)](_0xdd968b));}return _0x1a66bb[_0x2e1d74(0x69f)](_0x107825=>_0x107825);},VisuMZ[_0x164fcd(0xc70)]=function(_0xeaf1cd){const _0x4828cd=_0x164fcd,_0x27499c=BattleManager[_0x4828cd(0x2cc)]()[_0x4828cd(0x69f)](_0x116793=>_0x116793&&_0x116793['isAppeared']()),_0x4f1e7d=BattleManager['_subject'],_0x104de2=BattleManager[_0x4828cd(0x49a)],_0x3e816d=BattleManager['_allTargets']?BattleManager[_0x4828cd(0x5b3)][_0x4828cd(0x725)](0x0):_0x27499c;_0xeaf1cd=_0xeaf1cd[_0x4828cd(0x790)]()[_0x4828cd(0xab7)]();if(_0xeaf1cd===_0x4828cd(0xb31)){if('poofV'===_0x4828cd(0xb89))this[_0x4828cd(0x820)]=new _0x17d2cd(),this[_0x4828cd(0x23a)](this[_0x4828cd(0x820)]);else return[_0x4f1e7d];}else{if(_0xeaf1cd===_0x4828cd(0xcbe))return[_0x104de2];else{if(_0xeaf1cd===_0x4828cd(0x516)){if(_0x104de2){if(_0x4828cd(0x8c0)===_0x4828cd(0x866))return _0x3b74e5[_0x4828cd(0x5b1)][_0x4828cd(0xa10)](this,_0x5339be);else{const _0x3cb4b6=_0x3e816d[_0x4828cd(0x990)](_0x104de2);return _0x3cb4b6>=0x0?[_0x3e816d[_0x3cb4b6-0x1]||_0x104de2]:[_0x104de2];}}}else{if(_0xeaf1cd===_0x4828cd(0x7d2)){if(_0x104de2){if(_0x4828cd(0x60c)===_0x4828cd(0x60c)){const _0x2845f1=_0x3e816d[_0x4828cd(0x990)](_0x104de2);return _0x2845f1>=0x0?[_0x3e816d[_0x2845f1+0x1]||_0x104de2]:[_0x104de2];}else{const _0x2208fc=this[_0x4828cd(0x858)]();this[_0x4828cd(0x669)]=new _0x17c0e2(_0x2208fc),this[_0x4828cd(0x669)][_0x4828cd(0xad3)](),this['addChild'](this[_0x4828cd(0x669)]);}}}else{if(_0xeaf1cd===_0x4828cd(0x1a9))return _0x3e816d;else{if(_0xeaf1cd==='focus')return[_0x4f1e7d][_0x4828cd(0x395)](_0x3e816d);else{if(_0xeaf1cd===_0x4828cd(0xcaf))return _0x27499c[_0x4828cd(0x69f)](_0x4bf803=>_0x4bf803!==_0x4f1e7d&&!_0x3e816d['includes'](_0x4bf803)&&_0x4bf803[_0x4828cd(0x5e5)]());else{if(_0xeaf1cd===_0x4828cd(0xc11)){if(_0x4828cd(0x2c6)!==_0x4828cd(0x2c6))_0x53c6c5[_0x4828cd(0x2bf)][_0x4828cd(0x71d)][_0x4828cd(0xa10)](this),this[_0x4828cd(0x940)](),this[_0x4828cd(0x682)](),this[_0x4828cd(0xcde)](),this['updateOpacity']();else return[VisuMZ['GetActionSequenceSpecialTarget']()];}else{if(_0xeaf1cd[_0x4828cd(0xa5d)](/SPECIAL (.*)>/i)){const _0x2ad375=String(RegExp['$1'])[_0x4828cd(0x77e)](',')[_0x4828cd(0xa98)](_0x2101e3=>_0x2101e3[_0x4828cd(0xab7)]());return[VisuMZ['GetActionSequenceSpecialTargetWithFlags'](_0x2ad375)];}}}}}}}}}if(_0x4f1e7d){if(_0x4828cd(0x70b)!==_0x4828cd(0x186)){if(_0xeaf1cd===_0x4828cd(0x1c3))return _0x4f1e7d[_0x4828cd(0xbe6)]()['aliveMembers']();else{if(_0xeaf1cd===_0x4828cd(0x767))return _0x4f1e7d['friendsUnit']()[_0x4828cd(0x279)]()[_0x4828cd(0x69f)](_0xbc2b0f=>_0xbc2b0f!==_0x4f1e7d);else{if(_0xeaf1cd===_0x4828cd(0x23f))return _0x4828cd(0x696)!==_0x4828cd(0xba9)?_0x4f1e7d['friendsUnit']()[_0x4828cd(0x279)]()[_0x4828cd(0x69f)](_0x13a8ca=>_0x13a8ca!==_0x104de2):_0x30b329[_0x4828cd(0x346)]()[this[_0x4828cd(0x218)]];else{if(_0xeaf1cd===_0x4828cd(0x789))return _0x4f1e7d[_0x4828cd(0xbe6)]()[_0x4828cd(0x211)]();else{if(_0xeaf1cd[_0x4828cd(0xa5d)](/FRIEND INDEX (\d+)/i)){const _0x3c2f65=Number(RegExp['$1']);return[_0x4f1e7d[_0x4828cd(0xbe6)]()[_0x4828cd(0x346)]()[_0x3c2f65]];}}}}}if(_0xeaf1cd===_0x4828cd(0x7d5)){if(_0x4828cd(0xc98)!==_0x4828cd(0xc98))_0x4e78c5=_0x4828cd(0x37f);else return _0x4f1e7d[_0x4828cd(0xb4f)]()['aliveMembers']();}else{if(_0xeaf1cd===_0x4828cd(0x7b3)){if(_0x4828cd(0xa50)!==_0x4828cd(0xbb8))return _0x4f1e7d[_0x4828cd(0xb4f)]()[_0x4828cd(0x279)]()[_0x4828cd(0x69f)](_0x29464e=>_0x29464e!==_0x104de2);else{this[_0x4828cd(0x56b)](_0x4828cd(0xa16),_0xa5e7e4);if(!_0x3cd27c[_0x4828cd(0xb36)][_0x4828cd(0x1de)][_0x4828cd(0xa08)][_0x4828cd(0x578)])return;this[_0x4828cd(0x56b)](_0x4828cd(0x233),_0x2e5f1c['magicReflection'][_0x4828cd(0x272)](_0x3cba87['name']()));}}else{if(_0xeaf1cd===_0x4828cd(0xc72))return _0x4f1e7d['opponentsUnit']()[_0x4828cd(0x211)]();else{if(_0xeaf1cd[_0x4828cd(0xa5d)](/OPPONENT INDEX (\d+)/i)){const _0x3ef062=Number(RegExp['$1']);return[_0x4f1e7d[_0x4828cd(0xb4f)]()[_0x4828cd(0x346)]()[_0x3ef062]];}}}}}else _0x4ea06b(_0xcabc0b[_0x4828cd(0x272)]('CTB')),_0x217780[_0x4828cd(0x7f7)]();}if(_0xeaf1cd===_0x4828cd(0x36a))return $gameParty[_0x4828cd(0x279)]();else{if(_0xeaf1cd==='alive\x20actors\x20not\x20user')return $gameParty['aliveMembers']()['filter'](_0x5913b0=>_0x5913b0!==_0x4f1e7d);else{if(_0xeaf1cd==='alive\x20actors\x20not\x20target')return $gameParty[_0x4828cd(0x279)]()['filter'](_0x550918=>_0x550918!==_0x104de2);else{if(_0xeaf1cd==='dead\x20actors'){if('xkWyn'!==_0x4828cd(0x257)){_0x4ea204=_0x20ec53['BattleCore']['JS'][_0x1f670d]['call'](this,this['subject'](),_0x48e844,this[_0x4828cd(0x5e9)](),_0x5660bc);if(_0x563078)_0x56321e=_0x1ae735;}else return $gameParty[_0x4828cd(0x211)]();}else{if(_0xeaf1cd[_0x4828cd(0xa5d)](/ACTOR INDEX (\d+)/i)){if(_0x4828cd(0xa92)===_0x4828cd(0xa29))this[_0x4828cd(0x629)]();else{const _0x1b7ff9=Number(RegExp['$1']);return[$gameParty[_0x4828cd(0x346)]()[_0x1b7ff9]];}}else{if(_0xeaf1cd[_0x4828cd(0xa5d)](/ACTOR ID (\d+)/i)){if(_0x4828cd(0x973)!=='izadx')_0x2583de[_0x4828cd(0xb36)][_0x4828cd(0xa8d)]['call'](this,_0xf940d9,_0x1e52e8,_0x4d79a8),this[_0x4828cd(0xbe9)]={};else{const _0x2de6d5=Number(RegExp['$1']);return[$gameActors['actor'](_0x2de6d5)];}}}}}}}if(_0xeaf1cd===_0x4828cd(0x955))return $gameTroop['aliveMembers']();else{if(_0xeaf1cd===_0x4828cd(0x8a0))return $gameTroop['aliveMembers']()[_0x4828cd(0x69f)](_0x1cb494=>_0x1cb494!==_0x4f1e7d);else{if(_0xeaf1cd===_0x4828cd(0x4f6))return $gameTroop[_0x4828cd(0x279)]()[_0x4828cd(0x69f)](_0x1b3f4a=>_0x1b3f4a!==_0x104de2);else{if(_0xeaf1cd===_0x4828cd(0xa0d)){if('GKoss'!==_0x4828cd(0x971))return $gameTroop[_0x4828cd(0x211)]();else this[_0x4828cd(0x4c4)]=0x0;}else{if(_0xeaf1cd[_0x4828cd(0xa5d)](/ENEMY INDEX (\d+)/i)){if(_0x4828cd(0x338)===_0x4828cd(0x9be)){_0x47df8a('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x4642c4[_0x4828cd(0x7f7)]();return;}else{const _0x397d34=Number(RegExp['$1']);return[$gameTroop[_0x4828cd(0x346)]()[_0x397d34]];}}else{if(_0xeaf1cd[_0x4828cd(0xa5d)](/ENEMY ID (\d+)/i)){if('qpQJE'===_0x4828cd(0x694))this[_0x4828cd(0xb52)]()&&this[_0x4828cd(0x5af)]==='battleEnd'&&(this[_0x4828cd(0x6b6)]=null),_0x552b1b['BattleCore']['BattleManager_cancelActorInput'][_0x4828cd(0xa10)](this);else{const _0x11c4b1=Number(RegExp['$1']);return $gameTroop[_0x4828cd(0x279)]()['filter'](_0x3e9cc9=>_0x3e9cc9[_0x4828cd(0x5ec)]()===_0x11c4b1);}}}}}}}if(_0xeaf1cd===_0x4828cd(0xa3e))return _0x27499c[_0x4828cd(0x69f)](_0x423794=>_0x423794[_0x4828cd(0x949)]());else{if(_0xeaf1cd==='alive\x20battlers\x20not\x20user'){if('lCFvq'!=='lCFvq'){const _0x21519a=this[_0x4828cd(0x7f9)]&&this[_0x4828cd(0x7f9)][_0x4828cd(0xcf8)]();this[_0x4828cd(0x561)]=(_0x21519a?-0x1:0x1)*_0x257145['abs'](this[_0x4828cd(0xb56)]['x']);}else return _0x27499c[_0x4828cd(0x69f)](_0x2a1a8b=>_0x2a1a8b[_0x4828cd(0x949)]()&&_0x2a1a8b!==_0x4f1e7d);}else{if(_0xeaf1cd===_0x4828cd(0xb65))return _0x27499c[_0x4828cd(0x69f)](_0x46e7c4=>_0x46e7c4[_0x4828cd(0x949)]()&&_0x46e7c4!==_0x104de2);else{if(_0xeaf1cd==='dead\x20battlers')return _0x27499c[_0x4828cd(0x69f)](_0x1c574d=>_0x1c574d[_0x4828cd(0x468)]());}}}return[];},VisuMZ[_0x164fcd(0xc1b)]=function(){const _0x153cbb=_0x164fcd;return BattleManager[_0x153cbb(0x49a)];},VisuMZ['GetActionSequenceSpecialTargetWithFlags']=function(_0x1cdf58){const _0x2d437f=_0x164fcd;return BattleManager[_0x2d437f(0x49a)];},PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x1dc),_0x404579=>{const _0x5af7b6=_0x164fcd;if(!SceneManager[_0x5af7b6(0x53f)]())return;VisuMZ['ConvertParams'](_0x404579,_0x404579);const _0x3d8f36=$gameTemp[_0x5af7b6(0x1da)](),_0x2cb248=BattleManager['_action'],_0x517b8f=BattleManager['_subject'],_0x500b07=BattleManager[_0x5af7b6(0x5b3)]?BattleManager[_0x5af7b6(0x5b3)][_0x5af7b6(0x725)](0x0):[],_0x2e6cd4=BattleManager[_0x5af7b6(0x566)];if(!_0x3d8f36||!_0x2cb248||!_0x517b8f)return;if(!_0x2cb248[_0x5af7b6(0x5e9)]())return;if(_0x404579['DisplayAction'])_0x2e6cd4[_0x5af7b6(0x6dd)](_0x517b8f,_0x2cb248[_0x5af7b6(0x5e9)]());_0x404579[_0x5af7b6(0x869)]&&_0x2e6cd4[_0x5af7b6(0x56b)](_0x5af7b6(0x1e9),_0x517b8f,_0x500b07,!![]);if(_0x404579[_0x5af7b6(0x82b)])_0x2e6cd4['push'](_0x5af7b6(0x998),_0x517b8f,_0x2cb248);if(_0x404579[_0x5af7b6(0x21f)])_0x2e6cd4[_0x5af7b6(0x56b)](_0x5af7b6(0x41f));if(_0x404579['CastAnimation'])_0x2e6cd4[_0x5af7b6(0x56b)](_0x5af7b6(0x1c2),_0x517b8f,_0x2cb248);if(_0x404579[_0x5af7b6(0x32a)])_0x2e6cd4['push'](_0x5af7b6(0x72c));_0x3d8f36['setWaitMode'](_0x5af7b6(0x563));}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],'ActSeq_Set_WholeActionSet',_0x450930=>{const _0x3cd6b9=_0x164fcd;if(!SceneManager[_0x3cd6b9(0x53f)]())return;VisuMZ['ConvertParams'](_0x450930,_0x450930);const _0x26adff=$gameTemp['getLastPluginCommandInterpreter'](),_0xcc8c79=BattleManager[_0x3cd6b9(0xb8e)],_0x27d3b7=BattleManager['_subject'],_0x5235c9=BattleManager[_0x3cd6b9(0x5b3)]?BattleManager[_0x3cd6b9(0x5b3)]['slice'](0x0):[],_0x4650fd=BattleManager[_0x3cd6b9(0x566)],_0x1d9474=_0x450930[_0x3cd6b9(0x670)]??![];if(!_0x26adff||!_0xcc8c79||!_0x27d3b7)return;if(!_0xcc8c79[_0x3cd6b9(0x5e9)]())return;let _0x3c0346=_0x1d9474?_0x4650fd[_0x3cd6b9(0x759)](_0x27d3b7):0x1;for(let _0x32b64e=0x0;_0x32b64e<_0x3c0346;_0x32b64e++){if(_0x3cd6b9(0x744)===_0x3cd6b9(0x744)){_0x1d9474&&_0x27d3b7[_0x3cd6b9(0x31f)]()&&_0x4650fd[_0x3cd6b9(0x56b)](_0x3cd6b9(0x8e6),_0x27d3b7,_0x32b64e);if(_0x450930[_0x3cd6b9(0x237)])_0x4650fd[_0x3cd6b9(0x56b)](_0x3cd6b9(0x78f),_0x27d3b7,_0xcc8c79);if(_0x450930['WaitCount']>0x0)_0x4650fd[_0x3cd6b9(0x56b)](_0x3cd6b9(0xc7d),_0x450930[_0x3cd6b9(0x386)]);if(_0x450930['ActionAnimation'])_0x4650fd[_0x3cd6b9(0x56b)](_0x3cd6b9(0x589),_0x27d3b7,_0x5235c9,_0xcc8c79['item']()['animationId']);if(_0x450930[_0x3cd6b9(0x32a)])_0x4650fd[_0x3cd6b9(0x56b)](_0x3cd6b9(0x72c));for(const _0x4c4688 of _0x5235c9){if(!_0x4c4688)continue;if(_0x450930[_0x3cd6b9(0x76b)])_0x4650fd[_0x3cd6b9(0x56b)]('actionEffect',_0x27d3b7,_0x4c4688);}}else this[_0x3cd6b9(0x35c)][_0x3cd6b9(0xcf5)][_0x3cd6b9(0x225)]=this[_0x3cd6b9(0x7f9)][_0x3cd6b9(0xcdf)]();}if(_0x1d9474&&_0x27d3b7[_0x3cd6b9(0x31f)]()){if('QTYVW'!==_0x3cd6b9(0x8cf))_0x4650fd['push'](_0x3cd6b9(0x2ed),_0x27d3b7);else{const _0x487ac8=this['commandStyle'](),_0x2ee498=_0x1f1305['BattleCore']['Settings'][_0x3cd6b9(0x560)][_0x3cd6b9(0x7f5)],_0x49f743=_0x487ac8===_0x3cd6b9(0xb1d)?_0x49200a[_0x3cd6b9(0x5e9)]:_0x3cd6b9(0x478)[_0x3cd6b9(0x272)](_0x2ee498,_0x54e28c[_0x3cd6b9(0x5e9)]),_0x438967=this[_0x3cd6b9(0x387)]();this['addCommand'](_0x49f743,_0x3cd6b9(0x5e9),_0x438967);}}if(_0x450930[_0x3cd6b9(0x869)])_0x4650fd[_0x3cd6b9(0x56b)](_0x3cd6b9(0x1e9),_0x27d3b7,_0x5235c9,![]);_0x26adff['setWaitMode'](_0x3cd6b9(0x563));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Set_TargetActionSet',_0x3b203f=>{const _0x15e329=_0x164fcd;if(!SceneManager[_0x15e329(0x53f)]())return;VisuMZ['ConvertParams'](_0x3b203f,_0x3b203f);const _0x2bc219=$gameTemp[_0x15e329(0x1da)](),_0x6df1f7=BattleManager[_0x15e329(0xb8e)],_0x488d10=BattleManager[_0x15e329(0x5a7)],_0x3650e0=BattleManager[_0x15e329(0x5b3)]?BattleManager[_0x15e329(0x5b3)][_0x15e329(0x725)](0x0):[],_0x403bf2=BattleManager['_logWindow'],_0x1a7c3c=_0x3b203f['DualWield']??![];if(!_0x2bc219||!_0x6df1f7||!_0x488d10)return;if(!_0x6df1f7[_0x15e329(0x5e9)]())return;let _0x549a15=_0x1a7c3c?_0x403bf2[_0x15e329(0x759)](_0x488d10):0x1;for(let _0x4ea30c=0x0;_0x4ea30c<_0x549a15;_0x4ea30c++){for(const _0x16ad15 of _0x3650e0){if(!_0x16ad15)continue;_0x1a7c3c&&_0x488d10[_0x15e329(0x31f)]()&&(_0x15e329(0x92f)!=='fwmBI'?_0x403bf2['push'](_0x15e329(0x8e6),_0x488d10,_0x4ea30c):_0x1e0fd6['setWaitMode'](_0x15e329(0x184)));if(_0x3b203f['PerformAction'])_0x403bf2['push'](_0x15e329(0x78f),_0x488d10,_0x6df1f7);if(_0x3b203f[_0x15e329(0x529)]>0x0)_0x403bf2[_0x15e329(0x56b)]('waitCount',_0x3b203f['WaitCount1']);if(_0x3b203f[_0x15e329(0x4d5)])_0x403bf2[_0x15e329(0x56b)](_0x15e329(0x589),_0x488d10,[_0x16ad15],_0x6df1f7[_0x15e329(0x5e9)]()[_0x15e329(0x52a)]);if(_0x3b203f['WaitCount2']>0x0)_0x403bf2['push'](_0x15e329(0xc7d),_0x3b203f['WaitCount2']);if(_0x3b203f['ActionEffect'])_0x403bf2['push']('actionEffect',_0x488d10,_0x16ad15);}}_0x1a7c3c&&_0x488d10['isActor']()&&_0x403bf2['push'](_0x15e329(0x2ed),_0x488d10);if(_0x3b203f[_0x15e329(0x869)])_0x403bf2[_0x15e329(0x56b)](_0x15e329(0x1e9),_0x488d10,_0x3650e0,![]);_0x2bc219['setWaitMode'](_0x15e329(0x563));}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x248),_0x4509a9=>{const _0x35cd6f=_0x164fcd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x35cd6f(0x48e)](_0x4509a9,_0x4509a9);const _0x5d4db3=$gameTemp['getLastPluginCommandInterpreter'](),_0x11678b=BattleManager[_0x35cd6f(0xb8e)],_0x1bf9a3=BattleManager[_0x35cd6f(0x5a7)],_0x433556=BattleManager[_0x35cd6f(0x5b3)]?BattleManager[_0x35cd6f(0x5b3)][_0x35cd6f(0x725)](0x0):[],_0xed39b5=BattleManager['_logWindow'];if(!_0x5d4db3||!_0x11678b||!_0x1bf9a3)return;if(!_0x11678b[_0x35cd6f(0x5e9)]())return;if(_0x4509a9[_0x35cd6f(0x869)])_0xed39b5[_0x35cd6f(0x56b)]('applyImmortal',_0x1bf9a3,_0x433556,![]);if(_0x4509a9['WaitForNewLine'])_0xed39b5[_0x35cd6f(0x56b)](_0x35cd6f(0x86c));if(_0x4509a9[_0x35cd6f(0x4ca)])_0xed39b5[_0x35cd6f(0x56b)](_0x35cd6f(0x264));if(_0x4509a9[_0x35cd6f(0x713)])_0xed39b5[_0x35cd6f(0x56b)](_0x35cd6f(0x7bf));if(_0x4509a9[_0x35cd6f(0x183)])_0xed39b5['push']('performActionEnd',_0x1bf9a3);if(_0x4509a9[_0x35cd6f(0x21f)])_0xed39b5[_0x35cd6f(0x56b)]('waitForMovement');_0x5d4db3[_0x35cd6f(0x3a2)]('battlelog');}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xbe4),_0x308278=>{const _0x5a63d4=_0x164fcd;if(!SceneManager[_0x5a63d4(0x53f)]())return;if(!Imported[_0x5a63d4(0x2d3)])return;VisuMZ[_0x5a63d4(0x48e)](_0x308278,_0x308278);const _0x4a4449=$gameTemp['getLastPluginCommandInterpreter'](),_0x3bfd45=_0x308278['WaitForAngle'];if(!_0x4a4449)return;$gameScreen['setBattleAngle'](_0x308278['Angle'],_0x308278[_0x5a63d4(0x908)],_0x308278[_0x5a63d4(0x3a7)]);if(_0x3bfd45)_0x4a4449['setWaitMode']('battleAngle');}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x6fb),_0x2a7eae=>{const _0x3fad04=_0x164fcd;if(!SceneManager[_0x3fad04(0x53f)]())return;if(!Imported[_0x3fad04(0x2d3)])return;VisuMZ[_0x3fad04(0x48e)](_0x2a7eae,_0x2a7eae);const _0x17eeb3=$gameTemp[_0x3fad04(0x1da)](),_0x3aee0e=_0x2a7eae[_0x3fad04(0xbf5)];if(!_0x17eeb3)return;$gameScreen['setBattleAngle'](0x0,_0x2a7eae[_0x3fad04(0x908)],_0x2a7eae[_0x3fad04(0x3a7)]);if(_0x3aee0e)_0x17eeb3[_0x3fad04(0x3a2)](_0x3fad04(0x847));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x49b),_0x18633c=>{const _0x422924=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x422924(0x2d3)])return;const _0x67e605=$gameTemp[_0x422924(0x1da)]();if(!_0x67e605)return;_0x67e605[_0x422924(0x3a2)](_0x422924(0x847));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x758),_0xc7b682=>{const _0xab6695=_0x164fcd;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0xc7b682,_0xc7b682);const _0x1bc620=$gameTemp['getLastPluginCommandInterpreter'](),_0x461e9a=BattleManager[_0xab6695(0xb8e)],_0x28ee85=BattleManager[_0xab6695(0x5a7)],_0x47e8f1=VisuMZ[_0xab6695(0xb62)](_0xc7b682[_0xab6695(0x7cc)]),_0x4d41b7=_0xc7b682[_0xab6695(0x335)],_0x4b718a=BattleManager['_logWindow'];if(!_0x1bc620||!_0x461e9a||!_0x28ee85)return;if(!_0x461e9a[_0xab6695(0x5e9)]())return;let _0x19c1ad=_0x461e9a['item']()['animationId'];if(_0x19c1ad<0x0)_0x19c1ad=_0x28ee85['attackAnimationId1']();$gameTemp[_0xab6695(0x9eb)](_0x47e8f1,_0x19c1ad,_0x4d41b7),_0xc7b682['WaitForAnimation']&&_0x1bc620[_0xab6695(0x3a2)](_0xab6695(0x1fc));}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],'ActSeq_Animation_AttackAnimation',_0x13cb45=>{const _0xd34d3f=_0x164fcd;if(!SceneManager[_0xd34d3f(0x53f)]())return;VisuMZ['ConvertParams'](_0x13cb45,_0x13cb45);const _0x13c25e=$gameTemp[_0xd34d3f(0x1da)](),_0x5ec6f5=BattleManager[_0xd34d3f(0x5a7)],_0x28b229=VisuMZ[_0xd34d3f(0xb62)](_0x13cb45['Targets']),_0x1d303d=_0x13cb45[_0xd34d3f(0x335)],_0x285097=BattleManager[_0xd34d3f(0x566)];if(!_0x13c25e||!_0x5ec6f5)return;const _0x4aebe0=_0x5ec6f5['attackAnimationId1']();$gameTemp[_0xd34d3f(0x9eb)](_0x28b229,_0x4aebe0,_0x1d303d),_0x13cb45[_0xd34d3f(0x32a)]&&_0x13c25e[_0xd34d3f(0x3a2)](_0xd34d3f(0x1fc));}),PluginManager['registerCommand'](pluginData['name'],_0x164fcd(0x213),_0x11ef17=>{const _0xc29ebb=_0x164fcd;if(!SceneManager[_0xc29ebb(0x53f)]())return;VisuMZ[_0xc29ebb(0x48e)](_0x11ef17,_0x11ef17);const _0xcb89c7=_0xb46e7b['attackAnimationIdSlot'](_0x11ef17[_0xc29ebb(0x549)]);if(_0xcb89c7<=0x0)return;const _0x245f7a=$gameTemp['getLastPluginCommandInterpreter'](),_0xb46e7b=BattleManager[_0xc29ebb(0x5a7)],_0x2ccc54=VisuMZ['CreateActionSequenceTargets'](_0x11ef17[_0xc29ebb(0x7cc)]),_0x53465a=_0x11ef17[_0xc29ebb(0x335)],_0x4f534e=BattleManager[_0xc29ebb(0x566)];if(!_0x245f7a||!_0xb46e7b)return;$gameTemp[_0xc29ebb(0x9eb)](_0x2ccc54,_0xcb89c7,_0x53465a),_0x11ef17[_0xc29ebb(0x32a)]&&(_0xc29ebb(0x3b1)===_0xc29ebb(0x7b7)?(this[_0xc29ebb(0x79c)]['_stateSprite'][_0xc29ebb(0xb56)]['x']=-0x1/(this[_0xc29ebb(0xb56)]['x']||0.001),this[_0xc29ebb(0x79c)][_0xc29ebb(0xc81)]['scale']['y']=0x1/(this[_0xc29ebb(0xb56)]['y']||0.001)):_0x245f7a[_0xc29ebb(0x3a2)](_0xc29ebb(0x1fc)));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x980),_0xd7da52=>{const _0x4572af=_0x164fcd;if(!SceneManager[_0x4572af(0x53f)]())return;VisuMZ[_0x4572af(0x48e)](_0xd7da52,_0xd7da52);const _0x5a0a57=$gameTemp['getLastPluginCommandInterpreter'](),_0x388c90=BattleManager['_action'],_0x1ae356=_0xd7da52[_0x4572af(0x335)],_0x4aef12=VisuMZ[_0x4572af(0xb62)](_0xd7da52[_0x4572af(0x7cc)]);if(!_0x5a0a57||!_0x388c90)return;if(!_0x388c90[_0x4572af(0x5e9)]())return;for(const _0x1fda6d of _0x4aef12){if('PNuyH'===_0x4572af(0x24a)){if(!_0x1fda6d)continue;_0x1fda6d[_0x4572af(0x1c2)](_0x388c90,_0x1ae356);}else return _0x1b1490[_0x4572af(0x818)]?_0x1777ea['CoreEngine'][_0x4572af(0x1de)][_0x4572af(0xb13)][_0x4572af(0x220)]:![];}if(_0xd7da52[_0x4572af(0x32a)])_0x5a0a57['setWaitMode']('battleAnimation');}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x6fe),_0x538301=>{const _0x363126=_0x164fcd;VisuMZ[_0x363126(0x48e)](_0x538301,_0x538301);const _0x12b769=$gameTemp[_0x363126(0x1da)](),_0x344710=VisuMZ['CreateActionSequenceTargets'](_0x538301[_0x363126(0x7cc)]),_0x3961a3=_0x538301[_0x363126(0x69a)];if(!_0x3961a3)return;for(const _0x2b84d9 of _0x344710){if(_0x363126(0x3d5)!==_0x363126(0x825)){if(!_0x2b84d9)continue;if(!_0x2b84d9['isActor']())continue;_0x2b84d9[_0x363126(0x4d9)](_0x3961a3);}else return![];}}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],'ActSeq_Animation_PlayAtCoordinate',_0x524bd7=>{const _0x598d1e=_0x164fcd;if(!SceneManager[_0x598d1e(0x4c8)])return;if(!SceneManager[_0x598d1e(0x4c8)][_0x598d1e(0xbd6)])return;if(!Imported[_0x598d1e(0x818)])return;VisuMZ[_0x598d1e(0x48e)](_0x524bd7,_0x524bd7);const _0x1a876f=$gameTemp[_0x598d1e(0x1da)](),_0x1bb2df=Math[_0x598d1e(0xa13)](_0x524bd7[_0x598d1e(0x4a5)]),_0x2757ba=Math[_0x598d1e(0xa13)](_0x524bd7['pointY']);$gameTemp['requestPointAnimation'](_0x1bb2df,_0x2757ba,_0x524bd7[_0x598d1e(0x27f)],_0x524bd7[_0x598d1e(0x335)],_0x524bd7[_0x598d1e(0xb9b)]);if(_0x524bd7[_0x598d1e(0x3fd)]&&_0x1a876f){if('bqCsh'!==_0x598d1e(0x278)){if(!_0x5ca048[_0x598d1e(0x53f)]())return;const _0x10b4a1=_0x41667b[_0x598d1e(0x1da)]();if(!_0x10b4a1)return;_0x10b4a1['setWaitMode'](_0x598d1e(0x636));}else SceneManager['_scene'][_0x598d1e(0xbd6)][_0x598d1e(0xa07)](),_0x1a876f[_0x598d1e(0x3a2)]('battleAnimation');}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x633),_0x4f605f=>{const _0x1a9526=_0x164fcd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1a9526(0x48e)](_0x4f605f,_0x4f605f);const _0x25c7cf=$gameTemp[_0x1a9526(0x1da)](),_0x883b47=VisuMZ['CreateActionSequenceTargets'](_0x4f605f['Targets']),_0x4202ef=_0x4f605f['AnimationID'],_0xfb9536=_0x4f605f[_0x1a9526(0x335)];if(!_0x25c7cf)return;$gameTemp[_0x1a9526(0x9eb)](_0x883b47,_0x4202ef,_0xfb9536);if(_0x4f605f['WaitForAnimation'])_0x25c7cf[_0x1a9526(0x3a2)]('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x37a),_0x4d938f=>{const _0x3a1659=_0x164fcd;if(!SceneManager[_0x3a1659(0x53f)]())return;const _0xfc15a9=$gameTemp[_0x3a1659(0x1da)]();if(!_0xfc15a9)return;_0xfc15a9[_0x3a1659(0x3a2)](_0x3a1659(0x1fc));}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x565),_0x3953e4=>{const _0x3ee947=_0x164fcd;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3953e4,_0x3953e4);const _0x1a2f57=BattleManager['_logWindow'],_0x262c15=_0x3953e4[_0x3ee947(0xc55)]&&Imported['VisuMZ_4_CombatLog'];_0x1a2f57[_0x3ee947(0x233)](_0x3953e4[_0x3ee947(0xc16)]);if(_0x262c15&&Imported['VisuMZ_4_CombatLog']){if(_0x3ee947(0x430)===_0x3ee947(0x430))$gameSystem[_0x3ee947(0xc5d)](_0x3953e4[_0x3ee947(0xc16)]||'',_0x3953e4[_0x3ee947(0x354)]||0x0);else{if(!_0xd31a5e[_0x3ee947(0x709)]())return![];return![];}}}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0xa1d),_0xd2ca52=>{const _0x1d0d3=_0x164fcd;if(!SceneManager[_0x1d0d3(0x53f)]())return;const _0x50cb0b=BattleManager[_0x1d0d3(0x566)];_0x50cb0b['clear']();}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_BattleLog_DisplayAction',_0xbca18c=>{const _0x3285a1=_0x164fcd;if(!SceneManager[_0x3285a1(0x53f)]())return;const _0x420261=$gameTemp['getLastPluginCommandInterpreter'](),_0xda478c=BattleManager[_0x3285a1(0xb8e)],_0x323fd1=BattleManager['_subject'],_0x5b0a52=BattleManager[_0x3285a1(0x566)];if(!_0x420261||!_0xda478c||!_0x323fd1)return;if(!_0xda478c[_0x3285a1(0x5e9)]())return;_0x5b0a52[_0x3285a1(0x6dd)](_0x323fd1,_0xda478c[_0x3285a1(0x5e9)]()),_0x420261[_0x3285a1(0x3a2)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x209),_0x1463be=>{const _0x29d942=_0x164fcd;if(!SceneManager[_0x29d942(0x53f)]())return;const _0x286d8e=BattleManager[_0x29d942(0x566)];_0x286d8e['popBaseLine']();}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0xa7d),_0x58af30=>{const _0x3510a5=_0x164fcd;if(!SceneManager[_0x3510a5(0x53f)]())return;const _0x2df9f3=BattleManager[_0x3510a5(0x566)];_0x2df9f3[_0x3510a5(0x1ca)]();}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_BattleLog_Refresh',_0x1f77a9=>{const _0x5edfcb=_0x164fcd;if(!SceneManager['isSceneBattle']())return;const _0x334226=BattleManager[_0x5edfcb(0x566)];_0x334226[_0x5edfcb(0x72d)]();}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],'ActSeq_BattleLog_UI',_0x3d1551=>{const _0x309abe=_0x164fcd;if(!SceneManager[_0x309abe(0x53f)]())return;VisuMZ[_0x309abe(0x48e)](_0x3d1551,_0x3d1551),SceneManager[_0x309abe(0x4c8)][_0x309abe(0xc1e)](_0x3d1551[_0x309abe(0x161)]);}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x799),_0x5dd2e0=>{const _0x415ce7=_0x164fcd;if(!SceneManager[_0x415ce7(0x53f)]())return;const _0x2880bc=$gameTemp['getLastPluginCommandInterpreter']();_0x2880bc[_0x415ce7(0x3a2)](_0x415ce7(0x563));}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x433),_0x10fd76=>{const _0x45311b=_0x164fcd;if(!SceneManager[_0x45311b(0x53f)]())return;const _0x20b58d=$gameTemp[_0x45311b(0x1da)](),_0x1b3bbe=BattleManager[_0x45311b(0x566)];_0x1b3bbe['waitForNewLine'](),_0x20b58d[_0x45311b(0x3a2)](_0x45311b(0x563));}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x324),_0xfbfec4=>{const _0x12e045=_0x164fcd;if(!SceneManager[_0x12e045(0x53f)]())return;if(!Imported[_0x12e045(0x2d3)])return;VisuMZ['ConvertParams'](_0xfbfec4,_0xfbfec4);const _0x557f57=$gameScreen[_0x12e045(0x6e4)]();_0x557f57[_0x12e045(0x20b)]=_0xfbfec4[_0x12e045(0xc45)];}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Camera_FocusPoint',_0x57428d=>{const _0x420eb2=_0x164fcd;if(!SceneManager[_0x420eb2(0x53f)]())return;if(!Imported[_0x420eb2(0x2d3)])return;VisuMZ[_0x420eb2(0x48e)](_0x57428d,_0x57428d);const _0x398b6c=$gameTemp[_0x420eb2(0x1da)](),_0x187733=_0x57428d['WaitForCamera'];$gameScreen['setBattleCameraPoint'](_0x57428d[_0x420eb2(0xb45)],_0x57428d[_0x420eb2(0x6d0)],_0x57428d[_0x420eb2(0x908)],_0x57428d[_0x420eb2(0x3a7)]);if(_0x187733)_0x398b6c[_0x420eb2(0x3a2)](_0x420eb2(0x618));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x4e4),_0x186051=>{const _0x1e9cc3=_0x164fcd;if(!SceneManager[_0x1e9cc3(0x53f)]())return;if(!Imported[_0x1e9cc3(0x2d3)])return;VisuMZ[_0x1e9cc3(0x48e)](_0x186051,_0x186051);const _0x4267d5=$gameTemp[_0x1e9cc3(0x1da)](),_0x2529cb=VisuMZ['CreateActionSequenceTargets'](_0x186051[_0x1e9cc3(0x7cc)]),_0x58f126=_0x186051[_0x1e9cc3(0x743)];$gameScreen[_0x1e9cc3(0x90c)](_0x2529cb,_0x186051[_0x1e9cc3(0x908)],_0x186051[_0x1e9cc3(0x3a7)]);if(_0x58f126)_0x4267d5[_0x1e9cc3(0x3a2)](_0x1e9cc3(0x618));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x924),_0x570c49=>{const _0x324b84=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x324b84(0x2d3)])return;VisuMZ[_0x324b84(0x48e)](_0x570c49,_0x570c49);const _0x324d81=$gameTemp['getLastPluginCommandInterpreter'](),_0x29e335=_0x570c49[_0x324b84(0x743)];$gameScreen[_0x324b84(0x9c6)](_0x570c49[_0x324b84(0x9d3)],_0x570c49[_0x324b84(0x5f1)],_0x570c49[_0x324b84(0x908)],_0x570c49[_0x324b84(0x3a7)]);if(_0x29e335)_0x324d81[_0x324b84(0x3a2)]('battleCamera');}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x47d),_0x545f17=>{const _0x3cba9e=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3cba9e(0x2d3)])return;VisuMZ[_0x3cba9e(0x48e)](_0x545f17,_0x545f17);const _0x2e7685=$gameTemp[_0x3cba9e(0x1da)](),_0x389c34=_0x545f17[_0x3cba9e(0x7f1)],_0x20adfb=_0x545f17[_0x3cba9e(0xbd0)],_0x1f1626=_0x545f17[_0x3cba9e(0x743)];if(_0x389c34){if(_0x3cba9e(0x3e3)===_0x3cba9e(0x3e3)){const _0xae1e2c=Math[_0x3cba9e(0xa13)](Graphics[_0x3cba9e(0xab5)]/0x2),_0x287e17=Math[_0x3cba9e(0xa13)](Graphics[_0x3cba9e(0x5e0)]/0x2);$gameScreen[_0x3cba9e(0x640)](_0xae1e2c,_0x287e17,_0x545f17[_0x3cba9e(0x908)],_0x545f17[_0x3cba9e(0x3a7)]);}else return this['_lastPluginCommandInterpreter'];}_0x20adfb&&$gameScreen[_0x3cba9e(0x9c6)](0x0,0x0,_0x545f17[_0x3cba9e(0x908)],_0x545f17[_0x3cba9e(0x3a7)]);if(_0x1f1626)_0x2e7685['setWaitMode']('battleCamera');}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x2f5),_0x5c7dbb=>{const _0x1cd0a8=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1cd0a8(0x2d3)])return;const _0x209b98=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x209b98)return;_0x209b98['setWaitMode']('battleCamera');}),VisuMZ[_0x164fcd(0xb36)]['CreateCutinSettings']=function(_0x3a95f9){const _0x384752=_0x164fcd;_0x3a95f9['portraitFilename']='';const _0x36f412=VisuMZ['VisualCutinEffect'][_0x384752(0x235)](_0x3a95f9),_0x43cbe3=VisuMZ[_0x384752(0xb62)](_0x3a95f9[_0x384752(0x7cc)])[0x0]||null;if(_0x43cbe3){if(_0x384752(0x81c)===_0x384752(0x81c)){_0x36f412[_0x384752(0x7bb)]=_0x43cbe3[_0x384752(0xca5)](),_0x36f412['portraitIndex']=_0x43cbe3['visualCutinPortraitIndex'](),_0x36f412[_0x384752(0xbb1)]=_0x43cbe3['visualCutinPortraitHue'](),_0x36f412[_0x384752(0x260)]=_0x43cbe3[_0x384752(0x1c5)]();if(_0x43cbe3[_0x384752(0xa79)]()){_0x43cbe3[_0x384752(0x434)]()&&(_0x36f412['portraitFlipHorz']=!_0x36f412[_0x384752(0x5d1)]);_0x43cbe3[_0x384752(0x63e)]()&&(_0x36f412[_0x384752(0xab2)]=!_0x36f412[_0x384752(0xab2)]);if(_0x36f412[_0x384752(0x260)]===_0x384752(0x81e)){if(_0x384752(0xcc1)!==_0x384752(0x44b))_0x36f412[_0x384752(0x5d1)]=!_0x36f412[_0x384752(0x5d1)];else{if(this[_0x384752(0x7f9)]&&this[_0x384752(0x7f9)][_0x384752(0x468)]())return![];if(this['_battler']&&!this[_0x384752(0x7f9)][_0x384752(0x74c)]())return![];return _0x3799da[_0x384752(0x709)]();}}if(_0x3a95f9[_0x384752(0x19b)][_0x384752(0x891)]){if(_0x384752(0x1bf)!=='xPSMF')_0x36f412['parallaxScrollX']*=-0x1;else{if(_0x2ee7b6[_0x384752(0x194)][_0x384752(0xb5c)]<1.19){let _0xaaa1ca='';_0xaaa1ca+=_0x384752(0x56c),_0xaaa1ca+=_0x384752(0x788),_0xaaa1ca+=_0x384752(0x282),_0x551a9f(_0xaaa1ca),_0x3e55fa[_0x384752(0x7f7)]();}}}_0x3a95f9[_0x384752(0x19b)][_0x384752(0x20f)]&&(_0x36f412['parallaxScrollY']*=-0x1),_0x36f412[_0x384752(0x4f9)]+=_0x3a95f9[_0x384752(0x19b)][_0x384752(0x35f)]??0x0;}}else{if(_0x43f137['_battleCoreBattleStartEvent'])return![];return _0x54056b['BattleCore'][_0x384752(0xc7a)][_0x384752(0xa10)](this);}}return _0x36f412;},PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x8a8),_0x58bf7f=>{const _0x939652=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x939652(0x3bd)])return;VisuMZ[_0x939652(0x48e)](_0x58bf7f,_0x58bf7f);const _0x2ace9f=VisuMZ[_0x939652(0xb36)]['CreateCutinSettings'](_0x58bf7f);SceneManager[_0x939652(0x4c8)]['startVisualCutin'](_0x2ace9f);const _0xc2b887=$gameTemp[_0x939652(0x1da)]();_0xc2b887&&_0x58bf7f['WaitForEntrance']&&_0xc2b887[_0x939652(0x3a2)](_0x939652(0x43c));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Cutin_EndVisualCutinEffectAll',_0x324f0b=>{const _0x4e2417=_0x164fcd;if(!SceneManager[_0x4e2417(0x53f)]())return;if(!Imported[_0x4e2417(0x3bd)])return;VisuMZ[_0x4e2417(0x48e)](_0x324f0b,_0x324f0b),SceneManager[_0x4e2417(0x4c8)]['clearAllVisualCutins']();const _0x49dfe2=$gameTemp[_0x4e2417(0x1da)]();_0x49dfe2&&_0x324f0b['WaitForExit']&&_0x49dfe2[_0x4e2417(0x3a2)](_0x4e2417(0x184));}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xa2b),_0x445a5a=>{const _0x12b033=_0x164fcd;if(!SceneManager[_0x12b033(0x53f)]())return;if(!Imported[_0x12b033(0x3bd)])return;VisuMZ[_0x12b033(0x48e)](_0x445a5a,_0x445a5a);const _0x1fb220=_0x445a5a[_0x12b033(0xaa3)]['toLowerCase']()[_0x12b033(0xab7)]();SceneManager[_0x12b033(0x4c8)][_0x12b033(0xaf8)](_0x1fb220);const _0x4dd093=$gameTemp['getLastPluginCommandInterpreter']();_0x4dd093&&_0x445a5a[_0x12b033(0x884)]&&_0x4dd093[_0x12b033(0x3a2)](_0x12b033(0x184));}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],'ActSeq_Cutin_WaitForEntrance',_0x19846c=>{const _0x559748=_0x164fcd;if(!SceneManager[_0x559748(0x53f)]())return;if(!Imported[_0x559748(0x3bd)])return;const _0x565adb=$gameTemp['getLastPluginCommandInterpreter']();_0x565adb['setWaitMode'](_0x559748(0x43c));}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],'ActSeq_Cutin_WaitForExit',_0x1a2690=>{const _0xb37b00=_0x164fcd;if(!SceneManager[_0xb37b00(0x53f)]())return;if(!Imported[_0xb37b00(0x3bd)])return;const _0x6c04be=$gameTemp[_0xb37b00(0x1da)]();_0x6c04be['setWaitMode'](_0xb37b00(0x184));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x5b5),_0xbe2e45=>{const _0x1cfe3b=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1cfe3b(0xb6b)])return;VisuMZ['ConvertParams'](_0xbe2e45,_0xbe2e45);const _0x3a5ef2=VisuMZ[_0x1cfe3b(0xb62)](_0xbe2e45[_0x1cfe3b(0x7cc)]),_0x37ef22=_0xbe2e45['MotionAni'][_0x1cfe3b(0x790)]()[_0x1cfe3b(0xab7)]();for(const _0x46cc54 of _0x3a5ef2){if('wtMMC'===_0x1cfe3b(0x554)){if(!_0x46cc54)continue;_0x46cc54[_0x1cfe3b(0xaf0)](_0x37ef22);}else{const _0x2e8531=_0x37cbbd['$1'],_0x1703b1=_0x1cfe3b(0x960)[_0x1cfe3b(0x272)](_0x2e8531),_0x170f24=_0xc181d1[_0x1cfe3b(0xb36)][_0x1cfe3b(0x169)](_0x20a3dc,_0x3f7613);_0xc4e08a[_0x1cfe3b(0xb36)]['JS'][_0x170f24]=new _0x2a304e(_0x1703b1);}}}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],'ActSeq_DB_DragonbonesTimeScale',_0x43cff4=>{const _0x2d7149=_0x164fcd;if(!SceneManager[_0x2d7149(0x53f)]())return;if(!Imported[_0x2d7149(0xb6b)])return;VisuMZ['ConvertParams'](_0x43cff4,_0x43cff4);const _0x431886=VisuMZ[_0x2d7149(0xb62)](_0x43cff4[_0x2d7149(0x7cc)]),_0xac9036=_0x43cff4[_0x2d7149(0x5a1)];for(const _0x106b1e of _0x431886){if(_0x2d7149(0xc9b)!==_0x2d7149(0x1af)){if(!_0x106b1e)continue;_0x106b1e[_0x2d7149(0x2a7)]()['timeScale']=_0xac9036;}else{if(this[_0x2d7149(0x805)]()!=='')return this[_0x2d7149(0x805)]();else{if(_0x723162[_0x2d7149(0xb7b)]&&this[_0x2d7149(0x526)]()!=='')return this[_0x2d7149(0x526)]();}return'';}}}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x3f2),_0x1a1ca2=>{const _0x2d2dfa=_0x164fcd;if(!SceneManager[_0x2d2dfa(0x53f)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x2d2dfa(0x48e)](_0x1a1ca2,_0x1a1ca2);const _0x21977f=BattleManager['_action'],_0x13a439=_0x1a1ca2[_0x2d2dfa(0xa8b)];if(!_0x21977f)return;_0x21977f[_0x2d2dfa(0x833)]=_0x13a439;}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Element_Clear',_0x4ea640=>{const _0x56dbfb=_0x164fcd;if(!SceneManager[_0x56dbfb(0x53f)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x153843=BattleManager[_0x56dbfb(0xb8e)];if(!_0x153843)return;_0x153843[_0x56dbfb(0x978)]();}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x8b5),_0xfef46d=>{const _0x428edb=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x428edb(0x48e)](_0xfef46d,_0xfef46d);const _0x1b8e16=BattleManager[_0x428edb(0xb8e)],_0x2d093e=_0xfef46d[_0x428edb(0xa8b)];if(!_0x1b8e16)return;_0x1b8e16[_0x428edb(0x60e)]=_0x2d093e;}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x374),_0x583494=>{const _0x18b118=_0x164fcd;if(!SceneManager[_0x18b118(0x53f)]())return;if(!Imported[_0x18b118(0xac1)])return;const _0x58891a=BattleManager[_0x18b118(0xb8e)];if(!_0x58891a)return;_0x58891a[_0x18b118(0x3cd)]=!![];}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0xabf),_0x4f77fb=>{const _0x3c824f=_0x164fcd;if(!Imported[_0x3c824f(0xa1e)])return;if(!SceneManager[_0x3c824f(0x53f)]())return;VisuMZ[_0x3c824f(0x48e)](_0x4f77fb,_0x4f77fb);const _0x5740f7=VisuMZ[_0x3c824f(0xb62)](_0x4f77fb[_0x3c824f(0x7cc)]);for(const _0x34d655 of _0x5740f7){if('JRGXW'===_0x3c824f(0x7df)){if(!_0x34d655)continue;_0x34d655[_0x3c824f(0x489)](_0x3c824f(0x4e8)),_0x34d655[_0x3c824f(0x489)](_0x3c824f(0x92c)),_0x34d655['removeHorrorEffect']('tv'),_0x34d655[_0x3c824f(0x7c6)]();}else{if(!_0x277a8e)return![];return _0x1b32cf['opponentsUnit']()===this['friendsUnit']();}}$gamePlayer['refresh']();}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Horror_GlitchCreate',_0x23f88b=>{const _0x375e13=_0x164fcd;if(!Imported[_0x375e13(0xa1e)])return;if(!SceneManager[_0x375e13(0x53f)]())return;VisuMZ[_0x375e13(0x48e)](_0x23f88b,_0x23f88b);const _0x58492e=VisuMZ[_0x375e13(0xb62)](_0x23f88b['Targets']),_0x33d569='glitch';_0x23f88b[_0x375e13(0x7b9)]=Math[_0x375e13(0x405)](_0x23f88b[_0x375e13(0x1cc)]/0x2),_0x23f88b[_0x375e13(0xa1b)]=_0x23f88b[_0x375e13(0x1cc)],_0x23f88b[_0x375e13(0x27a)]=!![];for(const _0x57868a of _0x58492e){if(!_0x57868a)continue;_0x57868a['setHorrorEffectSettings'](_0x33d569,_0x23f88b);}$gamePlayer['refresh']();}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x574),_0x136352=>{const _0xed3585=_0x164fcd;if(!Imported[_0xed3585(0xa1e)])return;if(!SceneManager[_0xed3585(0x53f)]())return;VisuMZ[_0xed3585(0x48e)](_0x136352,_0x136352);const _0x17ab64=VisuMZ[_0xed3585(0xb62)](_0x136352[_0xed3585(0x7cc)]);for(const _0x2058f2 of _0x17ab64){if(_0xed3585(0x93a)!==_0xed3585(0x898)){if(!_0x2058f2)continue;_0x2058f2[_0xed3585(0x489)](_0xed3585(0x92c));}else return _0x127c94[_0xed3585(0xb36)][_0xed3585(0x93e)][_0xed3585(0xa10)](this);}$gamePlayer[_0xed3585(0x72d)]();}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x86e),_0x3234bd=>{const _0x4b39ec=_0x164fcd;if(!Imported[_0x4b39ec(0xa1e)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4b39ec(0x48e)](_0x3234bd,_0x3234bd);const _0x2a4d9d=VisuMZ['CreateActionSequenceTargets'](_0x3234bd[_0x4b39ec(0x7cc)]),_0xd2240a=_0x4b39ec(0x4e8);for(const _0x4e5c68 of _0x2a4d9d){if(_0x4b39ec(0x244)===_0x4b39ec(0xc88))return this[_0x4b39ec(0x680)][_0x2600e4];else{if(!_0x4e5c68)continue;_0x4e5c68[_0x4b39ec(0x57a)](_0xd2240a,_0x3234bd);}}$gamePlayer[_0x4b39ec(0x72d)]();}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x352),_0x17487a=>{const _0x2c1279=_0x164fcd;if(!Imported[_0x2c1279(0xa1e)])return;if(!SceneManager[_0x2c1279(0x53f)]())return;VisuMZ[_0x2c1279(0x48e)](_0x17487a,_0x17487a);const _0x48f008=VisuMZ[_0x2c1279(0xb62)](_0x17487a[_0x2c1279(0x7cc)]);for(const _0x19c0ac of _0x48f008){if(!_0x19c0ac)continue;_0x19c0ac['removeHorrorEffect']('noise');}$gamePlayer[_0x2c1279(0x72d)]();}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x792),_0x3b7d6e=>{const _0x1613b5=_0x164fcd;if(!Imported[_0x1613b5(0xa1e)])return;if(!SceneManager[_0x1613b5(0x53f)]())return;VisuMZ[_0x1613b5(0x48e)](_0x3b7d6e,_0x3b7d6e);const _0x2a8c5a=VisuMZ[_0x1613b5(0xb62)](_0x3b7d6e[_0x1613b5(0x7cc)]),_0x35b3c2='tv';for(const _0x3a82d8 of _0x2a8c5a){if(!_0x3a82d8)continue;_0x3a82d8[_0x1613b5(0x57a)](_0x35b3c2,_0x3b7d6e);}$gamePlayer[_0x1613b5(0x72d)]();}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x6fa),_0x21e0d7=>{const _0x2a780e=_0x164fcd;if(!Imported[_0x2a780e(0xa1e)])return;if(!SceneManager[_0x2a780e(0x53f)]())return;VisuMZ[_0x2a780e(0x48e)](_0x21e0d7,_0x21e0d7);const _0x1e16ea=VisuMZ['CreateActionSequenceTargets'](_0x21e0d7['Targets']);for(const _0x9a9d78 of _0x1e16ea){if(!_0x9a9d78)continue;_0x9a9d78[_0x2a780e(0x489)]('tv');}$gamePlayer[_0x2a780e(0x72d)]();}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x156),_0x5605d9=>{const _0xdda1ca=_0x164fcd;if(!Imported[_0xdda1ca(0xa01)])return;const _0x26e864=SceneManager[_0xdda1ca(0x4c8)][_0xdda1ca(0xbd6)];if(!_0x26e864)return;if(VisuMZ[_0xdda1ca(0xc87)][_0xdda1ca(0xb5c)]<=1.04){alert(_0xdda1ca(0xcd1)),SceneManager[_0xdda1ca(0x7f7)]();return;}VisuMZ[_0xdda1ca(0x48e)](_0x5605d9,_0x5605d9);const _0x45e14d=_0x5605d9[_0xdda1ca(0x2b8)];_0x26e864['setupBlueRedInvertImpactFilter'](_0x45e14d);}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x8d2),_0x55c1c1=>{const _0x4ff957=_0x164fcd;if(!SceneManager[_0x4ff957(0x53f)]())return;if(!Imported[_0x4ff957(0xa01)])return;const _0x450968=SceneManager[_0x4ff957(0x4c8)]['_spriteset'];if(!_0x450968)return;VisuMZ[_0x4ff957(0x48e)](_0x55c1c1,_0x55c1c1);const _0x2f72a1=_0x55c1c1[_0x4ff957(0x345)]||0x1,_0x166a76=_0x55c1c1['Duration']||0x1,_0x1070f8=_0x55c1c1[_0x4ff957(0x3a7)]||_0x4ff957(0x28c);_0x450968[_0x4ff957(0x11c)](_0x2f72a1,_0x166a76,_0x1070f8);}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Impact_Desaturate',_0x14e9a2=>{const _0x250a4d=_0x164fcd;if(!Imported[_0x250a4d(0xa01)])return;const _0xf997f5=SceneManager[_0x250a4d(0x4c8)][_0x250a4d(0xbd6)];if(!_0xf997f5)return;if(VisuMZ['ActSeqImpact'][_0x250a4d(0xb5c)]<=1.04){alert(_0x250a4d(0xcd1)),SceneManager[_0x250a4d(0x7f7)]();return;}VisuMZ[_0x250a4d(0x48e)](_0x14e9a2,_0x14e9a2);const _0x3c3399=_0x14e9a2[_0x250a4d(0x2b8)];_0xf997f5[_0x250a4d(0x8d1)](_0x3c3399);}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x6a7),_0x298127=>{const _0x6c3bd0=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x6c3bd0(0xa01)])return;const _0x20e13f=SceneManager[_0x6c3bd0(0x4c8)][_0x6c3bd0(0xbd6)];if(!_0x20e13f)return;VisuMZ[_0x6c3bd0(0x48e)](_0x298127,_0x298127);const _0x3678ee=Number(_0x298127[_0x6c3bd0(0x840)])||0x0,_0x3e5ce4=Number(_0x298127[_0x6c3bd0(0x2a0)]),_0x21cb7b=_0x298127['Duration']||0x1,_0x42d02c=_0x298127[_0x6c3bd0(0x3a7)]||_0x6c3bd0(0x28c);_0x20e13f[_0x6c3bd0(0x17c)](_0x3678ee,_0x3e5ce4,_0x21cb7b,_0x42d02c);}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x6e5),_0x1bbe97=>{const _0xb8eeb3=_0x164fcd;if(!SceneManager[_0xb8eeb3(0x53f)]())return;if(!Imported[_0xb8eeb3(0xa01)])return;const _0x36ec08=SceneManager['_scene'][_0xb8eeb3(0xbd6)];if(!_0x36ec08)return;VisuMZ['ConvertParams'](_0x1bbe97,_0x1bbe97);const _0x91423d=Number(_0x1bbe97[_0xb8eeb3(0x840)])||0x0,_0x409c65=Number(_0x1bbe97[_0xb8eeb3(0x2a0)]),_0xae7bac=_0x1bbe97[_0xb8eeb3(0x908)]||0x1,_0x10672d=_0x1bbe97['EasingType']||_0xb8eeb3(0x28c),_0x5da057=VisuMZ[_0xb8eeb3(0xb62)](_0x1bbe97[_0xb8eeb3(0x7cc)]);for(const _0x19a27a of _0x5da057){if(!_0x19a27a)continue;if(!_0x19a27a['battler']())continue;_0x19a27a[_0xb8eeb3(0x921)]()['setupMotionBlurImpactFilter'](_0x91423d,_0x409c65,_0xae7bac,_0x10672d);}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x1a5),_0x31be3b=>{const _0x9df1fd=_0x164fcd;if(!SceneManager[_0x9df1fd(0x53f)]())return;if(!Imported[_0x9df1fd(0xa01)])return;VisuMZ['ConvertParams'](_0x31be3b,_0x31be3b);const _0x302bc6={'delay':_0x31be3b['delay'],'duration':_0x31be3b[_0x9df1fd(0xb9d)],'hue':_0x31be3b[_0x9df1fd(0x19d)],'opacityStart':_0x31be3b[_0x9df1fd(0xaec)],'tone':_0x31be3b['tone'],'visible':!![]},_0x17aa33=VisuMZ[_0x9df1fd(0xb62)](_0x31be3b['Targets']);for(const _0x10cbc1 of _0x17aa33){if(!_0x10cbc1)continue;_0x10cbc1['setBattlerMotionTrailData'](_0x302bc6);}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Impact_MotionTrailRemove',_0x2f5a1a=>{const _0x1c4695=_0x164fcd;if(!SceneManager[_0x1c4695(0x53f)]())return;if(!Imported[_0x1c4695(0xa01)])return;VisuMZ[_0x1c4695(0x48e)](_0x2f5a1a,_0x2f5a1a);const _0x3345e6=VisuMZ[_0x1c4695(0xb62)](_0x2f5a1a[_0x1c4695(0x7cc)]);for(const _0x5f3c0a of _0x3345e6){if(!_0x5f3c0a)continue;_0x5f3c0a[_0x1c4695(0x8e4)]();}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x154),_0x5eaa89=>{const _0x52c6f5=_0x164fcd;if(!Imported[_0x52c6f5(0xa01)])return;const _0x1ebc2e=SceneManager[_0x52c6f5(0x4c8)][_0x52c6f5(0xbd6)];if(!_0x1ebc2e)return;if(VisuMZ[_0x52c6f5(0xc87)][_0x52c6f5(0xb5c)]<=1.04){if(_0x52c6f5(0x3ad)===_0x52c6f5(0x3ad)){alert(_0x52c6f5(0xcd1)),SceneManager[_0x52c6f5(0x7f7)]();return;}else this[_0x52c6f5(0x35c)]['bitmap']['smooth']!==this['_battler'][_0x52c6f5(0xcdf)]()&&(this[_0x52c6f5(0x35c)][_0x52c6f5(0xcf5)][_0x52c6f5(0x225)]=this['_battler'][_0x52c6f5(0xcdf)]());}VisuMZ[_0x52c6f5(0x48e)](_0x5eaa89,_0x5eaa89);const _0x4620c1=_0x5eaa89[_0x52c6f5(0x2b8)];_0x1ebc2e[_0x52c6f5(0x6d7)](_0x4620c1);}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],'ActSeq_Impact_Oversaturate',_0x17de9e=>{const _0x5696f8=_0x164fcd;if(!Imported[_0x5696f8(0xa01)])return;const _0x2cd4d6=SceneManager[_0x5696f8(0x4c8)]['_spriteset'];if(!_0x2cd4d6)return;if(VisuMZ[_0x5696f8(0xc87)][_0x5696f8(0xb5c)]<=1.04){alert(_0x5696f8(0xcd1)),SceneManager[_0x5696f8(0x7f7)]();return;}VisuMZ[_0x5696f8(0x48e)](_0x17de9e,_0x17de9e);const _0x2e5f98=_0x17de9e['Enable'];_0x2cd4d6[_0x5696f8(0x312)](_0x2e5f98);}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x25f),_0x110df9=>{const _0x1abe97=_0x164fcd;if(!Imported[_0x1abe97(0xa01)])return;const _0x470565=SceneManager['_scene']['_spriteset'];if(!_0x470565)return;VisuMZ['ConvertParams'](_0x110df9,_0x110df9);const _0xca3457=_0x110df9['X']||0x0,_0x175ca9=_0x110df9['Y']||0x0,_0xaa287d=_0x110df9[_0x1abe97(0x685)]||0x0,_0x401dfc=_0x110df9[_0x1abe97(0x55b)]||0x0,_0x33d22e=_0x110df9['Duration']||0x1;_0x470565[_0x1abe97(0x378)](_0xca3457,_0x175ca9,_0xaa287d,_0x401dfc,_0x33d22e);}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x677),_0x335baf=>{const _0x327864=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x327864(0xa01)])return;const _0xd9a44b=SceneManager['_scene'][_0x327864(0xbd6)];if(!_0xd9a44b)return;VisuMZ[_0x327864(0x48e)](_0x335baf,_0x335baf);const _0x22b549=VisuMZ['CreateActionSequenceTargets'](_0x335baf[_0x327864(0x7cc)]),_0x4e7a9e=_0x335baf[_0x327864(0x4ce)],_0x3e7cf=_0x335baf['OffsetX']||0x0,_0x4fe73e=_0x335baf[_0x327864(0x5f1)]||0x0,_0x40cb97=_0x335baf[_0x327864(0x685)]||0x0,_0x34863d=_0x335baf[_0x327864(0x55b)]||0x0,_0x1ff4d2=_0x335baf[_0x327864(0x908)]||0x1;for(const _0x3c3784 of _0x22b549){if(!_0x3c3784)continue;if(!_0x3c3784['battler']())continue;const _0x4cad64=_0x3c3784[_0x327864(0x921)]();let _0x26728d=_0x4cad64[_0x327864(0x6ab)],_0x45edb1=_0x4cad64[_0x327864(0x3db)];_0x26728d+=(Graphics[_0x327864(0xab5)]-Graphics[_0x327864(0x273)])/0x2,_0x45edb1+=(Graphics[_0x327864(0x5e0)]-Graphics[_0x327864(0xa5c)])/0x2;if(_0x4e7a9e['match'](/front/i))'axpDQ'===_0x327864(0xb41)?_0x243d0a=_0x27ad03>=_0x5f2004?_0x4cdee8:_0x474ac7:_0x26728d+=(_0x3c3784['isEnemy']()?0x1:-0x1)*_0x4cad64[_0x327864(0x9db)]()/0x2;else{if(_0x4e7a9e[_0x327864(0xa5d)](/back/i)){if('Yiezo'===_0x327864(0x623))_0x26728d+=(_0x3c3784['isEnemy']()?-0x1:0x1)*_0x4cad64[_0x327864(0x9db)]()/0x2;else{if(!this[_0x327864(0x2c4)]())return;if(!this[_0x327864(0x265)])this[_0x327864(0x370)]();this[_0x327864(0xa39)](),this['updateBorderSprite']();}}}if(_0x4e7a9e[_0x327864(0xa5d)](/head/i))_0x327864(0x8ab)!=='xviHe'?this[_0x327864(0x84e)]():_0x45edb1-=_0x4cad64[_0x327864(0xb35)]();else{if(_0x4e7a9e[_0x327864(0xa5d)](/center/i)){if(_0x327864(0x846)===_0x327864(0x845)){_0x56c23f(_0x327864(0xcd1)),_0x342e86['exit']();return;}else _0x45edb1-=_0x4cad64[_0x327864(0xb35)]()/0x2;}}_0x26728d+=_0x3e7cf,_0x45edb1+=_0x4fe73e,_0xd9a44b['setupShockwaveImpactFilter'](_0x26728d,_0x45edb1,_0x40cb97,_0x34863d,_0x1ff4d2);}}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],'ActSeq_Impact_ShockwaveCenterTargets',_0x52224d=>{const _0x372983=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x372983(0xa01)])return;const _0x16c2d3=SceneManager['_scene']['_spriteset'];if(!_0x16c2d3)return;VisuMZ[_0x372983(0x48e)](_0x52224d,_0x52224d);const _0x1adfa9=VisuMZ[_0x372983(0xb62)](_0x52224d[_0x372983(0x7cc)]),_0xfcfff2=_0x52224d['TargetLocation'],_0x3be0c0=_0x52224d[_0x372983(0x9d3)]||0x0,_0x19b60e=_0x52224d[_0x372983(0x5f1)]||0x0,_0x5e4fc2=_0x52224d[_0x372983(0x685)]||0x0,_0x4a4044=_0x52224d[_0x372983(0x55b)]||0x0,_0x683521=_0x52224d['Duration']||0x1,_0x4f3e08=Math['min'](..._0x1adfa9[_0x372983(0xa98)](_0x347a72=>_0x347a72[_0x372983(0x921)]()[_0x372983(0x6ab)]-_0x347a72[_0x372983(0x921)]()[_0x372983(0x9db)]()/0x2)),_0x3f95f6=Math['max'](..._0x1adfa9[_0x372983(0xa98)](_0x5724cf=>_0x5724cf[_0x372983(0x921)]()[_0x372983(0x6ab)]+_0x5724cf[_0x372983(0x921)]()[_0x372983(0x9db)]()/0x2)),_0x43dae4=Math['min'](..._0x1adfa9[_0x372983(0xa98)](_0x55e012=>_0x55e012['battler']()['_baseY']-_0x55e012[_0x372983(0x921)]()['mainSpriteHeight']())),_0x23dc7c=Math[_0x372983(0xc92)](..._0x1adfa9[_0x372983(0xa98)](_0x4fe0bc=>_0x4fe0bc[_0x372983(0x921)]()[_0x372983(0x3db)])),_0x13b537=_0x1adfa9[_0x372983(0x69f)](_0x2e9365=>_0x2e9365[_0x372983(0x31f)]())['length'],_0x37b0e7=_0x1adfa9[_0x372983(0x69f)](_0x281cb3=>_0x281cb3['isEnemy']())['length'];let _0x3b03d3=0x0,_0x5d3fd0=0x0;if(_0xfcfff2[_0x372983(0xa5d)](/front/i))_0x3b03d3=_0x13b537>=_0x37b0e7?_0x4f3e08:_0x3f95f6;else{if(_0xfcfff2['match'](/middle/i)){if(_0x372983(0x29d)===_0x372983(0xbbc))return _0x17dd9e['BattleCore'][_0x372983(0x1de)]['BattleLayout']['SkillItemStandardCols'];else _0x3b03d3=(_0x4f3e08+_0x3f95f6)/0x2,melee=-0x1;}else{if(_0xfcfff2[_0x372983(0xa5d)](/back/i)){if(_0x372983(0x391)!=='iEdzz')_0x3b03d3=_0x13b537>=_0x37b0e7?_0x3f95f6:_0x4f3e08;else{if(!_0x11a9b7[_0x372983(0x53f)]())return;_0x4e2dae[_0x372983(0x48e)](_0x3ed1ae,_0x2f6a0b);const _0x472180=_0x3627ec[_0x372983(0x1da)](),_0x98d456=_0xe5d5ee['_action'],_0x43d50d=_0x4149a0[_0x372983(0x5a7)],_0x2e3741=_0x667684[_0x372983(0x5b3)]?_0x4bd2a3[_0x372983(0x5b3)][_0x372983(0x725)](0x0):[],_0x28b71f=_0x2d7935['_logWindow'];if(!_0x472180||!_0x98d456||!_0x43d50d)return;if(!_0x98d456[_0x372983(0x5e9)]())return;if(_0x469d03[_0x372983(0x342)])_0x28b71f['displayAction'](_0x43d50d,_0x98d456['item']());_0xaa72c8[_0x372983(0x869)]&&_0x28b71f[_0x372983(0x56b)](_0x372983(0x1e9),_0x43d50d,_0x2e3741,!![]);if(_0x483ea1['ActionStart'])_0x28b71f[_0x372983(0x56b)](_0x372983(0x998),_0x43d50d,_0x98d456);if(_0x5d0c70[_0x372983(0x21f)])_0x28b71f[_0x372983(0x56b)](_0x372983(0x41f));if(_0x357c0f[_0x372983(0x8e0)])_0x28b71f[_0x372983(0x56b)](_0x372983(0x1c2),_0x43d50d,_0x98d456);if(_0x1201fa[_0x372983(0x32a)])_0x28b71f[_0x372983(0x56b)]('waitForAnimation');_0x472180[_0x372983(0x3a2)](_0x372983(0x563));}}}}if(_0xfcfff2[_0x372983(0xa5d)](/head/i))_0x5d3fd0=_0x43dae4;else{if(_0xfcfff2[_0x372983(0xa5d)](/center/i))_0x5d3fd0=(_0x43dae4+_0x23dc7c)/0x2;else _0xfcfff2['match'](/base/i)&&(_0x5d3fd0=_0x23dc7c);}_0x3b03d3+=(Graphics[_0x372983(0xab5)]-Graphics['boxWidth'])/0x2,_0x5d3fd0+=(Graphics[_0x372983(0x5e0)]-Graphics['boxHeight'])/0x2,_0x3b03d3+=_0x3be0c0,_0x5d3fd0+=_0x19b60e,_0x16c2d3[_0x372983(0x378)](_0x3b03d3,_0x5d3fd0,_0x5e4fc2,_0x4a4044,_0x683521);}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x418),_0x1b7cea=>{const _0x4ef0a7=_0x164fcd;if(!Imported[_0x4ef0a7(0xa01)])return;const _0x33626a=SceneManager[_0x4ef0a7(0x4c8)][_0x4ef0a7(0xbd6)];if(!_0x33626a)return;if(VisuMZ[_0x4ef0a7(0xc87)][_0x4ef0a7(0xb5c)]<=1.04){alert(_0x4ef0a7(0xcd1)),SceneManager[_0x4ef0a7(0x7f7)]();return;}VisuMZ['ConvertParams'](_0x1b7cea,_0x1b7cea);const _0x5f3236=$gameTemp[_0x4ef0a7(0x1da)](),_0x1efbe4=Math[_0x4ef0a7(0xc92)](0.01,_0x1b7cea[_0x4ef0a7(0xceb)]);$gameTemp[_0x4ef0a7(0xc1c)](_0x1efbe4,_0x5f3236);}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0xcd3),_0xb4af6c=>{const _0x219e13=_0x164fcd;if(!Imported[_0x219e13(0xa01)])return;const _0x32c48a=SceneManager[_0x219e13(0x4c8)]['_spriteset'];if(!_0x32c48a)return;if(VisuMZ[_0x219e13(0xc87)][_0x219e13(0xb5c)]<=1.04){alert(_0x219e13(0xcd1)),SceneManager['exit']();return;}VisuMZ[_0x219e13(0x48e)](_0xb4af6c,_0xb4af6c);const _0x28b7c3=$gameTemp[_0x219e13(0x1da)](),_0x5db8b9=_0xb4af6c['ms']||0x1;VisuMZ[_0x219e13(0xc87)][_0x219e13(0x2f8)](_0x5db8b9,_0x28b7c3);}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x13f),_0x53b7ea=>{const _0x585270=_0x164fcd;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x5bd6d9=SceneManager[_0x585270(0x4c8)][_0x585270(0xbd6)];if(!_0x5bd6d9)return;VisuMZ['ConvertParams'](_0x53b7ea,_0x53b7ea);const _0x4a1c47=_0x53b7ea['X']||0x0,_0x2c7270=_0x53b7ea['Y']||0x0,_0x12128d=_0x53b7ea[_0x585270(0x319)]||0x0,_0x55815b=_0x53b7ea[_0x585270(0x942)]||0x0,_0x4d2bba=_0x53b7ea[_0x585270(0x908)]||0x1,_0x3be375=_0x53b7ea['EasingType']||_0x585270(0x28c);_0x5bd6d9[_0x585270(0x284)](_0x12128d,_0x4a1c47,_0x2c7270,_0x55815b,_0x4d2bba,_0x3be375);}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x2d4),_0x5a6711=>{const _0x4763bb=_0x164fcd;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x31b91d=SceneManager[_0x4763bb(0x4c8)][_0x4763bb(0xbd6)];if(!_0x31b91d)return;VisuMZ[_0x4763bb(0x48e)](_0x5a6711,_0x5a6711);const _0x3f4f67=VisuMZ[_0x4763bb(0xb62)](_0x5a6711[_0x4763bb(0x7cc)]),_0x45466a=_0x5a6711[_0x4763bb(0x4ce)],_0x5491ef=_0x5a6711[_0x4763bb(0x9d3)]||0x0,_0x1baaaf=_0x5a6711['OffsetY']||0x0,_0x539026=_0x5a6711[_0x4763bb(0x319)]||0x0,_0x4377cf=_0x5a6711[_0x4763bb(0x942)]||0x0,_0x2122e4=_0x5a6711[_0x4763bb(0x908)]||0x1,_0xcd16d1=_0x5a6711[_0x4763bb(0x3a7)]||'Linear',_0x3a54e1=Math[_0x4763bb(0x584)](..._0x3f4f67[_0x4763bb(0xa98)](_0x3c73d3=>_0x3c73d3['battler']()[_0x4763bb(0x6ab)]-_0x3c73d3[_0x4763bb(0x921)]()[_0x4763bb(0x9db)]()/0x2)),_0x475c8a=Math[_0x4763bb(0xc92)](..._0x3f4f67[_0x4763bb(0xa98)](_0x31ae2a=>_0x31ae2a[_0x4763bb(0x921)]()[_0x4763bb(0x6ab)]+_0x31ae2a[_0x4763bb(0x921)]()['mainSpriteWidth']()/0x2)),_0x4d0344=Math[_0x4763bb(0x584)](..._0x3f4f67[_0x4763bb(0xa98)](_0x42b65f=>_0x42b65f['battler']()[_0x4763bb(0x3db)]-_0x42b65f[_0x4763bb(0x921)]()[_0x4763bb(0xb35)]())),_0x467c47=Math[_0x4763bb(0xc92)](..._0x3f4f67[_0x4763bb(0xa98)](_0x194d4f=>_0x194d4f[_0x4763bb(0x921)]()[_0x4763bb(0x3db)])),_0x391e88=_0x3f4f67[_0x4763bb(0x69f)](_0x20e8d9=>_0x20e8d9['isActor']())['length'],_0xfcc326=_0x3f4f67[_0x4763bb(0x69f)](_0x4a5a4e=>_0x4a5a4e['isEnemy']())[_0x4763bb(0xd04)];let _0xddb34a=0x0,_0x14d748=0x0;if(_0x45466a[_0x4763bb(0xa5d)](/front/i))_0xddb34a=_0x391e88>=_0xfcc326?_0x3a54e1:_0x475c8a;else{if(_0x45466a[_0x4763bb(0xa5d)](/middle/i)){if('LvXKr'===_0x4763bb(0x5fb))_0xddb34a=(_0x3a54e1+_0x475c8a)/0x2,melee=-0x1;else{let _0x355657=0x0;this['_baseLineStack'][_0x4763bb(0xd04)]>0x0&&(_0x355657=this[_0x4763bb(0x153)][this[_0x4763bb(0x153)][_0x4763bb(0xd04)]-0x1]),this['_lines'][_0x4763bb(0xd04)]>_0x355657?this[_0x4763bb(0xa9d)]():this[_0x4763bb(0x227)]();}}else _0x45466a[_0x4763bb(0xa5d)](/back/i)&&(_0xddb34a=_0x391e88>=_0xfcc326?_0x475c8a:_0x3a54e1);}if(_0x45466a[_0x4763bb(0xa5d)](/head/i)){if(_0x4763bb(0x45b)!==_0x4763bb(0x45b))return _0x2740ec(_0x233302['$1'])/0x64;else _0x14d748=_0x4d0344;}else{if(_0x45466a[_0x4763bb(0xa5d)](/center/i)){if(_0x4763bb(0x539)===_0x4763bb(0x4a4)){if(!this[_0x4763bb(0x6ee)])return;if(!_0x3282b2)return;if(!_0x53dc02)return;const _0x356e65=this['itemRect'](_0x11d5fe[_0x4763bb(0xca1)]());_0x356e65['x']+=_0x356e65[_0x4763bb(0xab5)]/0x2+this[_0x4763bb(0xc5b)],_0x4687fa['x']=_0x356e65['x'],_0x512a5f['y']=_0x356e65['y'],this[_0x4763bb(0x6ee)]['addChild'](_0x4e6831);}else _0x14d748=(_0x4d0344+_0x467c47)/0x2;}else{if(_0x45466a['match'](/base/i)){if(_0x4763bb(0x38a)!==_0x4763bb(0xccd))_0x14d748=_0x467c47;else{this['push']('performJump',[_0x2ce274],_0x9577c,_0x5d41ac);const _0x5d5108=_0x4844f7['length']>0x1?_0x4763bb(0x757):_0x4763bb(0x541);this[_0x4763bb(0x56b)](_0x4763bb(0x2ae),_0x1f18c7,_0x32a97c,_0x5d5108,_0x332f74,!![],'Linear',!![]),this[_0x4763bb(0x56b)](_0x4763bb(0x8f0),[_0x135a7d],_0x4763bb(0x8cd)),this['push']('waitForMovement');}}}}_0xddb34a+=(Graphics[_0x4763bb(0xab5)]-Graphics[_0x4763bb(0x273)])/0x2,_0x14d748+=(Graphics[_0x4763bb(0x5e0)]-Graphics['boxHeight'])/0x2,_0xddb34a+=_0x5491ef,_0x14d748+=_0x1baaaf,_0x31b91d['setupZoomBlurImpactFilter'](_0x539026,_0xddb34a,_0x14d748,_0x4377cf,_0x2122e4,_0xcd16d1);}),PluginManager['registerCommand'](pluginData['name'],_0x164fcd(0xa32),_0x3020f5=>{const _0x191f44=_0x164fcd;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1dbaf2=SceneManager['_scene'][_0x191f44(0xbd6)];if(!_0x1dbaf2)return;if(VisuMZ['ActSeqImpact'][_0x191f44(0xb5c)]<=1.05){alert(_0x191f44(0xcd1)),SceneManager['exit']();return;}VisuMZ[_0x191f44(0x48e)](_0x3020f5,_0x3020f5);const _0x238d99=VisuMZ[_0x191f44(0xb62)](_0x3020f5[_0x191f44(0x7cc)]),_0x4e1a48={'filename':_0x3020f5[_0x191f44(0x69a)],'horzCells':_0x3020f5['horzCells']||0x1,'vertCells':_0x3020f5[_0x191f44(0xae2)]||0x1,'frameDelay':_0x3020f5['frameDelay']||0x1,'smooth':_0x3020f5['smooth']||![],'anchorX':_0x3020f5[_0x191f44(0xa62)]||0x0,'anchorY':_0x3020f5[_0x191f44(0xb43)]||0x0,'offsetX':_0x3020f5[_0x191f44(0x703)]||0x0,'offsetY':_0x3020f5[_0x191f44(0x72b)]||0x0};for(const _0x273ea9 of _0x238d99){if(!_0x273ea9)continue;if(!_0x273ea9['battler']())continue;_0x273ea9['battler']()[_0x191f44(0x8dd)](_0x4e1a48);}const _0x361f51=$gameTemp[_0x191f44(0x1da)]();_0x361f51&&_0x361f51[_0x191f44(0x3a2)]('battleInjectPrep');}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xb0a),_0x602188=>{const _0x2ae6fe=_0x164fcd;if(!Imported[_0x2ae6fe(0xa01)])return;const _0x223b88=SceneManager[_0x2ae6fe(0x4c8)][_0x2ae6fe(0xbd6)];if(!_0x223b88)return;if(VisuMZ[_0x2ae6fe(0xc87)]['version']<=1.05){alert(_0x2ae6fe(0xcd1)),SceneManager[_0x2ae6fe(0x7f7)]();return;}VisuMZ[_0x2ae6fe(0x48e)](_0x602188,_0x602188);const _0x540600=VisuMZ['CreateActionSequenceTargets'](_0x602188['Targets']);for(const _0x41d71d of _0x540600){if(_0x2ae6fe(0x997)===_0x2ae6fe(0xc71))_0x8d3b34[_0x2ae6fe(0xb36)][_0x2ae6fe(0x8e1)]['call'](this,_0x2c84aa,_0x53f60f),this[_0x2ae6fe(0x227)]();else{if(!_0x41d71d)continue;if(!_0x41d71d['battler']())continue;_0x41d71d[_0x2ae6fe(0x921)]()[_0x2ae6fe(0x930)]();}}}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x1c9),_0x5aa243=>{const _0x32976e=_0x164fcd;if(!Imported[_0x32976e(0xa01)])return;const _0x43dba5=SceneManager[_0x32976e(0x4c8)]['_spriteset'];if(!_0x43dba5)return;if(VisuMZ['ActSeqImpact'][_0x32976e(0xb5c)]<=1.05){alert(_0x32976e(0xcd1)),SceneManager[_0x32976e(0x7f7)]();return;}VisuMZ['ConvertParams'](_0x5aa243,_0x5aa243);const _0x3a52b8=VisuMZ['CreateActionSequenceTargets'](_0x5aa243['Targets']),_0x3e4346=_0x5aa243['pause'];for(const _0x3f45b1 of _0x3a52b8){if(_0x32976e(0x331)!==_0x32976e(0x331))_0x3b438c[_0x32976e(0x2a1)](_0x844996[_0x32976e(0x912)],0x0);else{if(!_0x3f45b1)continue;if(!_0x3f45b1[_0x32976e(0x921)]())continue;_0x3f45b1['battler']()[_0x32976e(0xcab)](_0x3e4346);}}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x7e2),_0x176e72=>{const _0x3cf4ef=_0x164fcd;if(!SceneManager[_0x3cf4ef(0x53f)]())return;const _0x654b22=$gameTemp[_0x3cf4ef(0x1da)]();if(!_0x654b22)return;_0x654b22[_0x3cf4ef(0x3a2)](_0x3cf4ef(0x3f4));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x26a),_0x1acaeb=>{const _0x82e3c6=_0x164fcd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x82e3c6(0x48e)](_0x1acaeb,_0x1acaeb);const _0x4a1a8d=$gameTemp[_0x82e3c6(0x1da)](),_0x547e52=BattleManager[_0x82e3c6(0xb8e)],_0x2089a4=BattleManager[_0x82e3c6(0x5a7)],_0x30c503=BattleManager[_0x82e3c6(0x566)];if(!_0x4a1a8d||!_0x547e52||!_0x2089a4)return;if(!_0x547e52[_0x82e3c6(0x5e9)]())return;const _0x1b0182=VisuMZ['CreateActionSequenceTargets'](_0x1acaeb[_0x82e3c6(0x7cc)]);for(const _0xedaa8 of _0x1b0182){if(!_0xedaa8)continue;_0x30c503[_0x82e3c6(0x56b)]('actionEffect',_0x2089a4,_0xedaa8);}_0x4a1a8d[_0x82e3c6(0x3a2)](_0x82e3c6(0x563));}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xa6b),_0x52a8e4=>{const _0x4987d8=_0x164fcd;if(!SceneManager[_0x4987d8(0x53f)]())return;if(!Imported[_0x4987d8(0x409)])return;$gameTemp[_0x4987d8(0x2b0)]=!![];}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x722),_0x3cd26c=>{const _0x3180e9=_0x164fcd;if(!SceneManager[_0x3180e9(0x53f)]())return;VisuMZ[_0x3180e9(0x48e)](_0x3cd26c,_0x3cd26c);const _0x30623e=[_0x3180e9(0xbf1),_0x3180e9(0x27e),_0x3180e9(0x472),'DEF','MAT',_0x3180e9(0x7fa),_0x3180e9(0x8c9),_0x3180e9(0xa43)],_0x1f4da7=_0x3cd26c['Buffs'],_0x118704=_0x3cd26c[_0x3180e9(0x31a)],_0x3e2026=_0x3cd26c[_0x3180e9(0xcce)],_0x38e61c=VisuMZ['CreateActionSequenceTargets'](_0x3cd26c[_0x3180e9(0x7cc)]);for(const _0x380bcd of _0x38e61c){if(!_0x380bcd)continue;for(const _0x1f1fa0 of _0x1f4da7){if(_0x3180e9(0x258)!==_0x3180e9(0x2de)){const _0x5d216d=_0x30623e[_0x3180e9(0x990)](_0x1f1fa0[_0x3180e9(0x7e1)]()[_0x3180e9(0xab7)]());_0x5d216d>=0x0&&_0x5d216d<=0x7&&_0x380bcd[_0x3180e9(0x5ef)](_0x5d216d,_0x3e2026);}else _0x136565=_0x2bc1a3>=_0x346862?_0x4dff97:_0x348217;}for(const _0x5190ee of _0x118704){const _0x534abe=_0x30623e[_0x3180e9(0x990)](_0x5190ee[_0x3180e9(0x7e1)]()[_0x3180e9(0xab7)]());_0x534abe>=0x0&&_0x534abe<=0x7&&_0x380bcd['addDebuff'](_0x534abe,_0x3e2026);}}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Mechanics_AddState',_0x4b59ae=>{const _0x291588=_0x164fcd;if(!SceneManager[_0x291588(0x53f)]())return;VisuMZ[_0x291588(0x48e)](_0x4b59ae,_0x4b59ae);const _0x275c8d=_0x4b59ae['States'],_0x44cf69=VisuMZ['CreateActionSequenceTargets'](_0x4b59ae[_0x291588(0x7cc)]);for(const _0xb77051 of _0x44cf69){if(!_0xb77051)continue;for(const _0x586072 of _0x275c8d){_0xb77051['addState'](_0x586072);}}}),PluginManager['registerCommand'](pluginData['name'],_0x164fcd(0x2e9),_0x50bcbf=>{const _0x50a737=_0x164fcd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x50a737(0x48e)](_0x50bcbf,_0x50bcbf);const _0x37df45=BattleManager[_0x50a737(0xb8e)],_0x1d9601={'arPenRate':_0x50bcbf[_0x50a737(0x854)],'arPenFlat':_0x50bcbf[_0x50a737(0x47e)],'arRedRate':_0x50bcbf[_0x50a737(0xce7)],'arRedFlat':_0x50bcbf[_0x50a737(0x3b2)]};_0x37df45[_0x50a737(0xc53)]=_0x1d9601;}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x976),_0x37be2f=>{const _0x55ac75=_0x164fcd;if(!SceneManager[_0x55ac75(0x53f)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ[_0x55ac75(0x48e)](_0x37be2f,_0x37be2f);const _0x5d2457=VisuMZ['CreateActionSequenceTargets'](_0x37be2f[_0x55ac75(0x7cc)]),_0x35ade0=_0x37be2f[_0x55ac75(0xc3a)]||0x1;for(const _0x5d47de of _0x5d2457){if('yDCbj'!==_0x55ac75(0x13d))this[_0x55ac75(0x493)](_0x55ac75(0x7a7));else{if(!_0x5d47de)continue;if(!_0x5d47de[_0x55ac75(0xa79)]())continue;_0x5d47de['revealNewWeaknesses'](_0x35ade0);}}}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],'ActSeq_Mechanics_AtbGauge',_0x300c52=>{const _0x4f3f2d=_0x164fcd;if(!SceneManager[_0x4f3f2d(0x53f)]())return;if(!Imported[_0x4f3f2d(0x5e2)])return;if(!BattleManager[_0x4f3f2d(0x50b)]())return;VisuMZ[_0x4f3f2d(0x48e)](_0x300c52,_0x300c52);const _0x2b75f9=VisuMZ[_0x4f3f2d(0xb62)](_0x300c52['Targets']),_0x57019c=_0x300c52[_0x4f3f2d(0x983)],_0xbbc97c=_0x300c52[_0x4f3f2d(0x983)],_0x1461bc=_0x300c52['Interrupt'];for(const _0x274ebf of _0x2b75f9){if(!_0x274ebf)continue;if(_0x274ebf[_0x4f3f2d(0x320)]())_0x274ebf[_0x4f3f2d(0x78c)](_0x57019c);else{if(_0x274ebf[_0x4f3f2d(0x928)]()){if(_0x4f3f2d(0x783)===_0x4f3f2d(0x783)){_0x274ebf[_0x4f3f2d(0x1b7)](_0xbbc97c);if(_0x1461bc)_0x274ebf[_0x4f3f2d(0xa19)]();}else _0x3e1102[_0x4f3f2d(0xcd9)]([_0x22ac1a]);}}}}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x65e),_0x4bce10=>{const _0x4fc285=_0x164fcd;if(!SceneManager[_0x4fc285(0x53f)]())return;if(!Imported[_0x4fc285(0xd19)])return;VisuMZ[_0x4fc285(0x48e)](_0x4bce10,_0x4bce10);const _0x424068=VisuMZ[_0x4fc285(0xb62)](_0x4bce10[_0x4fc285(0x7cc)]),_0x3b47b7=_0x4bce10[_0x4fc285(0x17f)];for(const _0x21b379 of _0x424068){if(!_0x21b379)continue;_0x21b379['gainStoredBoostPoints'](_0x3b47b7);}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x78b),_0x44d38f=>{const _0x4f4726=_0x164fcd;if(!SceneManager[_0x4f4726(0x53f)]())return;if(!Imported[_0x4f4726(0xd19)])return;if(!BattleManager[_0x4f4726(0x5a7)])return;VisuMZ[_0x4f4726(0x48e)](_0x44d38f,_0x44d38f);const _0x2598fe=_0x44d38f['VariableID'];$gameVariables['setValue'](_0x2598fe,BattleManager['_subject'][_0x4f4726(0x55e)]());}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x389),_0x142e2a=>{const _0x1c6f46=_0x164fcd;if(!SceneManager[_0x1c6f46(0x53f)]())return;if(!Imported[_0x1c6f46(0x11a)])return;VisuMZ['ConvertParams'](_0x142e2a,_0x142e2a);const _0x52b674=VisuMZ[_0x1c6f46(0xb62)](_0x142e2a[_0x1c6f46(0x7cc)]),_0x974acc=_0x142e2a[_0x1c6f46(0x750)];for(const _0x3334a5 of _0x52b674){if(!_0x3334a5)continue;if(_0x3334a5['isBreakStunned']())continue;if(!_0x3334a5[_0x1c6f46(0x74e)]())continue;_0x3334a5[_0x1c6f46(0xc14)](_0x974acc);}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xa70),_0x5505e4=>{const _0xd04651=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xd04651(0x11a)])return;VisuMZ[_0xd04651(0x48e)](_0x5505e4,_0x5505e4);const _0x1cdd53=VisuMZ['CreateActionSequenceTargets'](_0x5505e4[_0xd04651(0x7cc)]);for(const _0x1b764 of _0x1cdd53){if(!_0x1b764)continue;if(_0x1b764[_0xd04651(0xd14)]())continue;if(!_0x1b764[_0xd04651(0x74e)]())continue;_0x1b764[_0xd04651(0x1a8)]();}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xa91),_0x712248=>{const _0x2a2ce=_0x164fcd;if(!SceneManager[_0x2a2ce(0x53f)]())return;if(!Imported[_0x2a2ce(0x994)])return;if(!BattleManager[_0x2a2ce(0x483)]())return;VisuMZ['ConvertParams'](_0x712248,_0x712248);const _0x21a837=VisuMZ['CreateActionSequenceTargets'](_0x712248['Targets']),_0x228165=_0x712248[_0x2a2ce(0x6ad)];for(const _0x211728 of _0x21a837){if(!_0x211728)continue;_0x211728[_0x2a2ce(0x7d3)](_0x228165);}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Mechanics_Collapse',_0x3a459a=>{const _0xfde140=_0x164fcd;if(!SceneManager[_0xfde140(0x53f)]())return;VisuMZ[_0xfde140(0x48e)](_0x3a459a,_0x3a459a);const _0x564723=$gameTemp[_0xfde140(0x1da)](),_0x251346=BattleManager['_action'],_0xa2221c=BattleManager['_subject'];if(!_0x564723||!_0x251346||!_0xa2221c)return;if(!_0x251346[_0xfde140(0x5e9)]())return;const _0x3e292d=VisuMZ[_0xfde140(0xb62)](_0x3a459a[_0xfde140(0x7cc)]);for(const _0x38a889 of _0x3e292d){if(!_0x38a889)continue;if(_0x3a459a['ForceDeath']){if(_0xfde140(0x356)===_0xfde140(0x356))_0x38a889[_0xfde140(0x212)](),_0x38a889[_0xfde140(0x11d)](_0x38a889[_0xfde140(0x8eb)]());else{this[_0xfde140(0x265)][_0xfde140(0xcf5)]=_0x6f405a['_emptyBitmap'],this[_0xfde140(0x265)]['lastFilename']='';return;}}_0x38a889[_0xfde140(0xc6c)]()&&_0x38a889[_0xfde140(0x6c6)]();}_0x564723[_0xfde140(0x3a2)](_0xfde140(0x5b0));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x8fe),_0x5ceae0=>{const _0x3439f8=_0x164fcd;if(!SceneManager[_0x3439f8(0x53f)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x3439f8(0xc96)]())return;VisuMZ[_0x3439f8(0x48e)](_0x5ceae0,_0x5ceae0);const _0x56283b=VisuMZ[_0x3439f8(0xb62)](_0x5ceae0['Targets']),_0x1e4884=_0x5ceae0['ChangeOrderBy'];for(const _0x4e576d of _0x56283b){if(!_0x4e576d)continue;_0x4e576d[_0x3439f8(0x988)](_0x1e4884);}}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x286),_0x1c2f94=>{const _0x94dabc=_0x164fcd;if(!SceneManager[_0x94dabc(0x53f)]())return;if(!Imported[_0x94dabc(0xb9e)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x94dabc(0x48e)](_0x1c2f94,_0x1c2f94);const _0x2d2584=VisuMZ[_0x94dabc(0xb62)](_0x1c2f94['Targets']),_0x12f1c6=_0x1c2f94[_0x94dabc(0x983)],_0x5667ad=_0x1c2f94[_0x94dabc(0x983)];for(const _0x2f5d62 of _0x2d2584){if(!_0x2f5d62)continue;if(_0x2f5d62[_0x94dabc(0x4a8)]===_0x94dabc(0x99f))_0x2f5d62[_0x94dabc(0xb34)](_0x12f1c6);else _0x2f5d62['_tpbState']===_0x94dabc(0x53c)&&_0x2f5d62[_0x94dabc(0x471)](_0x5667ad);}}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x1a6),_0x8b926=>{const _0x2f7d6b=_0x164fcd;if(!SceneManager[_0x2f7d6b(0x53f)]())return;VisuMZ[_0x2f7d6b(0x48e)](_0x8b926,_0x8b926);const _0x1225d8=BattleManager[_0x2f7d6b(0xb8e)];if(!_0x1225d8)return;let _0x4a13de=_0x8b926['Formula'];_0x1225d8['setCustomDamageFormula'](_0x4a13de);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_DamagePopup',_0x26bfa4=>{const _0x5870c3=_0x164fcd;if(!SceneManager[_0x5870c3(0x53f)]())return;VisuMZ['ConvertParams'](_0x26bfa4,_0x26bfa4);const _0x6d9bb7=VisuMZ['CreateActionSequenceTargets'](_0x26bfa4[_0x5870c3(0x7cc)]);for(const _0x102cab of _0x6d9bb7){if('HTUKx'===_0x5870c3(0x649))return'iconText';else{if(!_0x102cab)continue;if(_0x102cab[_0x5870c3(0x8be)]())_0x102cab[_0x5870c3(0x7b1)]();}}}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x548),_0x42cfef=>{const _0x1a1f95=_0x164fcd;if(!SceneManager[_0x1a1f95(0x53f)]())return;VisuMZ[_0x1a1f95(0x48e)](_0x42cfef,_0x42cfef);const _0x362105=$gameTemp[_0x1a1f95(0x1da)](),_0x4b1eb1=BattleManager[_0x1a1f95(0x5a7)],_0x44631c=_0x42cfef['JumpToLabel'];if(!_0x362105)return;if(!_0x4b1eb1)return;_0x4b1eb1&&_0x4b1eb1[_0x1a1f95(0x468)]()&&_0x44631c[_0x1a1f95(0x7e1)]()[_0x1a1f95(0xab7)]()!==_0x1a1f95(0x28a)&&_0x362105['command119']([_0x44631c]);}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x385),_0x15d5e3=>{const _0x38102c=_0x164fcd;if(!SceneManager[_0x38102c(0x53f)]())return;VisuMZ['ConvertParams'](_0x15d5e3,_0x15d5e3);const _0x4b2471=VisuMZ['CreateActionSequenceTargets'](_0x15d5e3['Targets']);for(const _0x147d77 of _0x4b2471){if(!_0x147d77)continue;if(!_0x147d77['isEnemy']())continue;_0x147d77[_0x38102c(0xaee)]();}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x196),_0x5c99cc=>{const _0x1c0d9d=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1c0d9d(0x717)])return;if(!BattleManager[_0x1c0d9d(0xbfe)]())return;VisuMZ[_0x1c0d9d(0x48e)](_0x5c99cc,_0x5c99cc);const _0x29b5ec=_0x5c99cc[_0x1c0d9d(0xad6)];BattleManager['_subject']&&(_0x1c0d9d(0x7c5)!==_0x1c0d9d(0x52f)?BattleManager[_0x1c0d9d(0x5a7)]['friendsUnit']()[_0x1c0d9d(0x6c1)](_0x29b5ec):!_0x35cd68['BattleCore'][_0x1c0d9d(0x1de)][_0x1c0d9d(0xa08)][_0x1c0d9d(0x637)]?this[_0x1c0d9d(0x56b)](_0x1c0d9d(0x91e),_0x115fb1):_0x30a345[_0x1c0d9d(0xb36)][_0x1c0d9d(0x288)][_0x1c0d9d(0xa10)](this,_0x33bf34));}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x17a),_0x14d4f9=>{const _0x27c1b7=_0x164fcd;if(!SceneManager[_0x27c1b7(0x53f)]())return;if(!Imported[_0x27c1b7(0x2c3)])return;if(!BattleManager[_0x27c1b7(0xa6d)]())return;VisuMZ[_0x27c1b7(0x48e)](_0x14d4f9,_0x14d4f9);const _0x24a1f0=_0x14d4f9[_0x27c1b7(0xad6)];if(BattleManager[_0x27c1b7(0x5a7)]){if(_0x27c1b7(0x61a)!=='mSEbR')return this[_0x27c1b7(0x86f)]()?(_0x493542=this[_0x27c1b7(0x6c9)](),this[_0x27c1b7(0x262)](_0x42dc9f)):(this['_targetIndex']=-0x1,_0x5265a2[_0x27c1b7(0x56b)](...this[_0x27c1b7(0x67c)]()),this[_0x27c1b7(0x262)](_0x1c8582));else BattleManager[_0x27c1b7(0x5a7)][_0x27c1b7(0xbe6)]()[_0x27c1b7(0x571)](_0x24a1f0);}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x9a0),_0x320baf=>{const _0x4d4843=_0x164fcd;if(!SceneManager[_0x4d4843(0x53f)]())return;VisuMZ['ConvertParams'](_0x320baf,_0x320baf);const _0x5af8fa=VisuMZ[_0x4d4843(0xb62)](_0x320baf['Targets']),_0x293800=_0x320baf['HP_Rate'],_0x880030=_0x320baf[_0x4d4843(0x15a)],_0x13f53a=_0x320baf['MP_Rate'],_0x2c06b5=_0x320baf[_0x4d4843(0x1e7)],_0x20434d=_0x320baf['TP_Rate'],_0x2e830c=_0x320baf['TP_Flat'],_0x3feaf1=_0x320baf[_0x4d4843(0x615)];for(const _0x1ad69f of _0x5af8fa){if(!_0x1ad69f)continue;const _0x59250d=_0x1ad69f['isAlive'](),_0x6e00b0=Math['round'](_0x293800*_0x1ad69f[_0x4d4843(0x296)]+_0x880030),_0x4919a0=Math[_0x4d4843(0xa13)](_0x13f53a*_0x1ad69f['mmp']+_0x2c06b5),_0x4a283d=Math[_0x4d4843(0xa13)](_0x20434d*_0x1ad69f['maxTp']()+_0x2e830c);if(_0x6e00b0!==0x0)_0x1ad69f[_0x4d4843(0x638)](_0x6e00b0);if(_0x4919a0!==0x0)_0x1ad69f[_0x4d4843(0x614)](_0x4919a0);if(_0x4a283d!==0x0)_0x1ad69f['gainTp'](_0x4a283d);if(_0x3feaf1)_0x1ad69f[_0x4d4843(0x7b1)]();_0x59250d&&_0x1ad69f[_0x4d4843(0x468)]()&&_0x1ad69f[_0x4d4843(0x6c6)]();}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x8c8),_0x39f036=>{const _0xbac36=_0x164fcd;if(!SceneManager[_0xbac36(0x53f)]())return;VisuMZ[_0xbac36(0x48e)](_0x39f036,_0x39f036);const _0x2120d9=VisuMZ[_0xbac36(0xb62)](_0x39f036[_0xbac36(0x7cc)]);for(const _0x3f1d3c of _0x2120d9){if(!_0x3f1d3c)continue;_0x3f1d3c[_0xbac36(0x6f3)](_0x39f036[_0xbac36(0x16f)]);}}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],'ActSeq_Mechanics_Multipliers',_0x2aa282=>{const _0x479197=_0x164fcd;if(!SceneManager[_0x479197(0x53f)]())return;VisuMZ['ConvertParams'](_0x2aa282,_0x2aa282);const _0x594c6f=BattleManager[_0x479197(0xb8e)],_0x14ce73={'criticalHitRate':_0x2aa282['CriticalHitRate'],'criticalHitFlat':_0x2aa282[_0x479197(0x5cd)],'criticalDmgRate':_0x2aa282[_0x479197(0x6af)],'criticalDmgFlat':_0x2aa282[_0x479197(0xbdd)],'damageRate':_0x2aa282['DamageRate'],'damageFlat':_0x2aa282['DamageFlat'],'hitRate':_0x2aa282['HitRate'],'hitFlat':_0x2aa282[_0x479197(0x4c0)]};_0x594c6f['_multipliers']=_0x14ce73;}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xb11),_0x26a840=>{const _0x477eb8=_0x164fcd;if(!SceneManager[_0x477eb8(0x53f)]())return;VisuMZ['ConvertParams'](_0x26a840,_0x26a840);const _0x3fb74a=_0x26a840[_0x477eb8(0x287)];SceneManager[_0x477eb8(0x4c8)][_0x477eb8(0x2d7)](_0x3fb74a);}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Mechanics_OtbOrder',_0x336cb0=>{const _0x1f8c1f=_0x164fcd;if(!SceneManager[_0x1f8c1f(0x53f)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager[_0x1f8c1f(0xd11)]())return;VisuMZ['ConvertParams'](_0x336cb0,_0x336cb0);const _0x422bad=VisuMZ['CreateActionSequenceTargets'](_0x336cb0[_0x1f8c1f(0x7cc)]);for(const _0x3b4b3f of _0x422bad){if(_0x1f8c1f(0x592)==='TjNmP'){if(!_0x3b4b3f)continue;let _0x42abfc=_0x336cb0[_0x1f8c1f(0x9a6)],_0x102b83=_0x336cb0[_0x1f8c1f(0x4fb)],_0x4587c0=_0x336cb0[_0x1f8c1f(0x2e5)];BattleManager[_0x1f8c1f(0x43f)]['includes'](_0x3b4b3f)?_0x42abfc+=_0x4587c0:_0x102b83+=_0x4587c0,BattleManager['turnOrderChangeOTB'](_0x3b4b3f,-_0x42abfc,![]),BattleManager[_0x1f8c1f(0x7ca)](_0x3b4b3f,-_0x102b83,!![]);}else{if(this[_0x1f8c1f(0x25c)]()&&!this[_0x1f8c1f(0x5c5)]()){const _0x2a74e7=this[_0x1f8c1f(0x5e9)]()['scope'];return _0x2a74e7[_0x1f8c1f(0xa5d)](/(?:ENEMY|FOE)/i)&&_0x2a74e7[_0x1f8c1f(0xa5d)](/OR/i)&&_0x2a74e7[_0x1f8c1f(0xa5d)](/(?:ALLY|FRIEND)/i);}else return![];}}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x771),_0x395306=>{const _0x140f3c=_0x164fcd;if(!SceneManager[_0x140f3c(0x53f)]())return;if(!Imported[_0x140f3c(0xac5)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x140f3c(0x48e)](_0x395306,_0x395306);const _0x2e3268=BattleManager[_0x140f3c(0x5a7)][_0x140f3c(0xbe6)](),_0x484c43=_0x395306[_0x140f3c(0x8fb)],_0x5952e2=_0x395306[_0x140f3c(0xb95)]||_0x140f3c(0x760),_0x10acde=_0x395306['alterType']||_0x140f3c(0x760),_0x10b3a9=_0x395306[_0x140f3c(0xbc4)]||0x0,_0x4ed642=_0x395306['alterPriority']||0x0;if(_0x2e3268[_0x140f3c(0x8e8)]()||_0x484c43){if(_0x140f3c(0x910)===_0x140f3c(0x910))_0x484c43&&(_0x2e3268[_0x140f3c(0x504)]=_0x2e3268[_0x140f3c(0x504)]||{},_0x2e3268[_0x140f3c(0x504)][_0x140f3c(0x7ce)]=0x0),_0x2e3268[_0x140f3c(0xb6e)](_0x5952e2,_0x10acde,_0x10b3a9,_0x4ed642);else{const _0x1c8f24=_0x33f192(_0x1a79eb['$1'])['toUpperCase']()['trim']();if(_0x1c8f24==='MANUAL')return _0x140f3c(0x7ad);if(_0x3dc1bb[_0x140f3c(0x4b8)][_0x1c8f24])return _0x1c8f24;}}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xc25),_0x35036a=>{const _0x50f171=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x50f171(0xac5)])return;if(!BattleManager[_0x50f171(0x567)]())return;VisuMZ[_0x50f171(0x48e)](_0x35036a,_0x35036a);const _0x1ffc4f=BattleManager['_subject'][_0x50f171(0xbe6)]();let _0x593b53=Math['max'](_0x35036a[_0x50f171(0x5c7)],0x0),_0x29abc5=_0x1ffc4f['getFullActionsPTB'](),_0x9a699d=_0x1ffc4f[_0x50f171(0x832)]();while(_0x593b53--){if(_0x50f171(0xace)!==_0x50f171(0xaab)){if(_0x29abc5<=0x0&&_0x9a699d<=0x0){if(_0x50f171(0x6ed)===_0x50f171(0x6ed))break;else this['subject']()[_0x50f171(0xbb6)]()&&_0x2256e6['BattleCore']['Game_Action_setGuard']['call'](this);}else _0x29abc5>0x0?_0x50f171(0x350)!==_0x50f171(0x297)?(_0x29abc5--,_0x9a699d++):_0x685dd5=_0xd7295f[_0x50f171(0x731)]:_0x9a699d--;}else _0xe53675[_0x50f171(0x471)](_0x4b324a);}_0x1ffc4f[_0x50f171(0x445)](_0x29abc5),_0x1ffc4f['setHalfActionsPTB'](_0x9a699d);}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Mechanics_PtbFullHalfAction',_0x4b0761=>{const _0x436602=_0x164fcd;if(!SceneManager[_0x436602(0x53f)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x436602(0x567)]())return;VisuMZ['ConvertParams'](_0x4b0761,_0x4b0761);const _0x57b129=BattleManager[_0x436602(0x5a7)][_0x436602(0xbe6)]();let _0x9e9d8=_0x4b0761[_0x436602(0x34d)],_0x581dd1=_0x4b0761['HalfActions'];_0x57b129['gainFullActionsPTB'](_0x9e9d8),_0x57b129[_0x436602(0x7af)](_0x581dd1);}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],'ActSeq_Mechanics_RemoveBuffDebuff',_0x51f7d6=>{const _0x3b9e68=_0x164fcd;if(!SceneManager[_0x3b9e68(0x53f)]())return;VisuMZ['ConvertParams'](_0x51f7d6,_0x51f7d6);const _0x5be0bc=['MAXHP','MAXMP',_0x3b9e68(0x472),_0x3b9e68(0x9e9),_0x3b9e68(0xcb4),_0x3b9e68(0x7fa),_0x3b9e68(0x8c9),_0x3b9e68(0xa43)],_0x334a18=_0x51f7d6[_0x3b9e68(0x7cd)],_0x5769da=_0x51f7d6[_0x3b9e68(0x31a)],_0x5db650=VisuMZ[_0x3b9e68(0xb62)](_0x51f7d6['Targets']);for(const _0x528553 of _0x5db650){if(!_0x528553)continue;for(const _0x4fbae4 of _0x334a18){const _0x369f59=_0x5be0bc[_0x3b9e68(0x990)](_0x4fbae4[_0x3b9e68(0x7e1)]()[_0x3b9e68(0xab7)]());if(_0x369f59>=0x0&&_0x369f59<=0x7&&_0x528553[_0x3b9e68(0x303)](_0x369f59)){if('lrcuh'!==_0x3b9e68(0x621)){if(!_0x1bed0e[_0x3b9e68(0x53f)]())return;_0xce59f5['ConvertParams'](_0x50a959,_0x528a8e);const _0x5511f4=_0x508dc4['getLastPluginCommandInterpreter'](),_0x71af4a=_0x39f09b['_subject'],_0x1cb763=_0x3d46ff[_0x3b9e68(0x650)];if(!_0x5511f4)return;if(!_0x71af4a)return;_0x71af4a&&_0x71af4a['isDead']()&&_0x1cb763[_0x3b9e68(0x7e1)]()['trim']()!==_0x3b9e68(0x28a)&&_0x5511f4[_0x3b9e68(0xcd9)]([_0x1cb763]);}else _0x528553['removeBuff'](_0x369f59);}}for(const _0x15485f of _0x5769da){if(_0x3b9e68(0xce4)!==_0x3b9e68(0x73d)){const _0x2ed732=_0x5be0bc[_0x3b9e68(0x990)](_0x15485f[_0x3b9e68(0x7e1)]()['trim']());_0x2ed732>=0x0&&_0x2ed732<=0x7&&_0x528553['isDebuffAffected'](_0x2ed732)&&_0x528553['removeBuff'](_0x2ed732);}else{const _0x4f2ff7=this[_0x3b9e68(0x8f1)](_0x4c6f94);return _0x4f2ff7===_0x3b9e68(0x206)?this['statusTextAutoBattleStyle']():_0x232d94['BattleCore'][_0x3b9e68(0x6bd)][_0x3b9e68(0xa10)](this,_0x5efa7b);}}}}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xc6d),_0x12a264=>{const _0x20b90a=_0x164fcd;if(!SceneManager[_0x20b90a(0x53f)]())return;VisuMZ[_0x20b90a(0x48e)](_0x12a264,_0x12a264);const _0x5f4c7c=_0x12a264[_0x20b90a(0x452)],_0x4af4c4=VisuMZ[_0x20b90a(0xb62)](_0x12a264[_0x20b90a(0x7cc)]);for(const _0x58e03c of _0x4af4c4){if(!_0x58e03c)continue;for(const _0x3dec6f of _0x5f4c7c){if(_0x20b90a(0x5d8)===_0x20b90a(0x1fe)){let _0x14d270=_0x3b93c0(_0x42b617['$1']);while(_0x14d270--){_0x4d8a80[_0x20b90a(0x56b)](this[_0x20b90a(0xbe6)]()[_0x20b90a(0x148)]());}return this['repeatTargets'](_0x9718cb);}else _0x58e03c[_0x20b90a(0x8d6)](_0x3dec6f);}}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xd06),_0x1ffb45=>{const _0x26f8fc=_0x164fcd;if(!SceneManager[_0x26f8fc(0x53f)]())return;if(!Imported[_0x26f8fc(0x1f3)])return;if(!BattleManager['isSTB']())return;VisuMZ['ConvertParams'](_0x1ffb45,_0x1ffb45);const _0x3361c7=_0x1ffb45[_0x26f8fc(0x22e)],_0x54c917=VisuMZ[_0x26f8fc(0xb62)](_0x1ffb45['Targets']),_0x1818b1=_0x1ffb45[_0x26f8fc(0xcea)],_0x39a352=_0x1ffb45[_0x26f8fc(0x469)],_0x4150bc=_0x1ffb45[_0x26f8fc(0xbaf)],_0x1b6495=BattleManager[_0x26f8fc(0xb8e)];if(_0x3361c7)for(const _0x58adb8 of _0x54c917){if('HkHVS'===_0x26f8fc(0x61d))_0x491db4=_0x26f8fc(0x29e);else{if(!_0x58adb8)continue;if(_0x58adb8===user)continue;if(_0x1818b1)_0x58adb8[_0x26f8fc(0xae0)](![]);_0x58adb8[_0x26f8fc(0x349)](BattleManager[_0x26f8fc(0x5a7)],_0x1b6495);}}if(_0x39a352&&BattleManager[_0x26f8fc(0x5a7)]){if('cmykJ'!==_0x26f8fc(0x634)){const _0x4fce57=_0x4e56a2[_0x26f8fc(0x46c)](this[_0x26f8fc(0x5e9)]()),_0x478b62=_0x5bcf91[_0x26f8fc(0x4b8)][_0x4fce57];try{return _0x478b62[_0x26f8fc(0x5b1)]['call'](this,_0x18e8a1);}catch(_0x412349){if(_0xd08e25[_0x26f8fc(0x44a)]())_0x173b7e['log'](_0x412349);return _0x3fafc1[_0x26f8fc(0xb36)][_0x26f8fc(0xa54)][_0x26f8fc(0xa10)](this);}}else{if(_0x4150bc)BattleManager[_0x26f8fc(0x5a7)][_0x26f8fc(0xae0)](![]);const _0x9bb396=_0x54c917[0x0];BattleManager['performSTBExploiter'](_0x9bb396,_0x1b6495);}}}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xbaa),_0x36d3bd=>{const _0x2b2286=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2b2286(0x1f3)])return;if(!BattleManager[_0x2b2286(0x6ff)]())return;VisuMZ[_0x2b2286(0x48e)](_0x36d3bd,_0x36d3bd);const _0x5030d0=_0x36d3bd['Actions'];BattleManager['_subject']&&BattleManager['_subject'][_0x2b2286(0x4ad)](_0x5030d0);}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xa00),_0x5a6b00=>{const _0x1dc031=_0x164fcd;if(!SceneManager[_0x1dc031(0x53f)]())return;if(!Imported[_0x1dc031(0x1f3)])return;if(!BattleManager[_0x1dc031(0x6ff)]())return;VisuMZ['ConvertParams'](_0x5a6b00,_0x5a6b00);let _0x39ad84=_0x5a6b00[_0x1dc031(0x2a9)];if(BattleManager[_0x1dc031(0x5a7)]){if(_0x1dc031(0x131)!==_0x1dc031(0x131)){if(_0x5f31e3[_0x1dc031(0x9ca)]()){if(this[_0x1dc031(0x46d)]&&this['_enemies'][_0x1dc031(0x893)](this[_0x1dc031(0x46d)])){const _0x391082=this[_0x1dc031(0x466)]['indexOf'](this[_0x1dc031(0x46d)]);return this[_0x1dc031(0xa7e)](_0x391082);}else return this[_0x1dc031(0x3f9)]();}}else{BattleManager[_0x1dc031(0x5a7)][_0x1dc031(0xa9a)]=BattleManager[_0x1dc031(0x5a7)][_0x1dc031(0xa9a)]||[];while(_0x39ad84--){if(BattleManager[_0x1dc031(0x5a7)]['_actions'][_0x1dc031(0xd04)]<=0x0)break;BattleManager[_0x1dc031(0x5a7)][_0x1dc031(0xa9a)]['shift']();}}}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Mechanics_SwapWeapon',_0xd63c1a=>{const _0x47876d=_0x164fcd;if(!SceneManager[_0x47876d(0x53f)]())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ[_0x47876d(0x48e)](_0xd63c1a,_0xd63c1a);const _0x1eb3a9=VisuMZ[_0x47876d(0xb62)](_0xd63c1a[_0x47876d(0x7cc)]),_0x7147f=_0xd63c1a[_0x47876d(0x54b)];for(const _0x1f2e7b of _0x1eb3a9){if(!_0x1f2e7b)continue;if(!_0x1f2e7b[_0x47876d(0x31f)]())continue;_0x1f2e7b[_0x47876d(0xd05)](_0x7147f);}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x9d6),_0x2b50a4=>{const _0x154430=_0x164fcd;if(!SceneManager[_0x154430(0x53f)]())return;VisuMZ[_0x154430(0x48e)](_0x2b50a4,_0x2b50a4);const _0x4fa7ce=VisuMZ[_0x154430(0xb62)](_0x2b50a4['Targets']),_0x494faa=_0x2b50a4[_0x154430(0xc16)],_0x20cc8={'textColor':ColorManager[_0x154430(0xaf2)](_0x2b50a4[_0x154430(0xd0c)]),'flashColor':_0x2b50a4[_0x154430(0x620)],'flashDuration':_0x2b50a4[_0x154430(0xa90)]};for(const _0x3f6380 of _0x4fa7ce){if(!_0x3f6380)continue;_0x3f6380[_0x154430(0x7ab)](_0x494faa,_0x20cc8);}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x553),_0x1154fe=>{const _0x4ea872=_0x164fcd;if(!SceneManager[_0x4ea872(0x53f)]())return;VisuMZ[_0x4ea872(0x48e)](_0x1154fe,_0x1154fe);const _0x5bcf6e=VisuMZ['CreateActionSequenceTargets'](_0x1154fe['Targets']);let _0x548553=$gameVariables['value'](_0x1154fe[_0x4ea872(0xae3)]);Imported[_0x4ea872(0x818)]&&_0x1154fe[_0x4ea872(0x6c5)]&&(_0x548553=VisuMZ['GroupDigits'](_0x548553));const _0xb2c2a1=String(_0x548553),_0x191e66={'textColor':ColorManager['getColor'](_0x1154fe[_0x4ea872(0xd0c)]),'flashColor':_0x1154fe['FlashColor'],'flashDuration':_0x1154fe[_0x4ea872(0xa90)]};for(const _0x2d8634 of _0x5bcf6e){if(_0x4ea872(0xad4)!=='DPKGZ')_0x334aca[_0x4ea872(0x933)](_0x4bd092[_0x3ca4dd]);else{if(!_0x2d8634)continue;_0x2d8634[_0x4ea872(0x7ab)](_0xb2c2a1,_0x191e66);}}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xcb9),_0x57a195=>{const _0x366808=_0x164fcd;if(!SceneManager[_0x366808(0x53f)]())return;const _0x5d0235=$gameTemp[_0x366808(0x1da)]();if(!_0x5d0235)return;_0x5d0235[_0x366808(0x3a2)](_0x366808(0x5b0));}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xc50),_0x55b771=>{const _0x3b9d4b=_0x164fcd;if(!SceneManager[_0x3b9d4b(0x53f)]())return;VisuMZ[_0x3b9d4b(0x48e)](_0x55b771,_0x55b771);const _0x3693b7=VisuMZ[_0x3b9d4b(0xb62)](_0x55b771['Targets']);for(const _0x54a249 of _0x3693b7){if(!_0x54a249)continue;_0x54a249[_0x3b9d4b(0xbef)]();}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xb47),_0x5b9f63=>{const _0x43702b=_0x164fcd;if(!SceneManager[_0x43702b(0x53f)]())return;VisuMZ[_0x43702b(0x48e)](_0x5b9f63,_0x5b9f63);const _0x17231c=VisuMZ[_0x43702b(0xb62)](_0x5b9f63[_0x43702b(0x7cc)]),_0x2623e8=_0x5b9f63[_0x43702b(0x53a)][_0x43702b(0x790)]()[_0x43702b(0xab7)]();let _0x151e19=_0x5b9f63[_0x43702b(0xbe2)];const _0x31cbad=_0x5b9f63[_0x43702b(0x79d)];![_0x43702b(0xb4e),_0x43702b(0xbc1),'swing',_0x43702b(0x39d)][_0x43702b(0x893)](_0x2623e8)&&(_0x151e19=![]);for(const _0x310b04 of _0x17231c){if(!_0x310b04)continue;_0x310b04['freezeMotion'](_0x2623e8,_0x151e19,_0x31cbad);}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xa76),_0x220f89=>{const _0x3b5817=_0x164fcd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3b5817(0x48e)](_0x220f89,_0x220f89);const _0x11e75c=VisuMZ['CreateActionSequenceTargets'](_0x220f89['Targets']),_0x2e1b7a=_0x220f89[_0x3b5817(0x53a)][_0x3b5817(0x790)]()[_0x3b5817(0xab7)](),_0x4150ca=_0x220f89[_0x3b5817(0xbe2)];for(const _0x3ab926 of _0x11e75c){if(!_0x3ab926)continue;if(_0x2e1b7a[_0x3b5817(0xa5d)](/ATTACK[ ](\d+)/i))_0x3ab926[_0x3b5817(0x7ba)](Number(RegExp['$1']));else _0x2e1b7a==='attack'?_0x3ab926[_0x3b5817(0x2c0)]():_0x3ab926['requestMotion'](_0x2e1b7a);if(!_0x4150ca)_0x3ab926['startWeaponAnimation'](0x0);else{if(_0x4150ca&&[_0x3b5817(0xbc1),_0x3b5817(0x706),_0x3b5817(0x8f9)][_0x3b5817(0x893)](_0x2e1b7a)){}}}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Motion_PerformAction',_0x3e7af6=>{const _0x4e1f99=_0x164fcd;if(!SceneManager[_0x4e1f99(0x53f)]())return;VisuMZ[_0x4e1f99(0x48e)](_0x3e7af6,_0x3e7af6);const _0x414489=BattleManager[_0x4e1f99(0xb8e)];if(!_0x414489)return;if(!_0x414489[_0x4e1f99(0x5e9)]())return;const _0xabdaf3=VisuMZ[_0x4e1f99(0xb62)](_0x3e7af6[_0x4e1f99(0x7cc)]);for(const _0x207f8e of _0xabdaf3){if(!_0x207f8e)continue;_0x207f8e[_0x4e1f99(0x78f)](_0x414489);}}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xbd2),_0x19ecdb=>{const _0x10c307=_0x164fcd;if(!SceneManager[_0x10c307(0x53f)]())return;VisuMZ['ConvertParams'](_0x19ecdb,_0x19ecdb);const _0xcdcd3a=VisuMZ['CreateActionSequenceTargets'](_0x19ecdb['Targets']);for(const _0x2f3d1c of _0xcdcd3a){if(!_0x2f3d1c)continue;if(!_0x2f3d1c['battler']())continue;_0x2f3d1c[_0x10c307(0x921)]()['refreshMotion']();}}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x9e5),_0x2a73e3=>{const _0x1a4971=_0x164fcd;if(!SceneManager[_0x1a4971(0x53f)]())return;VisuMZ[_0x1a4971(0x48e)](_0x2a73e3,_0x2a73e3);const _0x5c9539=$gameTemp[_0x1a4971(0x1da)](),_0x223ced=_0x2a73e3[_0x1a4971(0x23b)]*Sprite_Battler['_motionSpeed'];_0x5c9539[_0x1a4971(0xa9d)](_0x223ced);}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xb9c),_0x1c555d=>{const _0x1dc5c0=_0x164fcd;if(!SceneManager[_0x1dc5c0(0x53f)]())return;VisuMZ[_0x1dc5c0(0x48e)](_0x1c555d,_0x1c555d);const _0x2bb05d=$gameTemp['getLastPluginCommandInterpreter'](),_0x34f75b=BattleManager[_0x1dc5c0(0xb8e)];if(!_0x2bb05d||!_0x34f75b)return;if(!_0x34f75b[_0x1dc5c0(0x5e9)]())return;const _0x50e3cc=VisuMZ[_0x1dc5c0(0xb62)](_0x1c555d['Targets']);for(const _0x5003e7 of _0x50e3cc){if(!_0x5003e7)continue;_0x5003e7[_0x1dc5c0(0x998)](_0x34f75b);}if(_0x1c555d['WaitForMovement'])_0x2bb05d['setWaitMode'](_0x1dc5c0(0xb8d));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x920),_0xc140e7=>{const _0x4d7000=_0x164fcd;if(!SceneManager[_0x4d7000(0x53f)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x4d7000(0x48e)](_0xc140e7,_0xc140e7);const _0x3c1bfb=$gameTemp[_0x4d7000(0x1da)](),_0x13ad2a=VisuMZ[_0x4d7000(0xb62)](_0xc140e7[_0x4d7000(0x7cc)]),_0x5b5142=_0xc140e7[_0x4d7000(0x797)],_0x6b63e7=_0xc140e7['DistanceX'],_0x252787=_0xc140e7[_0x4d7000(0x6df)],_0x3998c1=_0xc140e7[_0x4d7000(0x908)],_0x2fe491=_0xc140e7['FaceDirection'],_0x50cc94=_0xc140e7[_0x4d7000(0x3a7)],_0x1c7478=_0xc140e7['MotionType'],_0x3d480f=_0xc140e7[_0x4d7000(0x21f)];if(!_0x3c1bfb)return;for(const _0x2ea313 of _0x13ad2a){if(!_0x2ea313)continue;let _0x49546c=_0x6b63e7,_0x26e82a=_0x252787;if(_0x5b5142[_0x4d7000(0xa5d)](/horz/i))_0x49546c*=_0x2ea313[_0x4d7000(0x31f)]()?-0x1:0x1;if(_0x5b5142[_0x4d7000(0xa5d)](/vert/i))_0x26e82a*=_0x2ea313[_0x4d7000(0x31f)]()?-0x1:0x1;_0x2ea313['moveBattlerHomeDistance'](_0x49546c,_0x26e82a,_0x3998c1,_0x2fe491,_0x50cc94),_0x2ea313['requestMotion'](_0x1c7478);}if(_0x3d480f)_0x3c1bfb[_0x4d7000(0x3a2)](_0x4d7000(0xb8d));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xd1d),_0x17e1fd=>{const _0x292d81=_0x164fcd;if(!SceneManager[_0x292d81(0x53f)]())return;if(!$gameSystem[_0x292d81(0x709)]())return;VisuMZ[_0x292d81(0x48e)](_0x17e1fd,_0x17e1fd);const _0x359f2e=$gameTemp[_0x292d81(0x1da)](),_0x209b25=VisuMZ[_0x292d81(0xb62)](_0x17e1fd[_0x292d81(0x7cc)]),_0x3a4c6a=_0x17e1fd['Destination'],_0x4b4591=_0x17e1fd[_0x292d81(0x125)],_0x48e439=_0x17e1fd[_0x292d81(0x9d3)],_0x254a43=_0x17e1fd[_0x292d81(0x5f1)],_0x697923=_0x17e1fd[_0x292d81(0x908)],_0x434da=_0x17e1fd[_0x292d81(0x30d)],_0x1e64ba=_0x17e1fd['EasingType'],_0x5ae1aa=_0x17e1fd[_0x292d81(0x53a)],_0x52a722=_0x17e1fd[_0x292d81(0x21f)];if(!_0x359f2e)return;for(const _0x1f12d6 of _0x209b25){if(_0x292d81(0x690)!=='fllSl'){const _0x37e20f=_0x4d685e[_0x292d81(0xa94)](this['troop']()['id']);if(_0x37e20f[_0x292d81(0xa5d)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x45c144=_0x45e918['$1'][_0x292d81(0x77e)](',')['map'](_0xe84951=>_0xf56aab(_0xe84951));this[_0x292d81(0xa40)](),this['processExtendTroopMembers'](_0x45c144);}}else{if(!_0x1f12d6)continue;let _0x5f378c=_0x1f12d6['battler']()['_baseX'],_0x1b31a8=_0x1f12d6['battler']()[_0x292d81(0x3db)];if(_0x3a4c6a['match'](/home/i)){if(_0x292d81(0x9d4)!==_0x292d81(0xbc2))_0x5f378c=_0x1f12d6['battler']()[_0x292d81(0xa35)],_0x1b31a8=_0x1f12d6['battler']()['_homeY'];else{_0x4eda5a&&_0x4eebba&&_0x557d69[_0x292d81(0x9ea)]&&this[_0x292d81(0xbf2)](_0x19e7bf[_0x292d81(0x9ea)]);const _0x511179=_0x4dbe1c[_0x1a3d4c];if(_0x511179){let _0x14ab00=_0x2594d1[_0x292d81(0xa94)](_0x511179['id']);this[_0x292d81(0xbf2)](_0x14ab00);}}}else{if(_0x3a4c6a[_0x292d81(0xa5d)](/center/i))_0x5f378c=Graphics[_0x292d81(0x273)]/0x2,_0x1b31a8=Graphics['boxHeight']/0x2;else _0x3a4c6a[_0x292d81(0xa5d)](/point (\d+), (\d+)/i)&&(_0x292d81(0x536)!==_0x292d81(0x536)?_0x413dce['Damage'][_0x292d81(0xa6c)]=_0x292d81(0x5f5):(_0x5f378c=Number(RegExp['$1']),_0x1b31a8=Number(RegExp['$2'])));}if(_0x4b4591[_0x292d81(0xa5d)](/none/i))_0x5f378c+=_0x48e439,_0x1b31a8+=_0x254a43;else{if(_0x4b4591[_0x292d81(0xa5d)](/horz/i)&&_0x4b4591[_0x292d81(0xa5d)](/vert/i)){if('BOBMV'!==_0x292d81(0x203)){if(this[_0x292d81(0x6e1)]===_0x292d81(0xa4d))return![];if(this[_0x292d81(0x6e1)]===_0x292d81(0x398))return![];if(!this['_forcing']&&this[_0x292d81(0x724)]()[_0x292d81(0xab0)]())return![];if(this[_0x292d81(0x5c5)]())return!![];if(!this[_0x292d81(0x5e9)]())return![];return typeof this[_0x292d81(0x5e9)]()[_0x292d81(0x68c)]===_0x292d81(0x2c9);}else _0x5f378c+=_0x1f12d6['isActor']()?-_0x48e439:_0x48e439,_0x1b31a8+=_0x1f12d6[_0x292d81(0x31f)]()?-_0x254a43:_0x254a43;}else{if(_0x4b4591[_0x292d81(0xa5d)](/horz/i))'dIfzx'===_0x292d81(0x7c9)?(this[_0x292d81(0x8aa)]=(this[_0x292d81(0x8aa)]*(_0x4c7890-0x1)+this['_targetGrowX'])/_0x51b73e,this[_0x292d81(0x31d)]=(this[_0x292d81(0x31d)]*(_0x47443d-0x1)+this['_targetGrowY'])/_0x4666fc):(_0x5f378c+=_0x1f12d6[_0x292d81(0x31f)]()?-_0x48e439:_0x48e439,_0x1b31a8+=_0x254a43);else _0x4b4591[_0x292d81(0xa5d)](/vert/i)&&(_0x5f378c+=_0x48e439,_0x1b31a8+=_0x1f12d6[_0x292d81(0x31f)]()?-_0x254a43:_0x254a43);}}_0x1f12d6[_0x292d81(0x207)](_0x5f378c,_0x1b31a8,_0x697923,_0x434da,_0x1e64ba,-0x1),_0x1f12d6[_0x292d81(0x8f0)](_0x5ae1aa);}}if(_0x52a722)_0x359f2e['setWaitMode']('battleMove');}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x8e9),_0x28b064=>{const _0x406ec5=_0x164fcd;if(!SceneManager[_0x406ec5(0x53f)]())return;if(!$gameSystem[_0x406ec5(0x709)]())return;VisuMZ[_0x406ec5(0x48e)](_0x28b064,_0x28b064);const _0x4edfa9=$gameTemp[_0x406ec5(0x1da)](),_0x4f832c=VisuMZ['CreateActionSequenceTargets'](_0x28b064['Targets1']),_0x176597=VisuMZ[_0x406ec5(0xb62)](_0x28b064[_0x406ec5(0x39f)]),_0x3e0213=_0x28b064['TargetLocation'];let _0x226604=_0x28b064['MeleeDistance'];const _0x4c85f0=_0x28b064[_0x406ec5(0x125)],_0x19835c=_0x28b064['OffsetX'],_0x2de40e=_0x28b064['OffsetY'],_0x10bcc8=_0x28b064[_0x406ec5(0x908)],_0x5e927b=_0x28b064[_0x406ec5(0x30d)],_0x3c62c8=_0x28b064[_0x406ec5(0x3a7)],_0x59d729=_0x28b064['MotionType'],_0x637d9b=_0x28b064['WaitForMovement'],_0x339ae7=Math[_0x406ec5(0x584)](..._0x176597['map'](_0x559ab4=>_0x559ab4[_0x406ec5(0x921)]()['_baseX']-_0x559ab4[_0x406ec5(0x921)]()['mainSpriteWidth']()/0x2)),_0x1a9921=Math['max'](..._0x176597[_0x406ec5(0xa98)](_0x1032d0=>_0x1032d0['battler']()[_0x406ec5(0x6ab)]+_0x1032d0[_0x406ec5(0x921)]()[_0x406ec5(0x9db)]()/0x2)),_0x3ffadc=Math[_0x406ec5(0x584)](..._0x176597[_0x406ec5(0xa98)](_0x4d1a17=>_0x4d1a17[_0x406ec5(0x921)]()[_0x406ec5(0x3db)]-_0x4d1a17[_0x406ec5(0x921)]()[_0x406ec5(0xb35)]())),_0x140466=Math[_0x406ec5(0xc92)](..._0x176597[_0x406ec5(0xa98)](_0x584642=>_0x584642['battler']()[_0x406ec5(0x3db)])),_0x583dfc=_0x176597[_0x406ec5(0x69f)](_0x10f411=>_0x10f411[_0x406ec5(0x31f)]())[_0x406ec5(0xd04)],_0x436180=_0x176597[_0x406ec5(0x69f)](_0x4f7e49=>_0x4f7e49[_0x406ec5(0xa79)]())[_0x406ec5(0xd04)];let _0x3fd91f=0x0,_0x3775b0=0x0;if(_0x3e0213[_0x406ec5(0xa5d)](/front/i))_0x406ec5(0x28f)!==_0x406ec5(0xcd7)?_0x3fd91f=_0x583dfc>=_0x436180?_0x339ae7:_0x1a9921:_0x450c3b[_0x406ec5(0x5c2)]=![];else{if(_0x3e0213[_0x406ec5(0xa5d)](/middle/i))_0x3fd91f=(_0x339ae7+_0x1a9921)/0x2,_0x226604=-0x1;else _0x3e0213[_0x406ec5(0xa5d)](/back/i)&&(_0x3fd91f=_0x583dfc>=_0x436180?_0x1a9921:_0x339ae7);}if(_0x3e0213[_0x406ec5(0xa5d)](/head/i)){if('OEZEj'!==_0x406ec5(0xcfe))_0x3775b0=_0x3ffadc;else{if(!_0xb7da11['VisuMZ_3_ActSeqImpact'])return;const _0x15e853=_0x2a4da6[_0x406ec5(0x4c8)][_0x406ec5(0xbd6)];if(!_0x15e853)return;if(_0x43c1fa[_0x406ec5(0xc87)][_0x406ec5(0xb5c)]<=1.04){_0x12a840(_0x406ec5(0xcd1)),_0x37ba62[_0x406ec5(0x7f7)]();return;}_0x18cc11[_0x406ec5(0x48e)](_0x3809f5,_0x4f469a);const _0x402930=_0x3d4737[_0x406ec5(0x2b8)];_0x15e853[_0x406ec5(0x6d7)](_0x402930);}}else{if(_0x3e0213[_0x406ec5(0xa5d)](/center/i))_0x3775b0=(_0x3ffadc+_0x140466)/0x2;else{if(_0x3e0213['match'](/base/i)){if(_0x406ec5(0x519)===_0x406ec5(0x519))_0x3775b0=_0x140466;else{const _0x885c8e=this[_0x406ec5(0xcdd)]()[_0x406ec5(0x29b)]||0x0,_0x38f799=_0x448a74[_0x406ec5(0xb0c)][_0x885c8e];_0x38f799&&this[_0x406ec5(0x984)](_0x38f799['weaponImageId']);}}}}if(!_0x4edfa9)return;for(const _0x3f9614 of _0x4f832c){if(!_0x3f9614)continue;let _0x33455b=_0x3fd91f,_0x1597fb=_0x3775b0;if(_0x4c85f0['match'](/none/i)){if(_0x406ec5(0x645)!=='rHJOb'){const _0x5e1327=this[_0x406ec5(0x6bc)]();this['startWeaponAnimation'](_0x5e1327);}else _0x33455b+=_0x19835c,_0x1597fb+=_0x2de40e;}else{if(_0x4c85f0[_0x406ec5(0xa5d)](/horz/i)&&_0x4c85f0['match'](/vert/i))_0x33455b+=_0x3f9614['isActor']()?-_0x19835c:_0x19835c,_0x1597fb+=_0x3f9614['isActor']()?-_0x2de40e:_0x2de40e;else{if(_0x4c85f0[_0x406ec5(0xa5d)](/horz/i)){if(_0x406ec5(0xc90)===_0x406ec5(0xc90))_0x33455b+=_0x3f9614[_0x406ec5(0x31f)]()?-_0x19835c:_0x19835c,_0x1597fb+=_0x2de40e;else{if(!_0x1d37ba[_0x406ec5(0xb36)][_0x406ec5(0x1de)][_0x406ec5(0x1ce)][_0x406ec5(0x523)])return _0x3160f5;const _0x171ea9=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()[_0x406ec5(0x9ea)][_0x406ec5(0xa5d)](_0x171ea9))return _0x44a897;if(this[_0x406ec5(0x724)]()[_0x406ec5(0x66b)]()[_0x406ec5(0x119)](_0x4fe59a=>_0x4fe59a&&_0x4fe59a['note'][_0x406ec5(0xa5d)](_0x171ea9)))return _0xf03053;const _0x350a0e=_0x23d307<0x0?-0x1:0x1;_0x30a17a=_0x5aad36[_0x406ec5(0xa69)](_0x5e121d);let _0x17ca3b=this[_0x406ec5(0x724)]()[_0x406ec5(0x2ee)]();this[_0x406ec5(0x5e9)]()[_0x406ec5(0x9ea)][_0x406ec5(0xa5d)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x17ca3b+=_0x12cedc(_0x5c5924['$1'])/0x64);_0x17ca3b=_0x17ca3b['clamp'](0.01,0x1);const _0x121aae=this[_0x406ec5(0x6e9)](),_0x6180ac=_0x17ca3b*_0x121aae;if(_0x2e65f1>_0x6180ac&&_0x121aae>_0x6180ac){_0x5ab748-=_0x6180ac;const _0x1870a4=_0x437bcd[_0x406ec5(0xb36)][_0x406ec5(0x1de)]['Damage']['DefaultSoftScaler'],_0x4aeebf=_0x2a7e80[_0x406ec5(0xc92)](0x1-_0x5a4aa5/((_0x121aae-_0x6180ac)*_0x1870a4+_0x40c5df),0.01);_0x3c261*=_0x4aeebf,_0xc780e1+=_0x6180ac;}return _0x19f0b9*_0x350a0e;}}else _0x4c85f0['match'](/vert/i)&&(_0x406ec5(0x3b0)===_0x406ec5(0x4e6)?(_0x2a33a5=_0x54d67c[_0x406ec5(0x273)]/0x2,_0x2e4722=_0x3a5b96[_0x406ec5(0xa5c)]/0x2):(_0x33455b+=_0x19835c,_0x1597fb+=_0x3f9614[_0x406ec5(0x31f)]()?-_0x2de40e:_0x2de40e));}}_0x3f9614[_0x406ec5(0x207)](_0x33455b,_0x1597fb,_0x10bcc8,_0x5e927b,_0x3c62c8,_0x226604),_0x3f9614[_0x406ec5(0x8f0)](_0x59d729);}if(_0x637d9b)_0x4edfa9['setWaitMode']('battleMove');}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x881),_0x33fd93=>{const _0x18f3a0=_0x164fcd;if(!SceneManager[_0x18f3a0(0x53f)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x33fd93,_0x33fd93);const _0xa8e0e6=VisuMZ['CreateActionSequenceTargets'](_0x33fd93[_0x18f3a0(0x7cc)]);let _0x42d766=_0x33fd93[_0x18f3a0(0xcd5)]['match'](/back/i);for(const _0x245b69 of _0xa8e0e6){if(!_0x245b69)continue;if(_0x33fd93['Direction'][_0x18f3a0(0xa5d)](/rand/i))_0x42d766=Math[_0x18f3a0(0x5b9)](0x2);_0x245b69['setBattlerFlip'](!!_0x42d766);}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xc01),_0x15c96f=>{const _0x5565c8=_0x164fcd;if(!SceneManager[_0x5565c8(0x53f)]())return;if(!$gameSystem[_0x5565c8(0x709)]())return;VisuMZ[_0x5565c8(0x48e)](_0x15c96f,_0x15c96f);const _0x23a19b=VisuMZ[_0x5565c8(0xb62)](_0x15c96f[_0x5565c8(0x7cc)]);let _0x27cada=_0x15c96f[_0x5565c8(0x90f)];const _0x1d979a=_0x15c96f['FaceAway'];for(const _0x3e0fb6 of _0x23a19b){if(!_0x3e0fb6)continue;let _0x2ca490=_0x3e0fb6[_0x5565c8(0x921)]()[_0x5565c8(0x6ab)],_0x57bca8=_0x3e0fb6[_0x5565c8(0x921)]()[_0x5565c8(0x3db)];if(_0x27cada[_0x5565c8(0xa5d)](/home/i))_0x2ca490=_0x3e0fb6[_0x5565c8(0x921)]()[_0x5565c8(0xa35)],_0x57bca8=_0x3e0fb6['battler']()[_0x5565c8(0xa83)];else{if(_0x27cada[_0x5565c8(0xa5d)](/center/i))_0x2ca490=Graphics[_0x5565c8(0x273)]/0x2,_0x57bca8=Graphics[_0x5565c8(0xa5c)]/0x2;else _0x27cada[_0x5565c8(0xa5d)](/point (\d+), (\d+)/i)&&(_0x5565c8(0x587)===_0x5565c8(0x502)?_0x53b228['BattleCore'][_0x5565c8(0xb28)][_0x5565c8(0xa10)](this):(_0x2ca490=Number(RegExp['$1']),_0x57bca8=Number(RegExp['$2'])));}_0x3e0fb6[_0x5565c8(0x4b9)](Math['round'](_0x2ca490),Math[_0x5565c8(0xa13)](_0x57bca8),!!_0x1d979a);}}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0xbff),_0x356f35=>{const _0x5e4486=_0x164fcd;if(!SceneManager[_0x5e4486(0x53f)]())return;if(!$gameSystem[_0x5e4486(0x709)]())return;VisuMZ[_0x5e4486(0x48e)](_0x356f35,_0x356f35);const _0x1cffa8=VisuMZ[_0x5e4486(0xb62)](_0x356f35[_0x5e4486(0x18b)]),_0x58244e=VisuMZ[_0x5e4486(0xb62)](_0x356f35['Targets2']),_0x3be2fb=_0x58244e[_0x5e4486(0xa98)](_0x5c66f6=>_0x5c66f6&&_0x5c66f6[_0x5e4486(0x921)]()?_0x5c66f6['battler']()[_0x5e4486(0x6ab)]:0x0)/(_0x58244e[_0x5e4486(0xd04)]||0x1),_0x25168e=_0x58244e[_0x5e4486(0xa98)](_0x51571e=>_0x51571e&&_0x51571e[_0x5e4486(0x921)]()?_0x51571e['battler']()[_0x5e4486(0x3db)]:0x0)/(_0x58244e[_0x5e4486(0xd04)]||0x1),_0x517914=_0x356f35[_0x5e4486(0x8e7)];for(const _0x333b23 of _0x1cffa8){if(_0x5e4486(0x75b)!=='EQsuT'){if(!_0x333b23)continue;_0x333b23[_0x5e4486(0x4b9)](Math[_0x5e4486(0xa13)](_0x3be2fb),Math[_0x5e4486(0xa13)](_0x25168e),!!_0x517914);}else this[_0x5e4486(0x5b3)]=this['_targets'][_0x5e4486(0x725)](0x0),this[_0x5e4486(0x2b3)]=0x0,this['_target']=this[_0x5e4486(0x5b3)][0x0]||null,this['_phase']=_0x5e4486(0xbdf);}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xae1),_0x5166ae=>{const _0x250dc6=_0x164fcd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x250dc6(0x48e)](_0x5166ae,_0x5166ae);const _0x54341f=$gameTemp[_0x250dc6(0x1da)](),_0x2dc49a=VisuMZ[_0x250dc6(0xb62)](_0x5166ae[_0x250dc6(0x7cc)]),_0x20e9a7=_0x5166ae[_0x250dc6(0x2a2)],_0x2210b1=_0x5166ae[_0x250dc6(0x908)],_0x21c04c=_0x5166ae['EasingType'],_0x15aa05=_0x5166ae[_0x250dc6(0xc8d)];if(!_0x54341f)return;for(const _0xee0301 of _0x2dc49a){if(!_0xee0301)continue;_0xee0301[_0x250dc6(0x13e)](_0x20e9a7,_0x2210b1,_0x21c04c);}if(_0x15aa05)_0x54341f[_0x250dc6(0x3a2)](_0x250dc6(0x555));}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x964),_0x31e323=>{const _0x51079a=_0x164fcd;if(!SceneManager[_0x51079a(0x53f)]())return;VisuMZ[_0x51079a(0x48e)](_0x31e323,_0x31e323);const _0x40aa65=$gameTemp[_0x51079a(0x1da)]();if(!_0x40aa65)return;const _0x5c87c8=VisuMZ[_0x51079a(0xb62)](_0x31e323[_0x51079a(0x7cc)]);for(const _0xf73b8d of _0x5c87c8){if(!_0xf73b8d)continue;_0xf73b8d[_0x51079a(0xcb8)]();}BattleManager[_0x51079a(0x5a7)]&&(_0x51079a(0x642)!=='TcuOW'?BattleManager[_0x51079a(0x5a7)]['performActionEnd']():(this[_0x51079a(0xc81)][_0x51079a(0xb56)]['x']=0x1/(this[_0x51079a(0xb56)]['x']||0.001),this[_0x51079a(0xc81)][_0x51079a(0xb56)]['y']=0x1/(this[_0x51079a(0xb56)]['y']||0.001)));if(_0x31e323[_0x51079a(0x21f)])_0x40aa65[_0x51079a(0x3a2)]('battleMove');}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Movement_Jump',_0x2a7a94=>{const _0x7c062e=_0x164fcd;if(!SceneManager[_0x7c062e(0x53f)]())return;VisuMZ['ConvertParams'](_0x2a7a94,_0x2a7a94);const _0x1bcf4c=$gameTemp[_0x7c062e(0x1da)](),_0x2599f5=VisuMZ['CreateActionSequenceTargets'](_0x2a7a94[_0x7c062e(0x7cc)]),_0x12426e=_0x2a7a94[_0x7c062e(0x2a2)],_0x3c0402=_0x2a7a94[_0x7c062e(0x908)],_0xbf22ca=_0x2a7a94['WaitForJump'];if(!_0x1bcf4c)return;for(const _0x5371f0 of _0x2599f5){if(_0x7c062e(0x315)===_0x7c062e(0x66a))_0x49630b['BattleCore']['JS'][_0xb7dc5]['call'](this,this[_0x7c062e(0x724)](),this[_0x7c062e(0x724)](),_0x2f42a1,_0x1c212b);else{if(!_0x5371f0)continue;_0x5371f0[_0x7c062e(0x666)](_0x12426e,_0x3c0402);}}if(_0xbf22ca)_0x1bcf4c[_0x7c062e(0x3a2)](_0x7c062e(0xa85));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Movement_MoveBy',_0xcf22a5=>{const _0x336c74=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x336c74(0x48e)](_0xcf22a5,_0xcf22a5);const _0x6c5073=$gameTemp['getLastPluginCommandInterpreter'](),_0x3ce8e2=VisuMZ[_0x336c74(0xb62)](_0xcf22a5['Targets']),_0x946998=_0xcf22a5[_0x336c74(0x797)],_0xede924=_0xcf22a5['DistanceX'],_0x197f56=_0xcf22a5[_0x336c74(0x6df)],_0x53f774=_0xcf22a5[_0x336c74(0x908)],_0x4c2cdf=_0xcf22a5[_0x336c74(0x30d)],_0x329ea4=_0xcf22a5[_0x336c74(0x3a7)],_0x213f13=_0xcf22a5['MotionType'],_0x520bd5=_0xcf22a5[_0x336c74(0x21f)];if(!_0x6c5073)return;for(const _0x4a0375 of _0x3ce8e2){if(!_0x4a0375)continue;let _0x1e4ce0=_0xede924,_0x30c8ca=_0x197f56;if(_0x946998[_0x336c74(0xa5d)](/horz/i))_0x1e4ce0*=_0x4a0375['isActor']()?-0x1:0x1;if(_0x946998[_0x336c74(0xa5d)](/vert/i))_0x30c8ca*=_0x4a0375[_0x336c74(0x31f)]()?-0x1:0x1;_0x4a0375[_0x336c74(0xd1e)](_0x1e4ce0,_0x30c8ca,_0x53f774,_0x4c2cdf,_0x329ea4),_0x4a0375['requestMotion'](_0x213f13);}if(_0x520bd5)_0x6c5073['setWaitMode'](_0x336c74(0xb8d));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Movement_MoveToPoint',_0x3b42af=>{const _0x2b3a4b=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x2b3a4b(0x709)]())return;VisuMZ[_0x2b3a4b(0x48e)](_0x3b42af,_0x3b42af);const _0x581e47=$gameTemp[_0x2b3a4b(0x1da)](),_0xc92968=VisuMZ['CreateActionSequenceTargets'](_0x3b42af[_0x2b3a4b(0x7cc)]),_0x3bf529=_0x3b42af[_0x2b3a4b(0x65d)],_0x417d9e=_0x3b42af[_0x2b3a4b(0x125)],_0x1a0e6c=_0x3b42af[_0x2b3a4b(0x9d3)],_0x26cd14=_0x3b42af['OffsetY'],_0x2d84c1=_0x3b42af['Duration'],_0x16f35b=_0x3b42af[_0x2b3a4b(0x30d)],_0x3efdac=_0x3b42af[_0x2b3a4b(0x3a7)],_0x146e2a=_0x3b42af[_0x2b3a4b(0x53a)],_0x8b528e=_0x3b42af[_0x2b3a4b(0x21f)];if(!_0x581e47)return;for(const _0xaee4d8 of _0xc92968){if(!_0xaee4d8)continue;let _0x174470=_0xaee4d8['battler']()['_baseX'],_0x56d2c3=_0xaee4d8['battler']()[_0x2b3a4b(0x3db)];if(_0x3bf529[_0x2b3a4b(0xa5d)](/home/i)){if(_0x2b3a4b(0x64d)!==_0x2b3a4b(0x64d)){if(this['_targetOpacity']===_0x9bd61)return;this[_0x2b3a4b(0xb7e)]=_0x6c0d9d,this[_0x2b3a4b(0x11e)]=_0x1be62f,this['_opacityWholeDuration']=_0x57c589,this[_0x2b3a4b(0x714)]=_0x57ac26||_0x2b3a4b(0x28c);if(_0x32e96f<=0x0)this[_0x2b3a4b(0x4c4)]=_0x40dce5;}else _0x174470=_0xaee4d8[_0x2b3a4b(0x921)]()['_homeX'],_0x56d2c3=_0xaee4d8[_0x2b3a4b(0x921)]()[_0x2b3a4b(0xa83)];}else{if(_0x3bf529[_0x2b3a4b(0xa5d)](/center/i))_0x174470=Graphics[_0x2b3a4b(0x273)]/0x2,_0x56d2c3=Graphics[_0x2b3a4b(0xa5c)]/0x2;else _0x3bf529[_0x2b3a4b(0xa5d)](/point (\d+), (\d+)/i)&&('pVwLL'!==_0x2b3a4b(0x8c2)?(_0x174470=Number(RegExp['$1']),_0x56d2c3=Number(RegExp['$2'])):_0x398229=_0x45e0d7['SideviewSelect']);}if(_0x417d9e[_0x2b3a4b(0xa5d)](/none/i))_0x2b3a4b(0x332)!==_0x2b3a4b(0x332)?_0x49fa4a=_0x1b2270:(_0x174470+=_0x1a0e6c,_0x56d2c3+=_0x26cd14);else{if(_0x417d9e['match'](/horz/i)&&_0x417d9e[_0x2b3a4b(0xa5d)](/vert/i))_0x174470+=_0xaee4d8[_0x2b3a4b(0x31f)]()?-_0x1a0e6c:_0x1a0e6c,_0x56d2c3+=_0xaee4d8[_0x2b3a4b(0x31f)]()?-_0x26cd14:_0x26cd14;else{if(_0x417d9e['match'](/horz/i))_0x174470+=_0xaee4d8['isActor']()?-_0x1a0e6c:_0x1a0e6c,_0x56d2c3+=_0x26cd14;else{if(_0x417d9e['match'](/vert/i)){if('ethIP'==='ethIP')_0x174470+=_0x1a0e6c,_0x56d2c3+=_0xaee4d8[_0x2b3a4b(0x31f)]()?-_0x26cd14:_0x26cd14;else{const _0xdda385=_0x1afa0f['BattleCore'][_0x2b3a4b(0x1de)]['BattleLayout'],_0x39d414=_0x14a523[_0x2b3a4b(0x2bf)]['extraHeight'](),_0x1d25df=_0x31f7dd[_0x2b3a4b(0x273)]-(_0xdda385[_0x2b3a4b(0x2c8)]||0xc0),_0x2631af=this['windowAreaHeight']()+_0x39d414,_0x1b9d45=this[_0x2b3a4b(0x594)]()?0x0:_0x8649a8[_0x2b3a4b(0x273)]-_0x1d25df,_0xa4ebd4=_0x372522['boxHeight']-_0x2631af+_0x39d414;return new _0xacb70f(_0x1b9d45,_0xa4ebd4,_0x1d25df,_0x2631af);}}}}}_0xaee4d8[_0x2b3a4b(0x887)](_0x174470,_0x56d2c3,_0x2d84c1,_0x16f35b,_0x3efdac,-0x1),_0xaee4d8['requestMotion'](_0x146e2a);}if(_0x8b528e)_0x581e47[_0x2b3a4b(0x3a2)](_0x2b3a4b(0xb8d));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x2ca),_0x2d0c63=>{const _0x1cd270=_0x164fcd;if(!SceneManager[_0x1cd270(0x53f)]())return;if(!$gameSystem[_0x1cd270(0x709)]())return;VisuMZ['ConvertParams'](_0x2d0c63,_0x2d0c63);const _0x474336=$gameTemp[_0x1cd270(0x1da)](),_0x8641fb=VisuMZ[_0x1cd270(0xb62)](_0x2d0c63[_0x1cd270(0x18b)]),_0x4e19ec=VisuMZ['CreateActionSequenceTargets'](_0x2d0c63[_0x1cd270(0x39f)]),_0x35ebd3=_0x2d0c63[_0x1cd270(0x4ce)];let _0x44c5b4=_0x2d0c63['MeleeDistance'];const _0x4716eb=_0x2d0c63['OffsetAdjust'],_0x3478f5=_0x2d0c63[_0x1cd270(0x9d3)],_0x345fda=_0x2d0c63['OffsetY'],_0x38288d=_0x2d0c63[_0x1cd270(0x908)],_0x1ae62f=_0x2d0c63['FaceDirection'],_0x584264=_0x2d0c63[_0x1cd270(0x3a7)],_0x534038=_0x2d0c63['MotionType'],_0x336162=_0x2d0c63[_0x1cd270(0x21f)],_0x47e554=Math[_0x1cd270(0x584)](..._0x4e19ec[_0x1cd270(0xa98)](_0x3a4bfe=>_0x3a4bfe[_0x1cd270(0x921)]()[_0x1cd270(0x6ab)]-_0x3a4bfe['battler']()[_0x1cd270(0x9db)]()/0x2)),_0x588398=Math[_0x1cd270(0xc92)](..._0x4e19ec[_0x1cd270(0xa98)](_0x19503f=>_0x19503f[_0x1cd270(0x921)]()[_0x1cd270(0x6ab)]+_0x19503f[_0x1cd270(0x921)]()[_0x1cd270(0x9db)]()/0x2)),_0x36e46a=Math[_0x1cd270(0x584)](..._0x4e19ec[_0x1cd270(0xa98)](_0x55689a=>_0x55689a[_0x1cd270(0x921)]()[_0x1cd270(0x3db)]-_0x55689a[_0x1cd270(0x921)]()['mainSpriteHeight']())),_0x50c065=Math[_0x1cd270(0xc92)](..._0x4e19ec[_0x1cd270(0xa98)](_0x31a89a=>_0x31a89a[_0x1cd270(0x921)]()[_0x1cd270(0x3db)])),_0x9c8e3a=_0x4e19ec[_0x1cd270(0x69f)](_0x4702c3=>_0x4702c3['isActor']())[_0x1cd270(0xd04)],_0x2f9532=_0x4e19ec[_0x1cd270(0x69f)](_0xf441a9=>_0xf441a9[_0x1cd270(0xa79)]())['length'];let _0x130d9d=0x0,_0x1df74f=0x0;if(_0x35ebd3[_0x1cd270(0xa5d)](/front/i))_0x130d9d=_0x9c8e3a>=_0x2f9532?_0x47e554:_0x588398;else{if(_0x35ebd3[_0x1cd270(0xa5d)](/middle/i)){if('EHJLF'===_0x1cd270(0x15b)){const _0x22ccda=_0x35a208[_0x1cd270(0xbf9)],_0x15ed48=_0x1cd270(0x987);this[_0x1cd270(0x6a2)](_0x22ccda,_0x15ed48);}else _0x130d9d=(_0x47e554+_0x588398)/0x2,_0x44c5b4=-0x1;}else _0x35ebd3['match'](/back/i)&&(_0x130d9d=_0x9c8e3a>=_0x2f9532?_0x588398:_0x47e554);}if(_0x35ebd3[_0x1cd270(0xa5d)](/head/i))_0x1df74f=_0x36e46a;else{if(_0x35ebd3[_0x1cd270(0xa5d)](/center/i)){if(_0x1cd270(0x300)!==_0x1cd270(0xa33))_0x1df74f=(_0x36e46a+_0x50c065)/0x2;else{let _0x42e8ac=_0x4efbe5[_0x1cd270(0x923)](_0x365f5d[_0x1cd270(0x56a)]);_0x42e8ac=this['disperseDamage'](_0x42e8ac),_0x42e8ac!==0x0&&(_0x5b83c1[_0x1cd270(0xad9)](_0x42e8ac),this[_0x1cd270(0x406)](_0x14cefb));}}else _0x35ebd3[_0x1cd270(0xa5d)](/base/i)&&(_0x1df74f=_0x50c065);}if(!_0x474336)return;for(const _0x3a422a of _0x8641fb){if(!_0x3a422a)continue;let _0x596184=_0x130d9d,_0x1518fd=_0x1df74f;if(_0x4716eb[_0x1cd270(0xa5d)](/none/i))_0x1cd270(0x4b1)!=='YgfCi'?(_0x596184+=_0x3478f5,_0x1518fd+=_0x345fda):this[_0x1cd270(0x4c9)](_0x34efad,_0x3db670,_0x260035);else{if(_0x4716eb[_0x1cd270(0xa5d)](/horz/i)&&_0x4716eb[_0x1cd270(0xa5d)](/vert/i))'HnopE'===_0x1cd270(0x850)?_0x1ebf10=_0x51488e:(_0x596184+=_0x3a422a[_0x1cd270(0x31f)]()?-_0x3478f5:_0x3478f5,_0x1518fd+=_0x3a422a['isActor']()?-_0x345fda:_0x345fda);else{if(_0x4716eb[_0x1cd270(0xa5d)](/horz/i)){if(_0x1cd270(0x8fd)!==_0x1cd270(0x6ce))_0x596184+=_0x3a422a[_0x1cd270(0x31f)]()?-_0x3478f5:_0x3478f5,_0x1518fd+=_0x345fda;else return _0x30ed12[_0x1cd270(0xb36)][_0x1cd270(0x1de)][_0x1cd270(0x560)][_0x1cd270(0x28e)];}else{if(_0x4716eb[_0x1cd270(0xa5d)](/vert/i)){if(_0x1cd270(0x30b)!=='ueRlI')return 0x0;else _0x596184+=_0x3478f5,_0x1518fd+=_0x3a422a[_0x1cd270(0x31f)]()?-_0x345fda:_0x345fda;}}}}_0x3a422a['moveBattlerToPoint'](_0x596184,_0x1518fd,_0x38288d,_0x1ae62f,_0x584264,_0x44c5b4),_0x3a422a[_0x1cd270(0x8f0)](_0x534038);}if(_0x336162)_0x474336['setWaitMode'](_0x1cd270(0xb8d));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x96c),_0x482fec=>{const _0x3b2003=_0x164fcd;if(!SceneManager[_0x3b2003(0x53f)]())return;VisuMZ[_0x3b2003(0x48e)](_0x482fec,_0x482fec);const _0x6fdde4=$gameTemp['getLastPluginCommandInterpreter'](),_0x11d285=VisuMZ[_0x3b2003(0xb62)](_0x482fec[_0x3b2003(0x7cc)]),_0x220b94=_0x482fec[_0x3b2003(0x383)],_0x3e03e0=_0x482fec[_0x3b2003(0x908)],_0x33e37e=_0x482fec[_0x3b2003(0x3a7)],_0x12fc1c=_0x482fec['WaitForOpacity'];if(!_0x6fdde4)return;for(const _0x979970 of _0x11d285){if(!_0x979970)continue;_0x979970[_0x3b2003(0x853)](_0x220b94,_0x3e03e0,_0x33e37e);}if(_0x12fc1c)_0x6fdde4[_0x3b2003(0x3a2)](_0x3b2003(0x37b));}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x3bf),_0x16385e=>{const _0x931a7a=_0x164fcd;if(!SceneManager[_0x931a7a(0x53f)]())return;VisuMZ[_0x931a7a(0x48e)](_0x16385e,_0x16385e);const _0x34c17d=$gameTemp[_0x931a7a(0x1da)](),_0xcf9172=VisuMZ[_0x931a7a(0xb62)](_0x16385e[_0x931a7a(0x7cc)]),_0x1d7f31=_0x16385e[_0x931a7a(0x2ef)],_0x2f6175=_0x16385e[_0x931a7a(0x1d4)],_0x4d6755=_0x16385e['Duration'],_0x13fd5c=_0x16385e[_0x931a7a(0x3a7)],_0x326ea6=_0x16385e[_0x931a7a(0x795)];if(!_0x34c17d)return;for(const _0x386132 of _0xcf9172){if(_0x931a7a(0x9f1)!==_0x931a7a(0xbee)){if(!_0x386132)continue;_0x386132['growBattler'](_0x1d7f31,_0x2f6175,_0x4d6755,_0x13fd5c);}else{if(!_0x1d6564[_0x931a7a(0xb36)][_0x931a7a(0x1de)][_0x931a7a(0xa08)]['ShowFailure'])return;_0x3589b4[_0x931a7a(0xb36)][_0x931a7a(0xaa9)][_0x931a7a(0xa10)](this,_0xe3d16f);}}if(_0x326ea6)_0x34c17d[_0x931a7a(0x3a2)]('battleGrow');}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x3d0),_0x4aae60=>{const _0x67b76f=_0x164fcd;if(!SceneManager[_0x67b76f(0x53f)]())return;VisuMZ[_0x67b76f(0x48e)](_0x4aae60,_0x4aae60);const _0x383157=$gameTemp['getLastPluginCommandInterpreter'](),_0x4c2541=VisuMZ[_0x67b76f(0xb62)](_0x4aae60[_0x67b76f(0x7cc)]),_0x4fcbf5=_0x4aae60['SkewX'],_0x1260a4=_0x4aae60['SkewY'],_0x178941=_0x4aae60[_0x67b76f(0x908)],_0x3270d7=_0x4aae60[_0x67b76f(0x3a7)],_0x4ebbbe=_0x4aae60[_0x67b76f(0x904)];if(!_0x383157)return;for(const _0x57c7c5 of _0x4c2541){if(_0x67b76f(0x176)==='zFwUT'){if(!_0x57c7c5)continue;_0x57c7c5[_0x67b76f(0xafd)](_0x4fcbf5,_0x1260a4,_0x178941,_0x3270d7);}else{const _0x48fa6e=_0x55f4ad[_0x67b76f(0xad2)]?_0x1abf96['SkillsStatesCore'][_0x67b76f(0x1de)][_0x67b76f(0x877)]:_0x2a61b1[_0x67b76f(0xb36)][_0x67b76f(0x1de)][_0x67b76f(0x560)],_0x195694=_0x1e408a[_0x67b76f(0x777)][_0x67b76f(0x893)](_0x558119),_0x338427=_0x195694?_0x48fa6e[_0x67b76f(0x630)]:_0x48fa6e[_0x67b76f(0x46e)];_0x5632e4=_0x67b76f(0x478)['format'](_0x338427,_0x4da098);}}if(_0x4ebbbe)_0x383157[_0x67b76f(0x3a2)](_0x67b76f(0x7b6));}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],'ActSeq_Movement_Spin',_0x3f4ddc=>{const _0x25a9c5=_0x164fcd;if(!SceneManager[_0x25a9c5(0x53f)]())return;VisuMZ[_0x25a9c5(0x48e)](_0x3f4ddc,_0x3f4ddc);const _0x26c1bc=$gameTemp[_0x25a9c5(0x1da)](),_0x5f26d9=VisuMZ[_0x25a9c5(0xb62)](_0x3f4ddc[_0x25a9c5(0x7cc)]),_0x236d30=_0x3f4ddc[_0x25a9c5(0x840)],_0xc114ad=_0x3f4ddc[_0x25a9c5(0x908)],_0x3d5988=_0x3f4ddc['EasingType'],_0x192b18=_0x3f4ddc[_0x25a9c5(0x585)],_0x5058e6=_0x3f4ddc[_0x25a9c5(0xaa7)];if(!_0x26c1bc)return;for(const _0x19ef1e of _0x5f26d9){if(!_0x19ef1e)continue;_0x19ef1e['spinBattler'](_0x236d30,_0xc114ad,_0x3d5988,_0x192b18);}if(_0x5058e6)_0x26c1bc['setWaitMode'](_0x25a9c5(0x5c3));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Movement_WaitForFloat',_0x27d4cf=>{const _0x30784a=_0x164fcd;if(!SceneManager[_0x30784a(0x53f)]())return;const _0x5ef1bb=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5ef1bb)return;_0x5ef1bb['setWaitMode'](_0x30784a(0x555));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x8b9),_0x2d169f=>{const _0x3297d2=_0x164fcd;if(!SceneManager[_0x3297d2(0x53f)]())return;const _0x58573d=$gameTemp[_0x3297d2(0x1da)]();if(!_0x58573d)return;_0x58573d[_0x3297d2(0x3a2)](_0x3297d2(0xa85));}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x1a4),_0x19cd18=>{const _0x4f9800=_0x164fcd;if(!SceneManager[_0x4f9800(0x53f)]())return;const _0x18c16d=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x18c16d)return;_0x18c16d[_0x4f9800(0x3a2)](_0x4f9800(0xb8d));}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],'ActSeq_Movement_WaitForOpacity',_0x582556=>{const _0x198ed0=_0x164fcd;if(!SceneManager[_0x198ed0(0x53f)]())return;const _0xd7a12c=$gameTemp[_0x198ed0(0x1da)]();if(!_0xd7a12c)return;_0xd7a12c[_0x198ed0(0x3a2)](_0x198ed0(0x37b));}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x2a8),_0x286330=>{const _0x2cd84c=_0x164fcd;if(!SceneManager[_0x2cd84c(0x53f)]())return;const _0x191855=$gameTemp[_0x2cd84c(0x1da)]();if(!_0x191855)return;_0x191855[_0x2cd84c(0x3a2)]('battleGrow');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_WaitForSkew',_0x15eca0=>{const _0x4764f0=_0x164fcd;if(!SceneManager[_0x4764f0(0x53f)]())return;const _0x3dcbfb=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x3dcbfb)return;_0x3dcbfb['setWaitMode']('battleSpriteSkew');}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],'ActSeq_Movement_WaitForSpin',_0x2cce86=>{const _0x446e7b=_0x164fcd;if(!SceneManager[_0x446e7b(0x53f)]())return;const _0x1622d7=$gameTemp[_0x446e7b(0x1da)]();if(!_0x1622d7)return;_0x1622d7['setWaitMode']('battleSpin');}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x7c7),_0x33e657=>{const _0x144a53=_0x164fcd;if(!SceneManager[_0x144a53(0x53f)]())return;if(!Imported[_0x144a53(0x672)])return;VisuMZ['ConvertParams'](_0x33e657,_0x33e657);const _0x5cdc20=$gameTemp[_0x144a53(0x1da)](),_0x469ca3=_0x33e657[_0x144a53(0xa41)];if(!_0x5cdc20)return;const _0x22f83f=BattleManager[_0x144a53(0xbd6)];if(!_0x22f83f)return;_0x22f83f['createActionSequenceProjectile'](_0x33e657);if(_0x469ca3)_0x5cdc20[_0x144a53(0x3a2)](_0x144a53(0x619));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x45e),_0x2d79a4=>{const _0xa1d5e9=_0x164fcd;if(!SceneManager[_0xa1d5e9(0x53f)]())return;if(!Imported[_0xa1d5e9(0x672)])return;VisuMZ[_0xa1d5e9(0x48e)](_0x2d79a4,_0x2d79a4);const _0x354a71=$gameTemp[_0xa1d5e9(0x1da)](),_0x9dbaf5=_0x2d79a4[_0xa1d5e9(0xa41)];if(!_0x354a71)return;const _0x15356f=BattleManager['_spriteset'];if(!_0x15356f)return;_0x15356f[_0xa1d5e9(0xac3)](_0x2d79a4);if(_0x9dbaf5)_0x354a71['setWaitMode'](_0xa1d5e9(0x619));}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x4d0),_0x171dac=>{const _0x58a228=_0x164fcd;if(!SceneManager[_0x58a228(0x53f)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ['ConvertParams'](_0x171dac,_0x171dac);const _0x5effd5=$gameTemp[_0x58a228(0x1da)](),_0x433c9a=_0x171dac[_0x58a228(0xa41)];if(!_0x5effd5)return;const _0x542671=BattleManager[_0x58a228(0xbd6)];if(!_0x542671)return;_0x542671['createActionSequenceProjectile'](_0x171dac);if(_0x433c9a)_0x5effd5['setWaitMode'](_0x58a228(0x619));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x64f),_0x3503ee=>{const _0x3e048f=_0x164fcd;if(!SceneManager[_0x3e048f(0x53f)]())return;if(!Imported[_0x3e048f(0x2d3)])return;VisuMZ[_0x3e048f(0x48e)](_0x3503ee,_0x3503ee);const _0x473919=$gameTemp[_0x3e048f(0x1da)](),_0x565fb2=_0x3503ee[_0x3e048f(0x904)];if(!_0x473919)return;$gameScreen[_0x3e048f(0x695)](_0x3503ee[_0x3e048f(0x803)],_0x3503ee[_0x3e048f(0x975)],_0x3503ee[_0x3e048f(0x908)],_0x3503ee['EasingType']);if(_0x565fb2)_0x473919[_0x3e048f(0x3a2)](_0x3e048f(0xb4c));}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x353),_0x264d2c=>{const _0x3e1a2=_0x164fcd;if(!SceneManager[_0x3e1a2(0x53f)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x264d2c,_0x264d2c);const _0x5bf69d=$gameTemp[_0x3e1a2(0x1da)](),_0x31e3b9=_0x264d2c['WaitForSkew'];if(!_0x5bf69d)return;$gameScreen[_0x3e1a2(0x695)](0x0,0x0,_0x264d2c[_0x3e1a2(0x908)],_0x264d2c[_0x3e1a2(0x3a7)]);if(_0x31e3b9)_0x5bf69d[_0x3e1a2(0x3a2)](_0x3e1a2(0xb4c));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x64a),_0xe36ee7=>{const _0x3df8b8=_0x164fcd;if(!SceneManager[_0x3df8b8(0x53f)]())return;if(!Imported[_0x3df8b8(0x2d3)])return;const _0x198ec7=$gameTemp[_0x3df8b8(0x1da)]();if(!_0x198ec7)return;_0x198ec7[_0x3df8b8(0x3a2)](_0x3df8b8(0xb4c));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xa75),_0x254de1=>{const _0x465469=_0x164fcd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x465469(0x48e)](_0x254de1,_0x254de1);const _0x5a702b=$gameTemp[_0x465469(0x1da)](),_0x32dcaa=_0x254de1['Index'],_0xaee1ce=_0x254de1[_0x465469(0x650)];if(!_0x5a702b)return;BattleManager['_targetIndex']=_0x32dcaa,BattleManager[_0x465469(0x49a)]=BattleManager[_0x465469(0x5b3)]?BattleManager[_0x465469(0x5b3)][BattleManager[_0x465469(0x2b3)]]||null:null,BattleManager[_0x465469(0x49a)]&&_0xaee1ce[_0x465469(0x7e1)]()['trim']()!=='UNTITLED'&&_0x5a702b[_0x465469(0xcd9)]([_0xaee1ce]);}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x9f8),_0x1a8c9b=>{const _0x6c112d=_0x164fcd;if(!SceneManager[_0x6c112d(0x53f)]())return;VisuMZ['ConvertParams'](_0x1a8c9b,_0x1a8c9b);const _0x430614=$gameTemp['getLastPluginCommandInterpreter'](),_0x17f84d=_0x1a8c9b[_0x6c112d(0x650)];if(!_0x430614)return;BattleManager[_0x6c112d(0x2b3)]++,BattleManager[_0x6c112d(0x49a)]=BattleManager['_allTargets'][BattleManager[_0x6c112d(0x2b3)]]||null;if(BattleManager[_0x6c112d(0x49a)]&&_0x17f84d[_0x6c112d(0x7e1)]()[_0x6c112d(0xab7)]()!==_0x6c112d(0x28a)){if(_0x6c112d(0x53d)!==_0x6c112d(0x914))_0x430614[_0x6c112d(0xcd9)]([_0x17f84d]);else{if(_0x15a153===this['deathStateId']()&&this[_0x6c112d(0x40e)]())return!![];return _0x2a021a['BattleCore'][_0x6c112d(0x7fc)]['call'](this,_0x4a2285);}}}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x449),_0x52592d=>{const _0x474d92=_0x164fcd;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x52592d,_0x52592d);const _0x4b87f5=$gameTemp[_0x474d92(0x1da)](),_0x152215=_0x52592d['JumpToLabel'];if(!_0x4b87f5)return;BattleManager[_0x474d92(0x2b3)]--,BattleManager[_0x474d92(0x49a)]=BattleManager[_0x474d92(0x5b3)][BattleManager[_0x474d92(0x2b3)]]||null,BattleManager[_0x474d92(0x49a)]&&_0x152215['toUpperCase']()['trim']()!=='UNTITLED'&&_0x4b87f5['command119']([_0x152215]);}),PluginManager['registerCommand'](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x88d),_0x32b106=>{const _0x529cb0=_0x164fcd;if(!SceneManager[_0x529cb0(0x53f)]())return;VisuMZ['ConvertParams'](_0x32b106,_0x32b106);const _0x5d1324=$gameTemp['getLastPluginCommandInterpreter'](),_0x31a291=_0x32b106['ForceRandom'],_0x31779f=_0x32b106['JumpToLabel'];if(!_0x5d1324)return;const _0x3fa086=BattleManager[_0x529cb0(0x2b3)];for(;;){if('kwLeS'===_0x529cb0(0xc58)){if(!_0x3c1069[_0x529cb0(0x53f)]())return!![];const _0x1e8be0=[_0x529cb0(0xcec),_0x529cb0(0x205)];return _0x1e8be0[_0x529cb0(0x893)](_0x19e2e9[_0x529cb0(0x16d)]);}else{BattleManager[_0x529cb0(0x2b3)]=Math[_0x529cb0(0x5b9)](BattleManager['_allTargets']['length']);if(!_0x31a291)break;if(BattleManager['_targetIndex']!==_0x3fa086)break;if(BattleManager[_0x529cb0(0x5b3)][_0x529cb0(0xd04)]<=0x1){if(_0x529cb0(0x4d4)===_0x529cb0(0xc2c))this[_0x529cb0(0xc81)][_0x529cb0(0xc39)]=![];else{BattleManager['_targetIndex']=0x0;break;}}}}BattleManager[_0x529cb0(0x49a)]=BattleManager[_0x529cb0(0x5b3)][BattleManager['_targetIndex']]||null,BattleManager[_0x529cb0(0x49a)]&&_0x31779f[_0x529cb0(0x7e1)]()[_0x529cb0(0xab7)]()!=='UNTITLED'&&('cLYtu'!==_0x529cb0(0x63b)?_0x5d1324['command119']([_0x31779f]):this[_0x529cb0(0x609)](_0x27b1b7,'tp',_0x1166fa+0x88*0x2+(_0x335841[_0x529cb0(0x2e3)]||0x0),_0x1d82ed+(_0xb85e86[_0x529cb0(0xc56)]||0x0)));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Weapon_ClearActiveWeapon',_0x55f95e=>{const _0x167864=_0x164fcd;if(!SceneManager[_0x167864(0x53f)]())return;VisuMZ[_0x167864(0x48e)](_0x55f95e,_0x55f95e);const _0x5cfad2=VisuMZ[_0x167864(0xb62)](_0x55f95e[_0x167864(0x7cc)]);for(const _0x2d27af of _0x5cfad2){if(!_0x2d27af)continue;if(!_0x2d27af[_0x167864(0x31f)]())continue;_0x2d27af[_0x167864(0xadb)]();}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Weapon_NextActiveWeapon',_0x3fcacf=>{const _0x41f144=_0x164fcd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x41f144(0x48e)](_0x3fcacf,_0x3fcacf);const _0x26f733=$gameTemp[_0x41f144(0x1da)]();let _0x4c3e2a=![];const _0x4a4fb4=_0x3fcacf[_0x41f144(0x650)],_0x3bb93b=VisuMZ[_0x41f144(0xb62)](_0x3fcacf['Targets']);for(const _0x2f5919 of _0x3bb93b){if('NHbRm'===_0x41f144(0xaa2))_0xf9307a['BattleSystemCTB'][_0x41f144(0xb5c)]<1.19&&(_0x13fc14(_0x2306be[_0x41f144(0x272)](_0x41f144(0x816))),_0x301c2c['exit']());else{if(!_0x2f5919)continue;if(!_0x2f5919['isActor']())continue;_0x2f5919[_0x41f144(0xbeb)]();if(_0x2f5919[_0x41f144(0x99b)]()[_0x41f144(0xd04)]>0x0){if(_0x41f144(0x208)===_0x41f144(0x88f)){const _0x395480=_0x28b36d[_0x41f144(0xb69)](_0x3f427a['$1']);this['addSingleSkillCommand'](_0x5bcdba[_0x395480]);}else _0x4c3e2a=!![];}else _0x2f5919[_0x41f144(0xadb)]();}}_0x4c3e2a&&_0x4a4fb4[_0x41f144(0x7e1)]()[_0x41f144(0xab7)]()!==_0x41f144(0x28a)&&(_0x41f144(0x1dd)===_0x41f144(0x1dd)?_0x26f733[_0x41f144(0xcd9)]([_0x4a4fb4]):this[_0x41f144(0x493)](_0x41f144(0x67d)));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0xbcb),_0x2dbe6b=>{const _0x468f26=_0x164fcd;if(!SceneManager[_0x468f26(0x53f)]())return;VisuMZ[_0x468f26(0x48e)](_0x2dbe6b,_0x2dbe6b);let _0x1acb52=_0x2dbe6b['SlotID'];_0x1acb52--,_0x1acb52=Math['max'](_0x1acb52,0x0);const _0x32e77e=VisuMZ[_0x468f26(0xb62)](_0x2dbe6b[_0x468f26(0x7cc)]);for(const _0x458eef of _0x32e77e){if(_0x468f26(0x7e3)!==_0x468f26(0x7e3))return this[_0x468f26(0xb85)]();else{if(!_0x458eef)continue;if(!_0x458eef['isActor']())continue;_0x458eef[_0x468f26(0x57e)](_0x1acb52);}}}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],'ActSeq_Zoom_Scale',_0xf9bb20=>{const _0x466e03=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x466e03(0x2d3)])return;VisuMZ[_0x466e03(0x48e)](_0xf9bb20,_0xf9bb20);const _0x71fb73=$gameTemp['getLastPluginCommandInterpreter'](),_0x24b6a4=_0xf9bb20[_0x466e03(0x860)];if(!_0x71fb73)return;$gameScreen[_0x466e03(0x653)](_0xf9bb20['Scale'],_0xf9bb20['Duration'],_0xf9bb20[_0x466e03(0x3a7)]);if(_0x24b6a4)_0x71fb73[_0x466e03(0x3a2)](_0x466e03(0x811));}),PluginManager[_0x164fcd(0x68a)](pluginData['name'],_0x164fcd(0x711),_0x485576=>{const _0x992d52=_0x164fcd;if(!SceneManager[_0x992d52(0x53f)]())return;if(!Imported[_0x992d52(0x2d3)])return;VisuMZ[_0x992d52(0x48e)](_0x485576,_0x485576);const _0x3da935=$gameTemp['getLastPluginCommandInterpreter'](),_0x3877df=_0x485576['WaitForZoom'];if(!_0x3da935)return;$gameScreen[_0x992d52(0x653)](0x1,_0x485576['Duration'],_0x485576[_0x992d52(0x3a7)]);if(_0x3877df)_0x3da935[_0x992d52(0x3a2)](_0x992d52(0x811));}),PluginManager[_0x164fcd(0x68a)](pluginData[_0x164fcd(0x16d)],_0x164fcd(0x80b),_0x51f89f=>{const _0x4dd86f=_0x164fcd;if(!SceneManager[_0x4dd86f(0x53f)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x4ab255=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4ab255)return;_0x4ab255[_0x4dd86f(0x3a2)](_0x4dd86f(0x811));}),VisuMZ[_0x164fcd(0xb36)]['Scene_Boot_onDatabaseLoaded']=Scene_Boot[_0x164fcd(0x2bf)][_0x164fcd(0x9ba)],Scene_Boot[_0x164fcd(0x2bf)][_0x164fcd(0x9ba)]=function(){const _0x331a36=_0x164fcd;this['process_VisuMZ_BattleCore_Failsafes'](),this['process_VisuMZ_BattleCore_PluginParams'](),this['process_VisuMZ_BattleCore_DamageStyles'](),this[_0x331a36(0x72e)](),VisuMZ[_0x331a36(0xb36)][_0x331a36(0x482)]['call'](this),this[_0x331a36(0xb57)](),this['process_VisuMZ_BattleCore_BaseTroops'](),this[_0x331a36(0x9b9)](),this['process_VisuMZ_BattleCore_CommonEventKeys']();},Scene_Boot[_0x164fcd(0x2bf)][_0x164fcd(0xb57)]=function(){const _0x3196de=_0x164fcd;if(VisuMZ[_0x3196de(0xa30)])return;this[_0x3196de(0xb75)](),this[_0x3196de(0xaf9)](),this[_0x3196de(0x902)]();},Scene_Boot[_0x164fcd(0x2bf)][_0x164fcd(0xa14)]=function(){const _0x27dc4d=_0x164fcd,_0x708318=$dataSystem[_0x27dc4d(0xc79)][_0x27dc4d(0xd04)];for(let _0x151022=0x0;_0x151022<_0x708318;_0x151022++){if(_0x27dc4d(0xc31)===_0x27dc4d(0x36d))return _0x154e8d[_0x27dc4d(0xb36)][_0x27dc4d(0x8f8)]['call'](this);else{const _0x57289c=$dataSystem['attackMotions'][_0x151022];if(_0x57289c)continue;$dataSystem['attackMotions'][_0x151022]={'type':0x1,'weaponImageId':0x1};}}},Scene_Boot['prototype'][_0x164fcd(0x503)]=function(){const _0x3341c8=_0x164fcd,_0x46e03a=VisuMZ[_0x3341c8(0xb36)][_0x3341c8(0x1de)];if(_0x46e03a[_0x3341c8(0x1ce)]['PopupPosition']===undefined){if('HJyMs'!==_0x3341c8(0xa34)){const _0x5ec1c9=_0x29f4f2[_0x3341c8(0x9fa)],_0x3ed4dc='autoBattleUseSkills';this['addCommand'](_0x5ec1c9,_0x3ed4dc);}else _0x46e03a['Damage']['PopupPosition']=_0x3341c8(0x5f5);}_0x46e03a[_0x3341c8(0x9ef)][_0x3341c8(0x6d2)]===undefined&&(_0x46e03a[_0x3341c8(0x9ef)][_0x3341c8(0x6d2)]=![]),_0x46e03a[_0x3341c8(0x337)][_0x3341c8(0x6d2)]===undefined&&(_0x46e03a['Enemy']['SmoothImage']=!![]),_0x46e03a[_0x3341c8(0x9ef)]['PrioritySortActive']===undefined&&(_0x3341c8(0x464)!=='AYWMb'?_0x46e03a[_0x3341c8(0x9ef)][_0x3341c8(0x143)]=![]:this[_0x3341c8(0x56b)](_0x3341c8(0x2ed),_0x6328e6)),_0x46e03a[_0x3341c8(0x9ef)][_0x3341c8(0x909)]===undefined&&(_0x46e03a[_0x3341c8(0x9ef)][_0x3341c8(0x909)]=!![]);},VisuMZ[_0x164fcd(0x4b8)]={},Scene_Boot[_0x164fcd(0x2bf)]['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0x198aaa=_0x164fcd;for(const _0x140a11 of VisuMZ[_0x198aaa(0xb36)][_0x198aaa(0x1de)]['Damage'][_0x198aaa(0x721)]){if(!_0x140a11)continue;const _0x51f36e=_0x140a11[_0x198aaa(0xb88)]['toUpperCase']()[_0x198aaa(0xab7)]();VisuMZ[_0x198aaa(0x4b8)][_0x51f36e]=_0x140a11;}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x58d)]={},Scene_Boot[_0x164fcd(0x2bf)][_0x164fcd(0x72e)]=function(){const _0x458521=_0x164fcd,_0x41bb6c=VisuMZ[_0x458521(0xb36)][_0x458521(0x58d)],_0x6cf10c='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0x111228=[['Pre',_0x458521(0x6c3)],[_0x458521(0x4bc),_0x458521(0x8d3)]],_0x5dda8b=[[_0x458521(0x6c8),_0x458521(0x9c5)],[_0x458521(0x217),'JS\x20%1DAMAGE\x20%2']],_0x5c5e35=[['',''],[_0x458521(0x8a6),'AS\x20USER'],['AsTarget',_0x458521(0x22c)]];for(const _0x273c34 of _0x5dda8b){if(_0x458521(0xbfd)!=='wxPQq')for(const _0x5ea3cb of _0x5c5e35){if('Bklap'===_0x458521(0x1e2))_0x150b33[_0x458521(0xb36)][_0x458521(0x363)]['call'](this);else for(const _0x5dd180 of _0x111228){const _0x79579c=_0x273c34[0x0][_0x458521(0x272)](_0x5dd180[0x0],_0x5ea3cb[0x0]),_0x48ec8a=_0x273c34[0x1][_0x458521(0x272)](_0x5dd180[0x1],_0x5ea3cb[0x1])[_0x458521(0xab7)](),_0x1c0649=new RegExp(_0x6cf10c['format'](_0x48ec8a),'i');_0x41bb6c[_0x79579c]=_0x1c0649;}}else{if(_0x243ba3>_0x45d3f8[_0x458521(0x6ab)])_0x2d2008=![];if(_0x5ee6e9<_0x9fcb25['_baseX'])_0x16d13a=!![];}}const _0x3a7b0=[[_0x458521(0x6d9),_0x458521(0x8c3)],[_0x458521(0x8cb),_0x458521(0x50c)]];for(const _0x43d9ea of _0x3a7b0){for(const _0x2df653 of _0x111228){const _0x3746e9=_0x43d9ea[0x0][_0x458521(0x272)](_0x2df653[0x0]),_0x83f464=_0x43d9ea[0x1]['format'](_0x2df653[0x1]),_0x1678f8=new RegExp(_0x6cf10c['format'](_0x83f464),'i');_0x41bb6c[_0x3746e9]=_0x1678f8;}}const _0x5cedbb=[[_0x458521(0x674),_0x458521(0x6a8)],[_0x458521(0x479),'JS\x20%1END\x20BATTLE'],[_0x458521(0x6ac),_0x458521(0xadf)],['BattleDefeatJS',_0x458521(0x3b6)],[_0x458521(0xa65),_0x458521(0x4a0)],['EscapeFailureJS',_0x458521(0x52b)],[_0x458521(0xb06),_0x458521(0x59a)],[_0x458521(0x254),_0x458521(0x1eb)],['%1RegenerateJS',_0x458521(0x945)]];for(const _0x363790 of _0x5cedbb){for(const _0x1a6f42 of _0x111228){const _0x3936c7=_0x363790[0x0][_0x458521(0x272)](_0x1a6f42[0x0]),_0x565a76=_0x363790[0x1]['format'](_0x1a6f42[0x1]),_0x5e9b0d=new RegExp(_0x6cf10c[_0x458521(0x272)](_0x565a76),'i');_0x41bb6c[_0x3936c7]=_0x5e9b0d;}}},Scene_Boot[_0x164fcd(0x2bf)]['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x1889a4=_0x164fcd,_0x2d5b59=$dataSkills[_0x1889a4(0x395)]($dataItems);for(const _0x4993aa of _0x2d5b59){if(!_0x4993aa)continue;VisuMZ[_0x1889a4(0xb36)][_0x1889a4(0xaed)](_0x4993aa);}},Scene_Boot[_0x164fcd(0x2bf)][_0x164fcd(0xaf9)]=function(){const _0x3133b9=_0x164fcd,_0x50d25a=$dataActors[_0x3133b9(0x395)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x5bc6af of _0x50d25a){if(_0x3133b9(0x14e)==='pxddR'){if(!_0x5bc6af)continue;VisuMZ[_0x3133b9(0xb36)]['Parse_Notetags_TraitObjects'](_0x5bc6af);}else _0x313796['prototype'][_0x3133b9(0x4ec)]['call'](this);}},Scene_Boot[_0x164fcd(0x2bf)][_0x164fcd(0xcfc)]=function(){const _0x262392=_0x164fcd,_0x5c48dd=VisuMZ[_0x262392(0xb36)]['Settings']['Mechanics'][_0x262392(0x591)],_0x2844ee=[];for(const _0x5ddcbc of _0x5c48dd){if(_0x262392(0x4be)==='IvQED'){const _0x59fe0a=$dataTroops[_0x5ddcbc];if(_0x59fe0a)_0x2844ee[_0x262392(0x56b)](JsonEx[_0x262392(0x835)](_0x59fe0a));}else{const _0x53e95f=_0x47354a(_0x29b1a6['$1'])['trim'](),_0x24fd4e=_0x44169f(_0x2f063b['$2']);_0x24847b[_0x53e95f]=_0x24fd4e,_0x252a3a+=_0x24fd4e;}}for(const _0x2147f3 of $dataTroops){if(!_0x2147f3)continue;for(const _0x3bc961 of _0x2844ee){if(_0x262392(0x1d8)===_0x262392(0x651))_0x445963[_0x262392(0xb36)][_0x262392(0xc61)]['call'](this),this['y']=_0x359ee1[_0x262392(0x5e0)]*0xa,this[_0x262392(0x70c)]()&&this['openBattleActorWindow']();else{if(_0x3bc961['id']===_0x2147f3['id'])continue;_0x2147f3[_0x262392(0xbca)]=_0x2147f3[_0x262392(0xbca)][_0x262392(0x395)](_0x3bc961[_0x262392(0xbca)]);}}}},Scene_Boot[_0x164fcd(0x2bf)][_0x164fcd(0x9b9)]=function(){const _0xc4b985=_0x164fcd,_0xb5abb1=VisuMZ[_0xc4b985(0xb36)][_0xc4b985(0x1de)][_0xc4b985(0x514)];if(_0xb5abb1[_0xc4b985(0xb8f)]>0x0&&$dataCommonEvents[_0xb5abb1[_0xc4b985(0xb8f)]]){const _0x389ac8=$dataCommonEvents[_0xb5abb1['BattleStartEvent']],_0x5abebb=_0x389ac8['list']['length']-0x2,_0x3c332d=_0x389ac8['list'][_0x5abebb];if(_0x3c332d&&_0x3c332d[_0xc4b985(0x641)]!==0xe6){const _0x7c9282={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x45a95a=_0x389ac8[_0xc4b985(0xa4e)][_0xc4b985(0xa22)]();_0x389ac8['list']['unshift'](_0x7c9282),_0x389ac8[_0xc4b985(0xa4e)]['unshift'](_0x45a95a);}}},Scene_Boot[_0x164fcd(0x2bf)][_0x164fcd(0x4f3)]=function(){const _0x356504=_0x164fcd;VisuMZ[_0x356504(0xb36)]['CreateCommonEventKeys'](),VisuMZ[_0x356504(0xb36)][_0x356504(0xb86)]($dataSkills),VisuMZ['BattleCore'][_0x356504(0xb86)]($dataItems);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x48b)]=function(){const _0xa2952e=_0x164fcd;VisuMZ[_0xa2952e(0xb36)][_0xa2952e(0x1b0)]={};for(const _0x3e6ad6 of $dataCommonEvents){if(!_0x3e6ad6)continue;if(_0x3e6ad6['name'][_0xa2952e(0xa5d)](/\[(.*)\]/i)){let _0x181fa6=String(RegExp['$1'])['replace'](/,/g,'')[_0xa2952e(0x7e1)]()['trim']();VisuMZ[_0xa2952e(0xb36)][_0xa2952e(0x1b0)][_0x181fa6]=_0x3e6ad6['id'];}}},VisuMZ[_0x164fcd(0xb36)]['BindCommonEventKeysForGroup']=function(_0x447f5a){const _0x57a6fa=_0x164fcd;for(const _0x335271 of _0x447f5a){if(_0x57a6fa(0xaea)===_0x57a6fa(0xaea)){if(!_0x335271)continue;VisuMZ[_0x57a6fa(0xb36)][_0x57a6fa(0x697)](_0x335271);}else _0x586edc[_0x57a6fa(0x3a2)](_0x57a6fa(0x1fc));}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x697)]=function(_0x57bfee){const _0x3cc717=_0x164fcd;if(!_0x57bfee)return;if(!_0x57bfee[_0x3cc717(0x5f9)])return;VisuMZ[_0x3cc717(0xb36)][_0x3cc717(0x1b0)]=VisuMZ[_0x3cc717(0xb36)][_0x3cc717(0x1b0)]||{};const _0x1a8b22=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0xb3f4cd=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x59eddf=[];const _0x542c3e=_0x57bfee[_0x3cc717(0x9ea)][_0x3cc717(0xa5d)](_0x1a8b22);if(_0x542c3e){if(_0x3cc717(0xce2)===_0x3cc717(0x3f7))return _0x1442cb[_0x3cc717(0xb36)][_0x3cc717(0x1de)][_0x3cc717(0x9a3)][_0x3cc717(0x31b)];else{for(const _0x21eb21 of _0x542c3e){_0x21eb21[_0x3cc717(0xa5d)](_0x1a8b22);const _0x538bb8=String(RegExp['$1'])['split'](',')[_0x3cc717(0xa98)](_0x176e12=>String(_0x176e12)[_0x3cc717(0x7e1)]()['trim']());_0x59eddf=_0x59eddf[_0x3cc717(0x395)](_0x538bb8);}!_0x57bfee['note'][_0x3cc717(0xa5d)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x57bfee['note']+=_0x3cc717(0x977));;}}if(_0x57bfee[_0x3cc717(0x9ea)][_0x3cc717(0xa5d)](_0xb3f4cd)){const _0x43955c=String(RegExp['$1'])[_0x3cc717(0x77e)](/[\r\n]+/)[_0x3cc717(0xa98)](_0x5970f2=>String(_0x5970f2)[_0x3cc717(0x7e1)]()[_0x3cc717(0xab7)]());_0x59eddf=_0x59eddf['concat'](_0x43955c);if(!_0x57bfee[_0x3cc717(0x9ea)][_0x3cc717(0xa5d)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x3cc717(0x95e)!==_0x3cc717(0x95e)){_0xabb51b[_0x3cc717(0x2bf)]['updateBitmap'][_0x3cc717(0xa10)](this);const _0x5df307=this[_0x3cc717(0x41e)][_0x3cc717(0x4f5)]();this[_0x3cc717(0x849)]!==_0x5df307&&(this['_battlerName']=_0x5df307,this[_0x3cc717(0x35c)][_0x3cc717(0xcf5)]=_0x2f56b5[_0x3cc717(0x36b)](_0x5df307)),this['_mainSprite']&&this[_0x3cc717(0x35c)][_0x3cc717(0xcf5)]&&this[_0x3cc717(0x7f9)]&&(this[_0x3cc717(0x35c)]['bitmap'][_0x3cc717(0x225)]!==this[_0x3cc717(0x7f9)][_0x3cc717(0xcdf)]()&&(this['_mainSprite']['bitmap']['smooth']=this['_battler'][_0x3cc717(0xcdf)]()));}else _0x57bfee['note']+=_0x3cc717(0x977);};}for(const _0x52ca01 of _0x59eddf){if(_0x3cc717(0x8e5)!==_0x3cc717(0x8e5))_0x2fa0d5+=(_0x1925c8[_0x3cc717(0xa79)]()?-0x1:0x1)*_0x979373[_0x3cc717(0x9db)]()/0x2;else{if(VisuMZ[_0x3cc717(0xb36)][_0x3cc717(0x1b0)][_0x52ca01]){const _0x91dd9e=VisuMZ[_0x3cc717(0xb36)][_0x3cc717(0x1b0)][_0x52ca01],_0x22db88={'code':0x2c,'dataId':_0x91dd9e,'value1':0x1,'value2':0x0};_0x57bfee[_0x3cc717(0x5f9)][_0x3cc717(0x56b)](_0x22db88);}}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_jsFunctions']=function(){const _0x264bbf=_0x164fcd,_0x3c676c=$dataSkills[_0x264bbf(0x395)]($dataItems);for(const _0x2c2d89 of _0x3c676c){if('sRYEy'===_0x264bbf(0x7a9)){if(!_0x2c2d89)continue;VisuMZ[_0x264bbf(0xb36)][_0x264bbf(0x75c)](_0x2c2d89);}else return this[_0x264bbf(0xcdd)]()['name']!=='';}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x94b)]=VisuMZ['ParseActorNotetags'],VisuMZ[_0x164fcd(0x94b)]=function(_0x54bb02){const _0x4e87dc=_0x164fcd;if(VisuMZ[_0x4e87dc(0xb36)]['ParseActorNotetags']){if(_0x4e87dc(0x36e)!==_0x4e87dc(0x581))VisuMZ[_0x4e87dc(0xb36)][_0x4e87dc(0x94b)][_0x4e87dc(0xa10)](this,_0x54bb02);else return _0x458919[_0x4e87dc(0xbe6)]()['aliveMembers']()['filter'](_0xb611e6=>_0xb611e6!==_0x564533);}VisuMZ[_0x4e87dc(0xb36)][_0x4e87dc(0xc4e)](_0x54bb02);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x3f3)]=VisuMZ['ParseClassNotetags'],VisuMZ[_0x164fcd(0x3f3)]=function(_0x1fa726){const _0x3bf95=_0x164fcd;if(VisuMZ[_0x3bf95(0xb36)][_0x3bf95(0x3f3)]){if(_0x3bf95(0x3c2)!==_0x3bf95(0x3c2)){if(this[_0x3bf95(0x48d)]['loop'])this['_pattern']=(this[_0x3bf95(0xb0b)]+0x1)%0x4;else this[_0x3bf95(0xb0b)]<0x2?this[_0x3bf95(0xb0b)]++:this[_0x3bf95(0x25e)]();this[_0x3bf95(0x43d)]=0x0;}else VisuMZ[_0x3bf95(0xb36)][_0x3bf95(0x3f3)][_0x3bf95(0xa10)](this,_0x1fa726);}VisuMZ[_0x3bf95(0xb36)][_0x3bf95(0xc4e)](_0x1fa726);},VisuMZ[_0x164fcd(0xb36)]['ParseSkillNotetags']=VisuMZ['ParseSkillNotetags'],VisuMZ[_0x164fcd(0xbc0)]=function(_0x4224f8){const _0x3cd88c=_0x164fcd;VisuMZ[_0x3cd88c(0xb36)]['ParseSkillNotetags']&&VisuMZ[_0x3cd88c(0xb36)]['ParseSkillNotetags']['call'](this,_0x4224f8),VisuMZ['BattleCore'][_0x3cd88c(0xaed)](_0x4224f8),VisuMZ['BattleCore'][_0x3cd88c(0x75c)](_0x4224f8);},VisuMZ[_0x164fcd(0xb36)]['ParseItemNotetags']=VisuMZ['ParseItemNotetags'],VisuMZ[_0x164fcd(0x68d)]=function(_0x2e871b){const _0x573d5c=_0x164fcd;if(VisuMZ[_0x573d5c(0xb36)][_0x573d5c(0x68d)]){if(_0x573d5c(0x7c3)!==_0x573d5c(0xd12))VisuMZ[_0x573d5c(0xb36)]['ParseItemNotetags'][_0x573d5c(0xa10)](this,_0x2e871b);else for(const _0x47d7cb of this[_0x573d5c(0x932)]){_0x47d7cb['x']+=_0x3c4b18[_0x573d5c(0x83e)]*_0x383300,_0x47d7cb['y']+=_0x4e1a10['PopupShiftY'];}}VisuMZ[_0x573d5c(0xb36)][_0x573d5c(0xaed)](_0x2e871b),VisuMZ[_0x573d5c(0xb36)][_0x573d5c(0x75c)](_0x2e871b);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x7db)]=VisuMZ['ParseWeaponNotetags'],VisuMZ[_0x164fcd(0x7db)]=function(_0x585a6c){const _0x5b9ef1=_0x164fcd;if(VisuMZ[_0x5b9ef1(0xb36)][_0x5b9ef1(0x7db)]){if(_0x5b9ef1(0x8ff)==='eoFTt'){if(_0x12e9b7[_0x5b9ef1(0x8a7)](_0x195c6a))return!![];}else VisuMZ[_0x5b9ef1(0xb36)]['ParseWeaponNotetags'][_0x5b9ef1(0xa10)](this,_0x585a6c);}VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x585a6c);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xc08)]=VisuMZ[_0x164fcd(0xc08)],VisuMZ[_0x164fcd(0xc08)]=function(_0x37282a){const _0x8959d3=_0x164fcd;VisuMZ[_0x8959d3(0xb36)]['ParseArmorNotetags']&&VisuMZ[_0x8959d3(0xb36)][_0x8959d3(0xc08)][_0x8959d3(0xa10)](this,_0x37282a),VisuMZ[_0x8959d3(0xb36)]['Parse_Notetags_TraitObjects'](_0x37282a);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x579)]=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x164fcd(0x579)]=function(_0x1dbc6d){const _0x14a6d9=_0x164fcd;VisuMZ[_0x14a6d9(0xb36)][_0x14a6d9(0x579)]&&VisuMZ[_0x14a6d9(0xb36)]['ParseEnemyNotetags'][_0x14a6d9(0xa10)](this,_0x1dbc6d),VisuMZ[_0x14a6d9(0xb36)][_0x14a6d9(0xc4e)](_0x1dbc6d);},VisuMZ['BattleCore'][_0x164fcd(0xc8b)]=VisuMZ['ParseStateNotetags'],VisuMZ['ParseStateNotetags']=function(_0x361df0){const _0x46e4ca=_0x164fcd;if(VisuMZ[_0x46e4ca(0xb36)][_0x46e4ca(0xc8b)]){if(_0x46e4ca(0x440)!==_0x46e4ca(0x190))VisuMZ[_0x46e4ca(0xb36)]['ParseStateNotetags']['call'](this,_0x361df0);else{return;this[_0x46e4ca(0x804)]&&(this[_0x46e4ca(0x804)]['x']=this['x'],this['_effectsContainer']['y']=this['y']),this[_0x46e4ca(0x6ee)]&&(this[_0x46e4ca(0x6ee)]['x']=this['x'],this[_0x46e4ca(0x6ee)]['y']=this['y']);}}VisuMZ[_0x46e4ca(0xb36)][_0x46e4ca(0xc4e)](_0x361df0);},VisuMZ['BattleCore'][_0x164fcd(0xaed)]=function(_0x45a47b){const _0xc73c2b=_0x164fcd,_0x25a03f=[_0xc73c2b(0x77b),_0xc73c2b(0xbbb),'PreDamageJS',_0xc73c2b(0x253),_0xc73c2b(0x495),_0xc73c2b(0x81d),_0xc73c2b(0x251),'PostEndActionJS'];for(const _0x465fa8 of _0x25a03f){if('FGAuL'!==_0xc73c2b(0x616)){const _0x99119d=this['battler']();if(_0x99119d)_0x99119d[_0xc73c2b(0xaeb)](_0x3086c4);}else VisuMZ['BattleCore'][_0xc73c2b(0xb3d)](_0x45a47b,_0x465fa8);}const _0x49b550=_0x45a47b[_0xc73c2b(0x9ea)];_0x49b550[_0xc73c2b(0xa5d)](/<ALWAYS CRITICAL/i)&&(_0x45a47b[_0xc73c2b(0x597)][_0xc73c2b(0xbf6)]=!![]);if(_0x49b550['match'](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)){if('ppVNA'===_0xc73c2b(0x81b))_0x45a47b[_0xc73c2b(0x9ab)]=Math[_0xc73c2b(0xc92)](0x1,Number(RegExp['$1']));else return this[_0xc73c2b(0xb85)]();}_0x49b550['match'](/<TARGET:[ ](.*)>/i)&&('pUdmt'==='mLMJP'?this[_0xc73c2b(0x1d5)](_0xdfee5):_0x45a47b[_0xc73c2b(0x68c)]=String(RegExp['$1'])['toUpperCase']()['trim']());},VisuMZ['BattleCore']['Parse_Notetags_TraitObjects']=function(_0x4eb185){const _0x8f9d08=_0x164fcd,_0x2abf01=[_0x8f9d08(0x9d1),_0x8f9d08(0xb49),_0x8f9d08(0x8ed),'PostDamageAsUserJS',_0x8f9d08(0x3d4),_0x8f9d08(0x45c),'PreDamageAsTargetJS',_0x8f9d08(0x3e1),_0x8f9d08(0x495),_0x8f9d08(0x81d),_0x8f9d08(0x251),_0x8f9d08(0x12c),_0x8f9d08(0x544),_0x8f9d08(0x56e),_0x8f9d08(0x95d),_0x8f9d08(0x63f),_0x8f9d08(0x6ac),_0x8f9d08(0x174),_0x8f9d08(0xa65),_0x8f9d08(0x9d9),'PreStartTurnJS',_0x8f9d08(0x911),_0x8f9d08(0x306),_0x8f9d08(0xc40),_0x8f9d08(0x322),'PostRegenerateJS'];for(const _0x19b59f of _0x2abf01){VisuMZ['BattleCore'][_0x8f9d08(0xb3d)](_0x4eb185,_0x19b59f);}},VisuMZ['BattleCore']['Parse_Notetags_Targets']=function(_0x2a8321){const _0x10dc3a=_0x164fcd,_0x49231c=_0x2a8321['note'];if(_0x49231c[_0x10dc3a(0xa5d)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x4f5451=String(RegExp['$1']),_0x37b0bd=VisuMZ[_0x10dc3a(0xb36)][_0x10dc3a(0x169)](_0x2a8321,_0x10dc3a(0x7cc));VisuMZ['BattleCore'][_0x10dc3a(0x163)](_0x4f5451,_0x37b0bd);}if(_0x49231c[_0x10dc3a(0xa5d)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if('ZbjWB'===_0x10dc3a(0xc13)){const _0x1cc25f=String(RegExp['$1']),_0x3da107=VisuMZ[_0x10dc3a(0xb36)][_0x10dc3a(0x169)](_0x2a8321,_0x10dc3a(0x171));VisuMZ[_0x10dc3a(0xb36)][_0x10dc3a(0x67a)](_0x1cc25f,_0x3da107);}else this[_0x10dc3a(0x958)][_0x10dc3a(0xc84)]=_0x28e40f[_0x10dc3a(0x2bf)][_0x10dc3a(0x961)][_0x10dc3a(0xa10)](this);}},VisuMZ['BattleCore']['JS']={},VisuMZ['BattleCore'][_0x164fcd(0xb3d)]=function(_0x10b873,_0x53c60a){const _0x17eb57=_0x164fcd,_0x2efce5=_0x10b873[_0x17eb57(0x9ea)];if(_0x2efce5['match'](VisuMZ[_0x17eb57(0xb36)][_0x17eb57(0x58d)][_0x53c60a])){const _0x186dc7=RegExp['$1'],_0x4e7e37=_0x17eb57(0x960)[_0x17eb57(0x272)](_0x186dc7),_0x578cee=VisuMZ[_0x17eb57(0xb36)][_0x17eb57(0x169)](_0x10b873,_0x53c60a);VisuMZ['BattleCore']['JS'][_0x578cee]=new Function(_0x4e7e37);}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x169)]=function(_0x52b428,_0x18bfe9){const _0xdc6016=_0x164fcd;if(VisuMZ[_0xdc6016(0x169)])return VisuMZ[_0xdc6016(0x169)](_0x52b428,_0x18bfe9);let _0x25e94f='';if($dataActors[_0xdc6016(0x893)](_0x52b428))_0x25e94f=_0xdc6016(0x9a5)[_0xdc6016(0x272)](_0x52b428['id'],_0x18bfe9);if($dataClasses['includes'](_0x52b428))_0x25e94f=_0xdc6016(0x2ec)[_0xdc6016(0x272)](_0x52b428['id'],_0x18bfe9);if($dataSkills[_0xdc6016(0x893)](_0x52b428))_0x25e94f=_0xdc6016(0x4cb)[_0xdc6016(0x272)](_0x52b428['id'],_0x18bfe9);if($dataItems[_0xdc6016(0x893)](_0x52b428))_0x25e94f=_0xdc6016(0x2be)[_0xdc6016(0x272)](_0x52b428['id'],_0x18bfe9);if($dataWeapons[_0xdc6016(0x893)](_0x52b428))_0x25e94f='Weapon-%1-%2'[_0xdc6016(0x272)](_0x52b428['id'],_0x18bfe9);if($dataArmors[_0xdc6016(0x893)](_0x52b428))_0x25e94f=_0xdc6016(0xcdc)[_0xdc6016(0x272)](_0x52b428['id'],_0x18bfe9);if($dataEnemies[_0xdc6016(0x893)](_0x52b428))_0x25e94f='Enemy-%1-%2'['format'](_0x52b428['id'],_0x18bfe9);if($dataStates[_0xdc6016(0x893)](_0x52b428))_0x25e94f=_0xdc6016(0x185)[_0xdc6016(0x272)](_0x52b428['id'],_0x18bfe9);return _0x25e94f;},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x163)]=function(_0x25a88c,_0x2066df){const _0x4d82b2=_0x164fcd,_0x3a57fb='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x4d82b2(0x272)](_0x25a88c);VisuMZ[_0x4d82b2(0xb36)]['JS'][_0x2066df]=new Function(_0x3a57fb);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x67a)]=function(_0x4c2974,_0x137fc0){const _0x373abc=_0x164fcd,_0x35843c=_0x373abc(0x226)['format'](_0x4c2974);VisuMZ[_0x373abc(0xb36)]['JS'][_0x137fc0]=new Function(_0x35843c);},TextManager['autoBattle']=VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x1de)]['PartyCmd'][_0x164fcd(0x61c)],TextManager['autoBattleStart']=VisuMZ[_0x164fcd(0xb36)]['Settings']['AutoBattle'][_0x164fcd(0x132)],TextManager[_0x164fcd(0x9fa)]=VisuMZ[_0x164fcd(0xb36)]['Settings']['AutoBattle'][_0x164fcd(0xb81)],TextManager[_0x164fcd(0xa2c)]=VisuMZ['BattleCore'][_0x164fcd(0x1de)][_0x164fcd(0x83d)][_0x164fcd(0xb88)],ColorManager['getColor']=function(_0x4b5062){const _0x1f9a69=_0x164fcd;_0x4b5062=String(_0x4b5062);if(_0x4b5062[_0x1f9a69(0xa5d)](/#(.*)/i))return _0x1f9a69(0x15e)['format'](String(RegExp['$1']));else{if(_0x1f9a69(0x8ae)==='PTggr')_0x5a06a9=[_0x1f9a69(0xbc1),'swing',_0x1f9a69(0x39d)][_0x1dbb0f[_0x1f9a69(0xaa3)]]||'swing';else return this['textColor'](Number(_0x4b5062));}},DataManager[_0x164fcd(0x46c)]=function(_0x3bfdaa){const _0x3b6b11=_0x164fcd;if(_0x3bfdaa[_0x3b6b11(0x9ea)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){if('qFBYN'!==_0x3b6b11(0x7e8)){const _0x15343d=String(RegExp['$1'])[_0x3b6b11(0x7e1)]()[_0x3b6b11(0xab7)]();if(_0x15343d===_0x3b6b11(0x7ad))return _0x3b6b11(0x7ad);if(VisuMZ['DamageStyles'][_0x15343d])return _0x15343d;}else{if(_0x5ce314)_0x2508e0['_subject'][_0x3b6b11(0xae0)](![]);const _0x439cd5=_0x7684a5[0x0];_0x3ac3b0[_0x3b6b11(0x1ee)](_0x439cd5,_0x47ee41);}}const _0x1a1c7a=VisuMZ['BattleCore'][_0x3b6b11(0x1de)][_0x3b6b11(0x1ce)][_0x3b6b11(0x1b3)][_0x3b6b11(0x7e1)]()[_0x3b6b11(0xab7)]();if(VisuMZ[_0x3b6b11(0x4b8)][_0x1a1c7a])return _0x1a1c7a;return _0x3b6b11(0x7ad);},DataManager[_0x164fcd(0xabb)]=function(_0x4c6fff){const _0x1a1e6c=_0x164fcd;_0x4c6fff=_0x4c6fff['toUpperCase']()[_0x1a1e6c(0xab7)](),this[_0x1a1e6c(0x6cc)]=this['_stypeIDs']||{};if(this[_0x1a1e6c(0x6cc)][_0x4c6fff])return this[_0x1a1e6c(0x6cc)][_0x4c6fff];for(let _0x11e793=0x1;_0x11e793<0x64;_0x11e793++){if(!$dataSystem['skillTypes'][_0x11e793])continue;let _0x4017c8=$dataSystem[_0x1a1e6c(0xb70)][_0x11e793][_0x1a1e6c(0x7e1)]()[_0x1a1e6c(0xab7)]();_0x4017c8=_0x4017c8[_0x1a1e6c(0x6db)](/\x1I\[(\d+)\]/gi,''),_0x4017c8=_0x4017c8[_0x1a1e6c(0x6db)](/\\I\[(\d+)\]/gi,''),this[_0x1a1e6c(0x6cc)][_0x4017c8]=_0x11e793;}return this[_0x1a1e6c(0x6cc)][_0x4c6fff]||0x0;},DataManager[_0x164fcd(0xb69)]=function(_0x3b1d72){const _0xecc34=_0x164fcd;_0x3b1d72=_0x3b1d72[_0xecc34(0x7e1)]()[_0xecc34(0xab7)](),this[_0xecc34(0xbc5)]=this[_0xecc34(0xbc5)]||{};if(this[_0xecc34(0xbc5)][_0x3b1d72])return this[_0xecc34(0xbc5)][_0x3b1d72];for(const _0x239f59 of $dataSkills){if('NScdP'==='NScdP'){if(!_0x239f59)continue;this[_0xecc34(0xbc5)][_0x239f59[_0xecc34(0x16d)]['toUpperCase']()[_0xecc34(0xab7)]()]=_0x239f59['id'];}else this['addWeaponSwapCommand'](!![]);}return this[_0xecc34(0xbc5)][_0x3b1d72]||0x0;},DataManager[_0x164fcd(0x411)]=function(_0x4b8adb){const _0x6b30b=_0x164fcd;_0x4b8adb=_0x4b8adb['toUpperCase']()[_0x6b30b(0xab7)](),this[_0x6b30b(0xac6)]=this['_enemyIDs']||{};if(this['_enemyIDs'][_0x4b8adb])return this[_0x6b30b(0xac6)][_0x4b8adb];for(const _0x5ad63b of $dataEnemies){if(!_0x5ad63b)continue;this[_0x6b30b(0xac6)][_0x5ad63b[_0x6b30b(0x16d)]['toUpperCase']()['trim']()]=_0x5ad63b['id'];}return this['_enemyIDs'][_0x4b8adb]||0x0;},DataManager[_0x164fcd(0xcc0)]=function(_0x5c2225){const _0x2ba3d6=_0x164fcd;_0x5c2225=_0x5c2225[_0x2ba3d6(0x7e1)]()[_0x2ba3d6(0xab7)](),this[_0x2ba3d6(0x204)]=this['_wtypeIDs']||{};if(this[_0x2ba3d6(0x204)][_0x5c2225])return this[_0x2ba3d6(0x204)][_0x5c2225];for(let _0x1446d9=0x1;_0x1446d9<0x64;_0x1446d9++){if(_0x2ba3d6(0x129)!=='UMReh'){if(_0x532e0a[_0x2ba3d6(0x6e4)]()[_0x2ba3d6(0x7d7)]>0x0)return!![];if(_0xa0e000[_0x2ba3d6(0x6e4)]()[_0x2ba3d6(0x627)]>0x0)return!![];this[_0x2ba3d6(0xa88)]='';}else{if(!$dataSystem[_0x2ba3d6(0xc79)][_0x1446d9])continue;let _0x2a4b50=$dataSystem[_0x2ba3d6(0xc79)][_0x1446d9][_0x2ba3d6(0x7e1)]()['trim']();_0x2a4b50=_0x2a4b50[_0x2ba3d6(0x6db)](/\x1I\[(\d+)\]/gi,''),_0x2a4b50=_0x2a4b50['replace'](/\\I\[(\d+)\]/gi,''),this['_wtypeIDs'][_0x2a4b50]=_0x1446d9;}}return this[_0x2ba3d6(0x204)][_0x2ba3d6(0x44e)]=0x0,this[_0x2ba3d6(0x204)][_0x5c2225]||0x0;},DataManager[_0x164fcd(0x530)]=function(_0x3b1ec6){const _0x311d6d=_0x164fcd,_0x1b759e=_0x311d6d(0x478);let _0x2e5ce2=_0x3b1ec6[_0x311d6d(0xc24)],_0x7ebdb9=_0x3b1ec6[_0x311d6d(0x16d)];const _0x16c8cf=_0x3b1ec6[_0x311d6d(0x9ea)];return _0x16c8cf['match'](/<DISPLAY ICON: (\d+)>/i)&&(_0x311d6d(0xa47)!==_0x311d6d(0xa47)?!_0x1805bd['isDeathStateAffected']()&&(_0x2576f7[_0x311d6d(0x30e)](_0x313021[0x2],_0x3f2ad6[0x3]),_0x4e0490['forceAction'](_0xe4dba2)):_0x2e5ce2=Number(RegExp['$1'])),_0x16c8cf[_0x311d6d(0xa5d)](/<DISPLAY TEXT: (.*)>/i)&&(_0x311d6d(0x21d)!==_0x311d6d(0x21d)?_0x3fb02b[_0x311d6d(0x56b)](this[_0x311d6d(0xb4f)]()[_0x311d6d(0x148)]()):_0x7ebdb9=String(RegExp['$1'])),_0x1b759e[_0x311d6d(0x272)](_0x2e5ce2,_0x7ebdb9);},DataManager[_0x164fcd(0xc9f)]=function(_0x1d0cbf){const _0x5413dd=_0x164fcd;if(_0x1d0cbf['note']['match'](/<COMMAND TEXT: (.*)>/i))return String(RegExp['$1']);else{if('UwUii'!==_0x5413dd(0x8f5))_0x122d34[_0x5413dd(0xae5)][_0x5413dd(0xb5c)]<1.15&&(_0x5f3119(_0x40577c[_0x5413dd(0x272)](_0x5413dd(0x1a7))),_0x2fca12[_0x5413dd(0x7f7)]());else return _0x1d0cbf[_0x5413dd(0x16d)];}},DataManager[_0x164fcd(0xb51)]=function(_0x12cf62){const _0x34cfcd=_0x164fcd;return _0x12cf62[_0x34cfcd(0x9ea)][_0x34cfcd(0xa5d)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x12cf62[_0x34cfcd(0xc24)];},DataManager[_0x164fcd(0x2b7)]=function(_0x5ef809){const _0x2d096e=_0x164fcd,_0x533b46=$dataEnemies[_0x5ef809];if(_0x533b46){if(_0x533b46['note'][_0x2d096e(0xa5d)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x4e4b30=String(RegExp['$1'])[_0x2d096e(0x77e)](/[\r\n]+/)['remove'](''),_0x1a5781=this[_0x2d096e(0x9dc)](_0x4e4b30);_0x5ef809=this[_0x2d096e(0x411)](_0x1a5781)||_0x5ef809,_0x5ef809=DataManager[_0x2d096e(0x2b7)](_0x5ef809);}}return _0x5ef809;},DataManager[_0x164fcd(0x9dc)]=function(_0x5aadd1){const _0x57111a=_0x164fcd;let _0x1ea533=0x0;const _0x4799b0={};for(const _0x1a170c of _0x5aadd1){if(_0x1a170c[_0x57111a(0xa5d)](/(.*):[ ](\d+)/i)){if('uSQWu'===_0x57111a(0x3e7)){const _0x4527ff=String(RegExp['$1'])[_0x57111a(0xab7)](),_0x4b31e3=Number(RegExp['$2']);_0x4799b0[_0x4527ff]=_0x4b31e3,_0x1ea533+=_0x4b31e3;}else{let _0x16626d=_0x57111a(0x5bd);if(this['checkCacheKey'](_0x16626d))return this['_cache'][_0x16626d];return this[_0x57111a(0x958)][_0x16626d]=this[_0x57111a(0x422)](this[_0x57111a(0x302)]()),this[_0x57111a(0x958)][_0x16626d];}}else{if(_0x1a170c[_0x57111a(0xa5d)](/(.*):[ ](\d+\.?\d+)/i)){if(_0x57111a(0x9b8)!==_0x57111a(0x57b)){const _0x514942=String(RegExp['$1'])['trim'](),_0x1b9ba6=Number(RegExp['$2']);_0x4799b0[_0x514942]=_0x1b9ba6,_0x1ea533+=_0x1b9ba6;}else{const _0x37f70d=_0x9b4cc1[_0x3ba3c9[_0x57111a(0x9ae)]];if(_0x37f70d&&!_0x1e4bae[_0x57111a(0x893)](_0x37f70d))_0x2579ad[_0x57111a(0x56b)](_0x37f70d);}}else _0x1a170c!==''&&(_0x4799b0[_0x1a170c]=0x1,_0x1ea533++);}}if(_0x1ea533<=0x0)return'';let _0x436d6b=Math[_0x57111a(0xb48)]()*_0x1ea533;for(const _0xf992ed in _0x4799b0){_0x436d6b-=_0x4799b0[_0xf992ed];if(_0x436d6b<=0x0)return _0xf992ed;}return'';},DataManager[_0x164fcd(0xba1)]=function(_0x36b037){const _0xc5fd07=_0x164fcd;if(!_0x36b037)return![];if(!VisuMZ[_0xc5fd07(0xb36)]['Settings'][_0xc5fd07(0x8b1)][_0xc5fd07(0x139)])return![];if(_0x36b037[_0xc5fd07(0x9ea)][_0xc5fd07(0xa5d)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x36b037['note'][_0xc5fd07(0xa5d)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x4fbb22 of _0x36b037[_0xc5fd07(0x5f9)]){if(!_0x4fbb22)continue;if(_0x4fbb22[_0xc5fd07(0x641)]===Game_Action[_0xc5fd07(0x3b4)])return!![];}return![];},DataManager[_0x164fcd(0xa94)]=function(_0x4a1ed8){const _0x5a0ac8=_0x164fcd,_0x118652=$dataTroops[_0x4a1ed8];if(!_0x118652)return'';let _0x521893='';_0x521893+=_0x118652[_0x5a0ac8(0x16d)];for(const _0x232617 of _0x118652[_0x5a0ac8(0xbca)]){if('iaQwv'===_0x5a0ac8(0x814))for(const _0x325986 of _0x232617['list']){_0x5a0ac8(0x6e8)===_0x5a0ac8(0xb9f)?this[_0x5a0ac8(0x313)]=_0x5a0ac8(0x18e):[0x6c,0x198]['includes'](_0x325986[_0x5a0ac8(0x641)])&&(_0x521893+='\x0a',_0x521893+=_0x325986[_0x5a0ac8(0xb98)][0x0]);}else _0x1273b3=(_0x1d8f40+_0x4730bb)/0x2,_0x582d53=-0x1;}return _0x521893;},ConfigManager[_0x164fcd(0x987)]=ConfigManager[_0x164fcd(0x987)]??![],ConfigManager[_0x164fcd(0x206)]=ConfigManager[_0x164fcd(0x206)]??![],ConfigManager[_0x164fcd(0xa2c)]=ConfigManager[_0x164fcd(0xa2c)]??!![],VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x944)]=ConfigManager[_0x164fcd(0x4d2)],ConfigManager[_0x164fcd(0x4d2)]=function(){const _0x594cb1=_0x164fcd,_0x3437ee=VisuMZ['BattleCore'][_0x594cb1(0x944)][_0x594cb1(0xa10)](this);return _0x3437ee[_0x594cb1(0x987)]=this['autoBattleAtStart'],_0x3437ee[_0x594cb1(0x206)]=this[_0x594cb1(0x206)],_0x3437ee[_0x594cb1(0xa2c)]=this[_0x594cb1(0xa2c)],_0x3437ee;},VisuMZ['BattleCore'][_0x164fcd(0x79f)]=ConfigManager['applyData'],ConfigManager['applyData']=function(_0x2a6f03){const _0x529e5f=_0x164fcd;VisuMZ['BattleCore'][_0x529e5f(0x79f)][_0x529e5f(0xa10)](this,_0x2a6f03);_0x529e5f(0x987)in _0x2a6f03?this['autoBattleAtStart']=_0x2a6f03['autoBattleAtStart']:this[_0x529e5f(0x987)]=![];if(_0x529e5f(0x206)in _0x2a6f03)_0x529e5f(0x6f1)!=='XEXfF'?this['_branch'][this[_0x529e5f(0x937)]]=_0xdb9962:this[_0x529e5f(0x206)]=_0x2a6f03['autoBattleUseSkills'];else{if(_0x529e5f(0x314)===_0x529e5f(0x77c)){this['_borderPortraitDuration']=0x14,this[_0x529e5f(0x265)][_0x529e5f(0xcf5)]=_0x229018;_0x48de60['_scene'][_0x529e5f(0x594)]()?(this[_0x529e5f(0x265)]['x']=0x0,this[_0x529e5f(0x4a7)]=_0x57a26a[_0x529e5f(0x405)](_0x54d50a[_0x529e5f(0xab5)]/0x2)):(this[_0x529e5f(0x265)]['x']=this[_0x529e5f(0xab5)],this[_0x529e5f(0x4a7)]=this[_0x529e5f(0xab5)]*0x3/0x4);this[_0x529e5f(0x265)][_0x529e5f(0x4c4)]=0x0,this[_0x529e5f(0x265)]['y']=this['y']+this[_0x529e5f(0x5e0)];const _0x48016b=_0x4895b0[_0x529e5f(0x6ae)]();_0x48016b&&(this[_0x529e5f(0x4a7)]+=_0x48016b['getBattlePortraitOffsetX'](),this[_0x529e5f(0x265)]['y']+=_0x48016b[_0x529e5f(0x7a5)]());}else this[_0x529e5f(0x206)]=![];}if(_0x529e5f(0xa2c)in _0x2a6f03){if(_0x529e5f(0x285)===_0x529e5f(0xcf2)){if(_0x35500b['isSceneBattle']()){const _0x6d759d=this[_0x529e5f(0x921)]();if(_0x6d759d)_0x6d759d[_0x529e5f(0xaeb)](_0x14ff3b);}}else this[_0x529e5f(0xa2c)]=_0x2a6f03['visualHpGauge'];}else this[_0x529e5f(0xa2c)]=!![];},ImageManager[_0x164fcd(0x242)]=ImageManager[_0x164fcd(0x242)]||0x9,ImageManager[_0x164fcd(0x654)]=ImageManager['svActorVertCells']||0x6,VisuMZ['BattleCore'][_0x164fcd(0xa8d)]=BattleManager['setup'],BattleManager[_0x164fcd(0xd03)]=function(_0x1e1e15,_0x1d4928,_0x482ee4){const _0x4e221f=_0x164fcd;VisuMZ[_0x4e221f(0xb36)][_0x4e221f(0xa8d)][_0x4e221f(0xa10)](this,_0x1e1e15,_0x1d4928,_0x482ee4),this[_0x4e221f(0xbe9)]={};},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x246)]=BattleManager[_0x164fcd(0x1be)],BattleManager['initMembers']=function(){const _0x2e1663=_0x164fcd;VisuMZ[_0x2e1663(0xb36)]['BattleManager_initMembers'][_0x2e1663(0xa10)](this),this[_0x2e1663(0x1b5)]=[];},BattleManager[_0x164fcd(0x230)]=function(){const _0x34ea9e=_0x164fcd;if(!SceneManager['isSceneBattle']())return;const _0x288143=SceneManager[_0x34ea9e(0x4c8)]['_statusWindow'];if(_0x288143)_0x288143['requestRefresh']();},BattleManager[_0x164fcd(0xa4f)]=function(){const _0x1a0b31=_0x164fcd;if(BattleManager[_0x1a0b31(0xb52)]())return _0x1a0b31(0xa5b);return'DTB';},BattleManager[_0x164fcd(0x240)]=function(_0x3b7aff){const _0x5d2152=_0x164fcd;return _0x3b7aff=_0x3b7aff[_0x5d2152(0x7e1)]()[_0x5d2152(0xab7)](),this[_0x5d2152(0xa4f)]()===_0x3b7aff;},BattleManager[_0x164fcd(0x25a)]=function(){const _0x33252e=_0x164fcd;return this['isBattleSys'](_0x33252e(0xa03));},BattleManager['isTurnBased']=function(){const _0x159b2e=_0x164fcd;return this[_0x159b2e(0x25a)]();},BattleManager[_0x164fcd(0x3a3)]=function(){const _0x52d0e9=_0x164fcd;return!this[_0x52d0e9(0x5ff)]();},BattleManager[_0x164fcd(0x96f)]=function(){const _0x1a3e12=_0x164fcd;return!this[_0x1a3e12(0x5ff)]()&&!this[_0x1a3e12(0x3a3)]();},BattleManager['getBattlerFromKey']=function(_0x2a984a){const _0x938ce5=_0x164fcd;this[_0x938ce5(0xbe9)]=this[_0x938ce5(0xbe9)]||{};if(this[_0x938ce5(0xbe9)][_0x2a984a]!==undefined)return this['_battlerKeyCache'][_0x2a984a];this[_0x938ce5(0xbe9)][_0x2a984a]=null;const _0x2262d9=this[_0x938ce5(0x2cc)](),_0xccc466=_0x2262d9[_0x938ce5(0x5d9)](_0x2e4bba=>_0x2e4bba[_0x938ce5(0x221)]()===_0x2a984a);if(_0xccc466)this[_0x938ce5(0xbe9)][_0x2a984a]=_0xccc466;return this[_0x938ce5(0xbe9)][_0x2a984a];},Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0x221)]=function(){const _0x59bdd2=_0x164fcd;return'%1-%2'[_0x59bdd2(0x272)](this['isActor']()?_0x59bdd2(0x6ae):_0x59bdd2(0x302),this[_0x59bdd2(0x16d)]());},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x11f)]=function(_0x547a5e){const _0x3b7e3c=_0x164fcd;if(this[_0x3b7e3c(0x6e1)]!=='')return;if(typeof _0x547a5e===_0x3b7e3c(0x2c9))_0x3b7e3c(0x54d)!==_0x3b7e3c(0xc6a)?this[_0x3b7e3c(0x6e1)]=_0x547a5e[_0x3b7e3c(0x790)]()[_0x3b7e3c(0xab7)]():this['isShownOnBattlePortrait']()?_0x15f709[_0x3b7e3c(0x4c8)][_0x3b7e3c(0x8c5)][_0x3b7e3c(0x705)](_0xce2365):(this[_0x3b7e3c(0x664)]()[_0x3b7e3c(0x6de)](_0x2cf6dd),this[_0x3b7e3c(0x932)][_0x3b7e3c(0x494)](_0x2375a8),_0x2159bc[_0x3b7e3c(0xba6)]());else{if('lhPcF'===_0x3b7e3c(0xcfb)){const _0x499631=this[_0x3b7e3c(0x8bb)]()?_0x3b7e3c(0x124):_0x3b7e3c(0x7b5);_0x36078b[_0x3b7e3c(0xd0f)](_0x499631);}else this[_0x3b7e3c(0x6e1)]=_0x547a5e[_0x3b7e3c(0x221)]();}},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x6c9)]=function(){return[this['getSpecificBattlerKeyTarget']()];},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x18c)]=function(){const _0x1d4384=_0x164fcd,_0x29aec4=this['_targetBattlerKey']||'',_0x2e7769=BattleManager[_0x1d4384(0x8ac)](_0x29aec4);if(!_0x2e7769)return this[_0x1d4384(0x520)]();if(!_0x2e7769['isAlive']())this[_0x1d4384(0x520)]();return _0x2e7769;},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x520)]=function(){const _0x3c429d=_0x164fcd,_0x4862f1=this[_0x3c429d(0x6e1)];return _0x4862f1['match'](/ACTOR/i)?this[_0x3c429d(0xbe6)]()[_0x3c429d(0x148)]():this[_0x3c429d(0xb4f)]()[_0x3c429d(0x148)]();},BattleManager['selectedBattlers']=function(){const _0x15a14a=_0x164fcd;return this['allBattleMembers']()['filter'](_0x30b285=>_0x30b285[_0x15a14a(0x956)]());},BattleManager['processBattleCoreJS']=function(_0x4e8a85){const _0x555e84=_0x164fcd;_0x4e8a85==='BattleVictoryJS'&&(_0x555e84(0xbfc)!=='Bkuti'?this[_0x555e84(0x841)]=!![]:(_0x4bea4a+=_0x3abf33,_0x242b49+=_0x1ca9b6[_0x555e84(0x31f)]()?-_0x3a3d89:_0x134cc3)),$gameParty['processBattleCoreJS'](_0x4e8a85),$gameTroop[_0x555e84(0x54f)](_0x4e8a85);},VisuMZ['BattleCore'][_0x164fcd(0x626)]=BattleManager[_0x164fcd(0xcc7)],BattleManager[_0x164fcd(0xcc7)]=function(){const _0x3ef8d2=_0x164fcd;this[_0x3ef8d2(0xb93)]=![],this[_0x3ef8d2(0x9c8)]=ConfigManager['autoBattleAtStart'],this[_0x3ef8d2(0x841)]=![],this['processBattleCoreJS']('PreStartBattleJS'),VisuMZ['BattleCore'][_0x3ef8d2(0x626)][_0x3ef8d2(0xa10)](this),this[_0x3ef8d2(0x54f)](_0x3ef8d2(0x56e));},BattleManager['processPostBattleCommonEvents']=function(_0x171dc2){const _0x2bbda4=_0x164fcd,_0x17f5a8=VisuMZ[_0x2bbda4(0xb36)][_0x2bbda4(0x1de)][_0x2bbda4(0x514)];_0x171dc2!==_0x2bbda4(0x2df)&&_0x17f5a8[_0x2bbda4(0x334)]&&VisuMZ['BattleCore'][_0x2bbda4(0x7dd)](_0x17f5a8[_0x2bbda4(0x334)])&&$gameTemp['reserveCommonEvent'](_0x17f5a8[_0x2bbda4(0x334)]);const _0x184a7f=_0x2bbda4(0xca7)[_0x2bbda4(0x272)](_0x171dc2);_0x17f5a8[_0x184a7f]&&VisuMZ[_0x2bbda4(0xb36)]['CheckMapBattleEventValid'](_0x17f5a8[_0x184a7f])&&$gameTemp[_0x2bbda4(0x933)](_0x17f5a8[_0x184a7f]);},VisuMZ['BattleCore']['BattleManager_checkBattleEnd']=BattleManager[_0x164fcd(0xb17)],BattleManager[_0x164fcd(0xb17)]=function(){const _0x496b19=_0x164fcd;if(this[_0x496b19(0x5af)]==='turn'){if('SWBIh'!==_0x496b19(0x926)){if(!_0x27741f['VisuMZ_3_ActSeqImpact'])return;const _0x282d7f=_0x1b8ed4[_0x496b19(0x4c8)][_0x496b19(0xbd6)];if(!_0x282d7f)return;if(_0x1487fc[_0x496b19(0xc87)]['version']<=1.04){_0x29f01e('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x361c05['exit']();return;}_0x5c0cf6[_0x496b19(0x48e)](_0x314a53,_0x128850);const _0x51b391=_0x11a372[_0x496b19(0x2b8)];_0x282d7f['setupDesaturateImpactFilter'](_0x51b391);}else{if($gameTemp[_0x496b19(0x550)]())return![];}}return VisuMZ[_0x496b19(0xb36)]['BattleManager_checkBattleEnd'][_0x496b19(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)]['BattleManager_processVictory']=BattleManager[_0x164fcd(0x8c6)],BattleManager[_0x164fcd(0x8c6)]=function(){const _0x5ac764=_0x164fcd;this[_0x5ac764(0x841)]=!![],this[_0x5ac764(0x54f)](_0x5ac764(0x6ac)),VisuMZ[_0x5ac764(0xb36)]['BattleManager_processVictory'][_0x5ac764(0xa10)](this),this[_0x5ac764(0x1b1)](_0x5ac764(0x456));},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x9cc)]=BattleManager[_0x164fcd(0x19f)],BattleManager[_0x164fcd(0x19f)]=function(){const _0x23523c=_0x164fcd;this['_endingBattle']=!![],VisuMZ[_0x23523c(0xb36)][_0x23523c(0x9cc)][_0x23523c(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x55a)]=BattleManager['processDefeat'],BattleManager[_0x164fcd(0x417)]=function(){const _0x17ea81=_0x164fcd;this[_0x17ea81(0x841)]=!![],this[_0x17ea81(0x54f)](_0x17ea81(0x174)),VisuMZ[_0x17ea81(0xb36)][_0x17ea81(0x55a)][_0x17ea81(0xa10)](this),this['processPostBattleCommonEvents'](_0x17ea81(0x965));},VisuMZ[_0x164fcd(0xb36)]['BattleManager_endBattle']=BattleManager[_0x164fcd(0x1ab)],BattleManager[_0x164fcd(0x1ab)]=function(_0x14817d){const _0x231220=_0x164fcd;this[_0x231220(0xb93)]=!![],this[_0x231220(0x9c8)]=![],this[_0x231220(0x54f)]('PreEndBattleJS'),VisuMZ[_0x231220(0xb36)][_0x231220(0x92a)][_0x231220(0xa10)](this,_0x14817d),this[_0x231220(0x54f)](_0x231220(0x63f));},VisuMZ[_0x164fcd(0xb36)]['BattleManager_startTurn']=BattleManager[_0x164fcd(0x65c)],BattleManager[_0x164fcd(0x65c)]=function(){const _0x2f29b1=_0x164fcd;if(this['isTurnBased']())this[_0x2f29b1(0x54f)]('PreStartTurnJS');VisuMZ[_0x2f29b1(0xb36)][_0x2f29b1(0x875)]['call'](this);if(this[_0x2f29b1(0x5ff)]())this[_0x2f29b1(0x54f)](_0x2f29b1(0x911));},VisuMZ['BattleCore'][_0x164fcd(0x7da)]=BattleManager[_0x164fcd(0x99a)],BattleManager[_0x164fcd(0x99a)]=function(){const _0x422f02=_0x164fcd,_0x569101=this[_0x422f02(0x5a7)][_0x422f02(0x1d2)](),_0x196239=this[_0x422f02(0x5a7)];_0x569101&&_0x569101[_0x422f02(0x724)]()===_0x196239&&_0x569101[_0x422f02(0x7f3)](_0x422f02(0x495));VisuMZ[_0x422f02(0xb36)]['BattleManager_startAction'][_0x422f02(0xa10)](this);if(_0x569101&&_0x569101[_0x422f02(0x724)]()===_0x196239){if(_0x422f02(0x325)===_0x422f02(0x37c)){const _0x310ffc=this['getNextSubjectFromPool']();if(!_0x310ffc)return null;if(_0x310ffc[_0x422f02(0x486)]()&&_0x310ffc['isAlive']())return _0x310ffc;}else _0x569101[_0x422f02(0x7f3)](_0x422f02(0x81d));}},VisuMZ['BattleCore']['BattleManager_endAction']=BattleManager[_0x164fcd(0x473)],BattleManager[_0x164fcd(0x473)]=function(){const _0x18aa57=_0x164fcd,_0x3e0315=this[_0x18aa57(0xb8e)],_0x1fb578=this[_0x18aa57(0x5a7)];_0x3e0315&&_0x3e0315!==this[_0x18aa57(0x4f7)]&&_0x3e0315['subject']()===_0x1fb578&&_0x3e0315[_0x18aa57(0x7f3)]('PreEndActionJS');if(this['_subject']){if('jzVtW'!==_0x18aa57(0x98d))VisuMZ[_0x18aa57(0xb36)][_0x18aa57(0x181)]['call'](this);else return _0xbf3772[_0x18aa57(0xb36)]['Window_Options_statusText'][_0x18aa57(0xa10)](this,_0x567b9d);}else{if(_0x18aa57(0x199)==='WABTx')this[_0x18aa57(0x5af)]=_0x18aa57(0x329);else return _0x4c6942[_0x18aa57(0xb36)][_0x18aa57(0x1de)][_0x18aa57(0xcca)][_0x18aa57(0x34b)];}_0x3e0315&&_0x3e0315!==this[_0x18aa57(0x4f7)]&&_0x3e0315['subject']()===_0x1fb578&&_0x3e0315[_0x18aa57(0x7f3)]('PostEndActionJS'),this[_0x18aa57(0xb2a)](this[_0x18aa57(0x2cc)]()),this[_0x18aa57(0x4f7)]=this['_action'];},BattleManager['refreshBattlerMotions']=function(_0x39ea26){const _0x4c1645=_0x164fcd;for(const _0x58825c of _0x39ea26){if(_0x4c1645(0x168)!==_0x4c1645(0x168))return _0x5b2ca5[_0x4c1645(0x9fd)]()['includes'](this[_0x4c1645(0x922)]);else{if(!_0x58825c)continue;if(!_0x58825c[_0x4c1645(0x921)]())continue;_0x58825c['battler']()[_0x4c1645(0x25e)]();}}},BattleManager[_0x164fcd(0xb6d)]=function(){const _0x11c164=_0x164fcd;!this[_0x11c164(0x566)][_0x11c164(0x8a5)]()&&this[_0x11c164(0x473)]();},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xcda)]=function(){const _0x32f835=_0x164fcd;this[_0x32f835(0x2e7)]();if(Imported[_0x32f835(0xad2)]){if('CHZrB'!=='CHZrB')this['allowCollapse']()?_0x5ab906[_0x32f835(0xb36)][_0x32f835(0x527)][_0x32f835(0xa10)](this):(this[_0x32f835(0x318)]=!this[_0x32f835(0xa44)][_0x32f835(0xc49)](),!this[_0x32f835(0x318)]&&(this[_0x32f835(0x4c4)]=0x0));else{const _0xd7e7a6=VisuMZ[_0x32f835(0x8fc)]['Settings'][_0x32f835(0x452)];_0xd7e7a6&&_0xd7e7a6[_0x32f835(0xcc4)]===![]&&(_0x32f835(0x8b7)===_0x32f835(0x415)?_0x5f2b18[_0x32f835(0xb36)][_0x32f835(0x40d)][_0x32f835(0xa10)](this):this['removeStatesAuto'](0x1));}}else this[_0x32f835(0x607)](0x1);this[_0x32f835(0xba2)]();},BattleManager[_0x164fcd(0x794)]=function(){const _0x2cb6ba=_0x164fcd;this[_0x2cb6ba(0xb37)]=VisuMZ[_0x2cb6ba(0xb36)][_0x2cb6ba(0x1de)][_0x2cb6ba(0x514)][_0x2cb6ba(0x9d0)][_0x2cb6ba(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x546)]=BattleManager['onEscapeSuccess'],BattleManager['onEscapeSuccess']=function(){const _0x249f65=_0x164fcd;this[_0x249f65(0x54f)](_0x249f65(0xa65)),BattleManager[_0x249f65(0xbd6)][_0x249f65(0x1ea)](),VisuMZ[_0x249f65(0xb36)][_0x249f65(0x546)][_0x249f65(0xa10)](this),this['processPostBattleCommonEvents'](_0x249f65(0xb2d));},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x7f8)]=BattleManager[_0x164fcd(0x989)],BattleManager[_0x164fcd(0x989)]=function(){const _0x533c37=_0x164fcd;this[_0x533c37(0x54f)](_0x533c37(0x9d9));const _0x57ed53=this[_0x533c37(0xb37)];VisuMZ[_0x533c37(0xb36)][_0x533c37(0x7f8)][_0x533c37(0xa10)](this),this[_0x533c37(0xb37)]=_0x57ed53+VisuMZ[_0x533c37(0xb36)][_0x533c37(0x1de)][_0x533c37(0x514)][_0x533c37(0x8d9)][_0x533c37(0xa10)](this),this[_0x533c37(0x1b1)](_0x533c37(0x2df));},BattleManager[_0x164fcd(0xaa1)]=function(){const _0x4a8ad1=_0x164fcd;let _0x444921=![];if(this[_0x4a8ad1(0x19e)]()){if(_0x4a8ad1(0x676)!==_0x4a8ad1(0x676))_0x1d5f58['BattleCore'][_0x4a8ad1(0xc21)][_0x4a8ad1(0xa10)](this);else for(const _0x295465 of $gameTroop[_0x4a8ad1(0x4d1)]()){if(_0x4a8ad1(0x179)!==_0x4a8ad1(0x7a6))this['_logWindow'][_0x4a8ad1(0x56b)](_0x4a8ad1(0x233),TextManager['emerge']['format'](_0x295465)),this['_logWindow'][_0x4a8ad1(0x56b)]('wait'),_0x444921=!![];else{if(!_0x1cddd3[_0x4a8ad1(0x8a7)](_0x35e4c9))return![];}}}if(this[_0x4a8ad1(0xc6e)])this[_0x4a8ad1(0x566)][_0x4a8ad1(0x56b)](_0x4a8ad1(0x233),TextManager['preemptive'][_0x4a8ad1(0x272)]($gameParty[_0x4a8ad1(0x16d)]())),this[_0x4a8ad1(0x566)][_0x4a8ad1(0x56b)](_0x4a8ad1(0xa9d));else this[_0x4a8ad1(0xae9)]&&(this['_logWindow'][_0x4a8ad1(0x56b)](_0x4a8ad1(0x233),TextManager[_0x4a8ad1(0x4bf)][_0x4a8ad1(0x272)]($gameParty[_0x4a8ad1(0x16d)]())),this[_0x4a8ad1(0x566)]['push'](_0x4a8ad1(0xa9d)));_0x444921&&(this[_0x4a8ad1(0x566)][_0x4a8ad1(0x56b)](_0x4a8ad1(0xa9d)),this['_logWindow'][_0x4a8ad1(0x56b)](_0x4a8ad1(0x7bf))),this['isTpb']()&&this['isSkipPartyCommandWindow']()&&(this[_0x4a8ad1(0x39a)]=![]);},BattleManager[_0x164fcd(0x19e)]=function(){const _0x17fb97=_0x164fcd;if(BattleManager[_0x17fb97(0x9c8)])return![];return VisuMZ[_0x17fb97(0xb36)]['Settings'][_0x17fb97(0x337)][_0x17fb97(0x91d)];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x3c1)]=BattleManager[_0x164fcd(0x51e)],BattleManager[_0x164fcd(0x51e)]=function(){const _0x470523=_0x164fcd;VisuMZ[_0x470523(0xb36)][_0x470523(0x3c1)][_0x470523(0xa10)](this),this[_0x470523(0x25a)]()&&this[_0x470523(0x557)]()&&!this[_0x470523(0xae9)]&&$gameParty[_0x470523(0x189)]()&&this['selectNextCommand']();},BattleManager['isSkipPartyCommandWindow']=function(){const _0xa2c908=_0x164fcd;return VisuMZ[_0xa2c908(0xb36)][_0xa2c908(0x1de)][_0xa2c908(0xcca)][_0xa2c908(0x3a0)];},BattleManager[_0x164fcd(0xb8b)]=function(){const _0x526378=_0x164fcd;if(this[_0x526378(0xcd6)]()){if(_0x526378(0x50d)===_0x526378(0x5cb)){if(!_0x44a800[_0x526378(0x53f)]())return;if(_0x1da877[_0x526378(0x361)]())return;if(!this[_0x526378(0x3be)])this[_0x526378(0x2f0)]();this['createSeparateDamagePopups']();const _0x13b7ed=this[_0x526378(0x921)]();if(_0x13b7ed)_0x13b7ed[_0x526378(0x7a1)]();}else this[_0x526378(0x84e)]();}},VisuMZ[_0x164fcd(0xb36)]['Scene_Battle_startActorCommandSelection']=Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x3ff)],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x3ff)]=function(){const _0xc9e647=_0x164fcd;VisuMZ[_0xc9e647(0xb36)][_0xc9e647(0x9e2)][_0xc9e647(0xa10)](this),BattleManager[_0xc9e647(0xb52)]()&&BattleManager[_0xc9e647(0x39a)]&&(BattleManager[_0xc9e647(0x39a)]=![],this[_0xc9e647(0x177)]());},BattleManager[_0x164fcd(0xc09)]=function(_0x18e880,_0x33e5b1){const _0x49d9ce=_0x164fcd;this[_0x49d9ce(0xb8e)][_0x49d9ce(0xadd)]=_0x33e5b1,this['_logWindow'][_0x49d9ce(0x3c3)](_0x33e5b1),this['_logWindow']['displayReflectionPlayBack'](_0x18e880,this[_0x49d9ce(0xb8e)]),this[_0x49d9ce(0xb8e)][_0x49d9ce(0xba5)](_0x18e880),this['_logWindow'][_0x49d9ce(0x42a)](_0x18e880,_0x18e880);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xa26)]=BattleManager['makeActionOrders'],BattleManager['makeActionOrders']=function(){const _0x59afaf=_0x164fcd;VisuMZ[_0x59afaf(0xb36)][_0x59afaf(0xa26)][_0x59afaf(0xa10)](this),this[_0x59afaf(0x43f)]=this[_0x59afaf(0x43f)][_0x59afaf(0x69f)](_0xbc01d9=>_0xbc01d9&&_0xbc01d9[_0x59afaf(0x528)]());},VisuMZ[_0x164fcd(0xb36)]['BattleManager_updatePhase']=BattleManager[_0x164fcd(0x5ae)],BattleManager[_0x164fcd(0x5ae)]=function(_0xae8b64){const _0x3b038b=_0x164fcd;if(this[_0x3b038b(0x5af)]===_0x3b038b(0xbdf))this[_0x3b038b(0x1ac)]();else this[_0x3b038b(0x5af)]==='forceAction'?_0x3b038b(0x545)===_0x3b038b(0x247)?_0x741317=_0x1a6932:this[_0x3b038b(0xb4b)]():_0x3b038b(0xc67)===_0x3b038b(0x806)?(_0x3824a7['BattleCore'][_0x3b038b(0x996)][_0x3b038b(0xa10)](this,_0x3ffba2),this[_0x3b038b(0x227)]()):VisuMZ['BattleCore']['BattleManager_updatePhase'][_0x3b038b(0xa10)](this,_0xae8b64);},BattleManager[_0x164fcd(0x968)]=function(){const _0xc6c4af=_0x164fcd;this[_0xc6c4af(0x5b3)]=this[_0xc6c4af(0x1f1)][_0xc6c4af(0x725)](0x0),this[_0xc6c4af(0x2b3)]=0x0,this[_0xc6c4af(0x49a)]=this['_allTargets'][0x0]||null,this['_phase']='custom';},BattleManager[_0x164fcd(0x1ac)]=function(){const _0xac550b=_0x164fcd;!this[_0xac550b(0x195)]()&&!this[_0xac550b(0x566)][_0xac550b(0x8a5)]()&&('VBdrH'!==_0xac550b(0xab9)?this[_0xac550b(0x5af)]=_0xac550b(0x27c):this[_0xac550b(0x1ec)](...arguments));},BattleManager[_0x164fcd(0x30e)]=function(_0x557389){const _0x25fbe3=_0x164fcd;this[_0x25fbe3(0x43f)][_0x25fbe3(0x494)](_0x557389);if(_0x557389===this[_0x25fbe3(0x5a7)])return;const _0x3ce8c9=JsonEx['makeDeepCopy'](_0x557389['currentAction']());this['_forcedBattlers'][_0x25fbe3(0x56b)]([_0x557389,_0x3ce8c9]);},BattleManager[_0x164fcd(0xbc9)]=function(){},BattleManager['updateStart']=function(){const _0x2a4a81=_0x164fcd;if(this[_0x2a4a81(0xb52)]())'PTVtf'!==_0x2a4a81(0x979)?this['_phase']=_0x2a4a81(0x329):_0x251809[_0x2a4a81(0xb36)][_0x2a4a81(0x1de)]['Actor'][_0x2a4a81(0x93f)]?_0x29ba9d[_0x2a4a81(0xb36)][_0x2a4a81(0x1de)][_0x2a4a81(0x9ef)][_0x2a4a81(0x93f)][_0x2a4a81(0xa10)](this,_0x43f9ba):_0x268c04[_0x2a4a81(0xb36)][_0x2a4a81(0xcac)][_0x2a4a81(0xa10)](this,_0x5607d4);else this[_0x2a4a81(0x1b5)][_0x2a4a81(0xd04)]>0x0?_0x2a4a81(0xc4a)===_0x2a4a81(0xc4a)?this[_0x2a4a81(0x5af)]=_0x2a4a81(0x329):this[_0x2a4a81(0x4c4)]=0x0:this[_0x2a4a81(0x51e)]();},BattleManager[_0x164fcd(0x6f4)]=function(){const _0x57c76f=_0x164fcd,_0x45ea2b=this[_0x57c76f(0x5a7)];_0x45ea2b&&this[_0x57c76f(0xb52)]()&&_0x45ea2b[_0x57c76f(0x4e9)](_0x57c76f(0x47c));for(;;){const _0x74e314=this[_0x57c76f(0x3eb)]();if(!_0x74e314)return null;if(_0x74e314['isBattleMember']()&&_0x74e314[_0x57c76f(0x949)]()){if('MeEjK'!==_0x57c76f(0x89f))_0x2fb759[_0x57c76f(0x6c6)]();else return _0x74e314;}}},BattleManager['getNextSubjectFromPool']=function(){const _0x3968f6=_0x164fcd;if(this[_0x3968f6(0x1b5)][_0x3968f6(0xd04)]>0x0){const _0x14713f=this[_0x3968f6(0x1b5)][_0x3968f6(0x90a)](),_0x5d4751=_0x14713f[0x0];return _0x5d4751[_0x3968f6(0xa9a)]=_0x5d4751[_0x3968f6(0xa9a)]||[],_0x5d4751['_actions'][0x0]=_0x14713f[0x1],_0x5d4751;}else return this[_0x3968f6(0x43f)][_0x3968f6(0x90a)]();},VisuMZ[_0x164fcd(0xb36)]['Game_Battler_forceAction']=Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x30e)],Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x30e)]=function(_0xdd5411,_0x5c9ef1){const _0x20c44f=_0x164fcd;VisuMZ[_0x20c44f(0xb36)]['Game_Battler_forceAction']['call'](this,_0xdd5411,_0x5c9ef1),this[_0x20c44f(0xa9a)][this[_0x20c44f(0xa9a)][_0x20c44f(0xd04)]-0x1]['_forceAction']=!![];},Game_Interpreter['prototype'][_0x164fcd(0x3d2)]=function(_0x516940){const _0x33a353=_0x164fcd;return this[_0x33a353(0xba8)](_0x516940[0x0],_0x516940[0x1],_0x31e99f=>{const _0x1a293b=_0x33a353;!_0x31e99f[_0x1a293b(0xc6c)]()&&(_0x31e99f[_0x1a293b(0x30e)](_0x516940[0x2],_0x516940[0x3]),BattleManager['forceAction'](_0x31e99f));}),!![];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x2c2)]=Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x397)],Game_Battler['prototype']['makeSpeed']=function(){const _0xfba797=_0x164fcd;VisuMZ[_0xfba797(0xb36)][_0xfba797(0x2c2)][_0xfba797(0xa10)](this),this[_0xfba797(0xa9a)][_0xfba797(0xd04)]<=0x0&&(this[_0xfba797(0xa15)]=Number[_0xfba797(0x939)]);},BattleManager['shouldHideBattleEndPopups']=function(){const _0x1350f6=_0x164fcd;if(VisuMZ[_0x1350f6(0xb36)]['Settings'][_0x1350f6(0x1ce)][_0x1350f6(0x453)]??!![])return![];return SceneManager[_0x1350f6(0x53f)]()&&this[_0x1350f6(0x841)];},VisuMZ[_0x164fcd(0xb36)]['BattleManager_selectNextCommand']=BattleManager[_0x164fcd(0x84e)],BattleManager[_0x164fcd(0x84e)]=function(){const _0x498109=_0x164fcd;this[_0x498109(0xb52)]()?_0x498109(0x4e3)==='YHHin'?this[_0x498109(0x1ae)]():this[_0x498109(0xc8f)]=_0x1cb5bd:VisuMZ[_0x498109(0xb36)][_0x498109(0xaaf)][_0x498109(0xa10)](this);},BattleManager[_0x164fcd(0x1ae)]=function(){const _0x4fcd92=_0x164fcd;if(this['_currentActor']){if(this['_currentActor'][_0x4fcd92(0x84e)]())return;this[_0x4fcd92(0xa6f)](),this[_0x4fcd92(0x635)](),!this[_0x4fcd92(0x5a7)]&&!this['_currentActor']&&SceneManager[_0x4fcd92(0x4c8)][_0x4fcd92(0x6fd)]();}else!this[_0x4fcd92(0x5a7)]&&(_0x4fcd92(0xa73)!==_0x4fcd92(0xa73)?this[_0x4fcd92(0x1db)]():this[_0x4fcd92(0x298)]());},BattleManager[_0x164fcd(0x635)]=function(){const _0xb10080=_0x164fcd;if(!this[_0xb10080(0xcd6)]()||this[_0xb10080(0x39c)]()){if(_0xb10080(0xabe)!=='NxjhN')this[_0xb10080(0x9b2)]&&(!$gameParty[_0xb10080(0x4ff)]()[_0xb10080(0x893)](this['_tpbSceneChangeCacheActor'])&&(this[_0xb10080(0x9b2)]=null)),!this[_0xb10080(0x9b2)]?(this[_0xb10080(0x424)](),this[_0xb10080(0x6b6)]=null,this[_0xb10080(0x4d8)]=![]):this[_0xb10080(0x30c)]();else{if(!_0x581df3[_0xb10080(0xa01)])return;const _0x346cf0=_0x4db5b0['_scene'][_0xb10080(0xbd6)];if(!_0x346cf0)return;if(_0x230c86['ActSeqImpact']['version']<=1.04){_0x2b2ede(_0xb10080(0xcd1)),_0x7409d7[_0xb10080(0x7f7)]();return;}_0x18776a[_0xb10080(0x48e)](_0x541049,_0x688283);const _0x1f764a=_0x10387b[_0xb10080(0x2b8)];_0x346cf0['setupOversaturateImpactFilter'](_0x1f764a);}}},BattleManager[_0x164fcd(0x30c)]=function(){const _0x595700=_0x164fcd;!$gameParty[_0x595700(0x4ff)]()[_0x595700(0x893)](this[_0x595700(0x9b2)])&&(this[_0x595700(0x9b2)]=null),this[_0x595700(0x9b2)]?(this[_0x595700(0x6b6)]=this[_0x595700(0x9b2)],this['_currentActor'][_0x595700(0x4a8)]=_0x595700(0x307),this[_0x595700(0x4d8)]=!![],this['_tpbSceneChangeCacheActor']=null):_0x595700(0x15c)!=='XHOBJ'?_0x4a0acd[_0x2a8755]===0x1&&this[_0x595700(0xcb3)]!==_0x4ab6de&&(_0x27ba72[_0x4cb62d]=null):(this[_0x595700(0x424)](),this[_0x595700(0x6b6)]=null,this[_0x595700(0x4d8)]=![]);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x93e)]=BattleManager[_0x164fcd(0x576)],BattleManager[_0x164fcd(0x576)]=function(){const _0x4087bc=_0x164fcd;if(this[_0x4087bc(0x5af)]==='custom')return this[_0x4087bc(0x4a3)]();else{if(_0x4087bc(0x26d)===_0x4087bc(0x269))_0x593d5c=_0x5d7a91['concat'](_0x54a94f[_0x4087bc(0xc70)](_0x2d3b0b));else return VisuMZ[_0x4087bc(0xb36)][_0x4087bc(0x93e)][_0x4087bc(0xa10)](this);}},BattleManager[_0x164fcd(0x4a3)]=function(){const _0x520383=_0x164fcd;return this[_0x520383(0xa2f)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x2d9)]=BattleManager[_0x164fcd(0x424)],BattleManager[_0x164fcd(0x424)]=function(){const _0xd04d1c=_0x164fcd;this[_0xd04d1c(0xb52)]()&&this[_0xd04d1c(0x5af)]===_0xd04d1c(0x344)&&(this['_currentActor']=null),VisuMZ[_0xd04d1c(0xb36)][_0xd04d1c(0x2d9)][_0xd04d1c(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x981)]=BattleManager[_0x164fcd(0x784)],BattleManager[_0x164fcd(0x784)]=function(){const _0x2f81c1=_0x164fcd,_0x2c734c=this['_currentActor'];if(_0x2c734c&&!_0x2c734c[_0x2f81c1(0x784)]()){if(_0x2f81c1(0x5f8)===_0x2f81c1(0x97b)){const _0x1833e7=0xa,_0x19d974=0x12c*_0x1833e7,_0x5b0e63=0x1e*_0x1833e7;this[_0x2f81c1(0xa52)](_0x19d974,0x0,_0x5b0e63);}else{const _0x5ebf13=_0x2c734c[_0x2f81c1(0x49c)];_0x2c734c[_0x2f81c1(0xa9a)][_0x5ebf13]=new Game_Action(_0x2c734c);}}return VisuMZ['BattleCore'][_0x2f81c1(0x981)][_0x2f81c1(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xb3e)]=BattleManager['checkSubstitute'],BattleManager[_0x164fcd(0xa46)]=function(_0x5ea8d3){const _0x508c01=_0x164fcd;if(this[_0x508c01(0xb8e)][_0x508c01(0x9b5)]())return![];return VisuMZ[_0x508c01(0xb36)][_0x508c01(0xb3e)][_0x508c01(0xa10)](this,_0x5ea8d3);},SceneManager[_0x164fcd(0x53f)]=function(){const _0xabbf98=_0x164fcd;return this[_0xabbf98(0x4c8)]&&this[_0xabbf98(0x4c8)]['constructor']===Scene_Battle;},SceneManager[_0x164fcd(0xbba)]=function(){const _0x340aa5=_0x164fcd;return Spriteset_Battle[_0x340aa5(0x2bf)][_0x340aa5(0x715)]();},SceneManager[_0x164fcd(0x5aa)]=function(){const _0x5614bf=_0x164fcd;if(SceneManager[_0x5614bf(0x6b2)](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager[_0x164fcd(0xaa0)]=function(_0x310a5d){const _0xc344b7=_0x164fcd;if(!SceneManager[_0xc344b7(0x53f)]())return!![];const _0x44a902=[_0xc344b7(0xcec),_0xc344b7(0x205)];return _0x44a902[_0xc344b7(0x893)](_0x310a5d[_0xc344b7(0x16d)]);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x428)]=SceneManager[_0x164fcd(0x56b)],SceneManager[_0x164fcd(0x56b)]=function(_0x24bafd){const _0x2663f1=_0x164fcd;if(!SceneManager[_0x2663f1(0xaa0)](_0x24bafd))return this[_0x2663f1(0x754)](_0x24bafd);VisuMZ[_0x2663f1(0xb36)]['SceneManager_push'][_0x2663f1(0xa10)](this,_0x24bafd);},SceneManager[_0x164fcd(0x754)]=function(_0x2e78eb){const _0x3e3b98=_0x164fcd;if(!$gameTemp[_0x3e3b98(0x44a)]())return;if(this[_0x3e3b98(0xbbd)])return;this[_0x3e3b98(0xbbd)]=!![];let _0x404279='';_0x404279+=_0x3e3b98(0x5d2),_0x404279+='\x20to\x20%1\x20midbattle.'[_0x3e3b98(0x272)](_0x2e78eb[_0x3e3b98(0x16d)]),alert(_0x404279);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xc73)]=Game_Temp[_0x164fcd(0x2bf)][_0x164fcd(0x9eb)],Game_Temp[_0x164fcd(0x2bf)][_0x164fcd(0x9eb)]=function(_0x747a7,_0x55ba6b,_0x3a6c66){const _0x89fcd8=_0x164fcd;_0x747a7=_0x747a7[_0x89fcd8(0x69f)]((_0x441257,_0x2ff7f6,_0x106db8)=>_0x106db8[_0x89fcd8(0x990)](_0x441257)===_0x2ff7f6);SceneManager[_0x89fcd8(0x53f)]()&&SceneManager['isBattleFlipped']()&&(_0x3a6c66=!_0x3a6c66);VisuMZ['BattleCore'][_0x89fcd8(0xc73)][_0x89fcd8(0xa10)](this,_0x747a7,_0x55ba6b,_0x3a6c66);if(SceneManager[_0x89fcd8(0x53f)]()){if(_0x89fcd8(0x1a0)===_0x89fcd8(0x357)){if(!_0x15b1a1[_0x89fcd8(0x53f)]())return;if(!_0x4fe0c4[_0x89fcd8(0x2d3)])return;_0x730ab3[_0x89fcd8(0x48e)](_0x38f110,_0x42160c);const _0x4e8d68=_0x2b4a51[_0x89fcd8(0x1da)](),_0x351973=_0x25e4fa[_0x89fcd8(0x904)];if(!_0x4e8d68)return;_0x3faf6c[_0x89fcd8(0x695)](0x0,0x0,_0x25599f[_0x89fcd8(0x908)],_0x165d86[_0x89fcd8(0x3a7)]);if(_0x351973)_0x4e8d68[_0x89fcd8(0x3a2)](_0x89fcd8(0xb4c));}else BattleManager[_0x89fcd8(0xbd6)]['processAnimationRequests']();}},Game_Temp[_0x164fcd(0x2bf)]['setLastPluginCommandInterpreter']=function(_0x1d9798){this['_lastPluginCommandInterpreter']=_0x1d9798;},Game_Temp[_0x164fcd(0x2bf)][_0x164fcd(0x1da)]=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp[_0x164fcd(0x2bf)][_0x164fcd(0x9c9)]=function(){const _0x3f7911=_0x164fcd;this[_0x3f7911(0xc82)]=undefined;},Game_Temp['prototype'][_0x164fcd(0x8c4)]=function(_0x2e62c8){const _0x149afe=_0x164fcd;$gameMap&&$dataMap&&$dataMap[_0x149afe(0x9ea)]&&this[_0x149afe(0xbf2)]($dataMap[_0x149afe(0x9ea)]);const _0x1c7ad5=$dataTroops[_0x2e62c8];if(_0x1c7ad5){if(_0x149afe(0x809)!=='rJUqm'){let _0x7a2291=DataManager[_0x149afe(0xa94)](_0x1c7ad5['id']);this[_0x149afe(0xbf2)](_0x7a2291);}else{if(_0x2cf381[_0x149afe(0xb52)]())return'TPB';return _0x149afe(0xa03);}}},Game_Temp[_0x164fcd(0x2bf)]['parseForcedGameTroopSettingsBattleCore']=function(_0x2b21de){const _0x21ed1f=_0x164fcd;if(!_0x2b21de)return;if(_0x2b21de[_0x21ed1f(0xa5d)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){if(_0x21ed1f(0x5a4)!==_0x21ed1f(0x304)){const _0x32009e=String(RegExp['$1']);if(_0x32009e[_0x21ed1f(0xa5d)](/DEFAULT/i))this[_0x21ed1f(0xc82)]=_0x21ed1f(0x18e);else{if(_0x32009e[_0x21ed1f(0xa5d)](/LIST/i))this['_forcedBattleLayout']=_0x21ed1f(0xa4e);else{if(_0x32009e['match'](/XP/i))_0x21ed1f(0x58f)!==_0x21ed1f(0x58f)?(_0x59a0cd[_0x21ed1f(0xa45)]=_0x2ea93b,_0x4910a3[_0x21ed1f(0x843)]=!![],this[_0x21ed1f(0x439)]()):this[_0x21ed1f(0xc82)]='xp';else{if(_0x32009e[_0x21ed1f(0xa5d)](/PORTRAIT/i))_0x21ed1f(0x7d8)===_0x21ed1f(0x7d8)?this['_forcedBattleLayout']=_0x21ed1f(0x404):_0x521650[_0x21ed1f(0x85d)]&&(this[_0x21ed1f(0x56b)](_0x21ed1f(0xcd2)),this[_0x21ed1f(0x56b)](_0x21ed1f(0x844)),this[_0x21ed1f(0x56b)](_0x21ed1f(0x1ca)),this[_0x21ed1f(0x56b)](_0x21ed1f(0x233),_0x373297[_0x21ed1f(0x85d)][_0x21ed1f(0x272)](_0x42205c[_0x21ed1f(0x16d)]())),this[_0x21ed1f(0x56b)](_0x21ed1f(0xa9d)));else{if(_0x32009e[_0x21ed1f(0xa5d)](/BORDER/i))_0x21ed1f(0x993)!==_0x21ed1f(0x64b)?this[_0x21ed1f(0xc82)]=_0x21ed1f(0x7e6):_0x6adc85[_0x21ed1f(0xb36)][_0x21ed1f(0x3f3)][_0x21ed1f(0xa10)](this,_0x73b509);else{if(_0x32009e[_0x21ed1f(0xa5d)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported['VisuMZ_3_SideviewBattleUI']){if(_0x21ed1f(0x19c)!==_0x21ed1f(0x19c))return _0x1236a9;else this[_0x21ed1f(0xc82)]=_0x21ed1f(0xbe5);}else _0x21ed1f(0x80f)===_0x21ed1f(0x145)?this[_0x21ed1f(0x802)]():this['_forcedBattleLayout']=_0x21ed1f(0x18e);}else{if(_0x32009e['match'](/(?:FRONTVIEW UI|FRONTVIEW)/i)){if(_0x21ed1f(0xce1)!=='BievS')_0x17f20e[_0x21ed1f(0xb36)][_0x21ed1f(0xa89)][_0x21ed1f(0xa10)](this,_0x344f13),this[_0x21ed1f(0x465)](_0x3cd948);else{if(Imported[_0x21ed1f(0x8af)]){if(_0x21ed1f(0x365)==='pcxKU')return _0x16ce2f(_0x10b921['$1'])||0x0;else this[_0x21ed1f(0xc82)]=_0x21ed1f(0x59b);}else this[_0x21ed1f(0xc82)]=_0x21ed1f(0x18e);}}}}}}}}}else return _0x5ea1c7[_0x21ed1f(0x279)]();}},VisuMZ[_0x164fcd(0xb36)]['Game_System_initialize']=Game_System[_0x164fcd(0x2bf)]['initialize'],Game_System[_0x164fcd(0x2bf)]['initialize']=function(){const _0x14a574=_0x164fcd;VisuMZ['BattleCore'][_0x14a574(0x836)][_0x14a574(0xa10)](this),this['initBattleCore']();},Game_System[_0x164fcd(0x2bf)]['initBattleCore']=function(){const _0x56b355=_0x164fcd;this[_0x56b355(0x4eb)]=this[_0x56b355(0x4eb)]||[];},Game_System[_0x164fcd(0x2bf)][_0x164fcd(0x9fd)]=function(){if(this['_defeatedEnemies']===undefined)this['initBattleCore']();return this['_defeatedEnemies'];},Game_System[_0x164fcd(0x2bf)][_0x164fcd(0x2fb)]=function(_0x294d39){const _0x4b08d0=_0x164fcd;if(this[_0x4b08d0(0x4eb)]===undefined)this[_0x4b08d0(0x2e2)]();if(!_0x294d39)return;if(this['_defeatedEnemies'][_0x4b08d0(0x893)](_0x294d39))return;this[_0x4b08d0(0x4eb)]['push'](_0x294d39),this[_0x4b08d0(0x4eb)][_0x4b08d0(0x9d7)]((_0xe49109,_0x41dbc1)=>_0xe49109-_0x41dbc1);},VisuMZ['BattleCore'][_0x164fcd(0x266)]=Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0x474)],Game_BattlerBase[_0x164fcd(0x2bf)]['addNewState']=function(_0x1d3698){const _0x46d46d=_0x164fcd,_0x492d89=this[_0x46d46d(0x949)](),_0x45b1be=this[_0x46d46d(0x5e4)]();VisuMZ[_0x46d46d(0xb36)][_0x46d46d(0x266)][_0x46d46d(0xa10)](this,_0x1d3698);if(this['isEnemy']()&&_0x492d89&&this['isDead']()){if(_0x46d46d(0x598)===_0x46d46d(0xa56)){if(_0x2ca1dc[_0x46d46d(0x169)])return _0x35b7e2[_0x46d46d(0x169)](_0x2944a1,_0x130386);let _0x1e7416='';if(_0x29eb43[_0x46d46d(0x893)](_0x73f48e))_0x1e7416=_0x46d46d(0x9a5)[_0x46d46d(0x272)](_0x29ed8b['id'],_0x16640d);if(_0x18c6c2[_0x46d46d(0x893)](_0x175774))_0x1e7416=_0x46d46d(0x2ec)['format'](_0x3a609b['id'],_0x50942d);if(_0x16a3aa[_0x46d46d(0x893)](_0x152ed8))_0x1e7416='Skill-%1-%2'[_0x46d46d(0x272)](_0x4b695b['id'],_0x57cc74);if(_0xa3327f['includes'](_0x4a2487))_0x1e7416=_0x46d46d(0x2be)[_0x46d46d(0x272)](_0x2a296b['id'],_0x1e7f29);if(_0x4031de['includes'](_0x3e13dd))_0x1e7416='Weapon-%1-%2'[_0x46d46d(0x272)](_0x588a23['id'],_0x4e8f66);if(_0x15a889[_0x46d46d(0x893)](_0x4290d7))_0x1e7416=_0x46d46d(0xcdc)[_0x46d46d(0x272)](_0x15dc69['id'],_0x3a6c60);if(_0x77734b[_0x46d46d(0x893)](_0x2ea1e5))_0x1e7416=_0x46d46d(0x525)[_0x46d46d(0x272)](_0x8a6a7c['id'],_0x180403);if(_0x1f7aae[_0x46d46d(0x893)](_0x3fad9b))_0x1e7416=_0x46d46d(0x185)[_0x46d46d(0x272)](_0x2e4858['id'],_0x11df58);return _0x1e7416;}else this['_visualHpGauge_JustDied']=!this[_0x46d46d(0x7f4)](),$gameSystem['registerDefeatedEnemy'](this[_0x46d46d(0x5ec)]());}SceneManager['isSceneBattle']()&&_0x45b1be!==this[_0x46d46d(0x5e4)]()&&(this[_0x46d46d(0x921)]()&&this[_0x46d46d(0x921)]()[_0x46d46d(0x25e)]());},Game_Enemy['prototype'][_0x164fcd(0x7f4)]=function(){const _0x29556a=_0x164fcd;return $gameSystem[_0x29556a(0x9fd)]()[_0x29556a(0x893)](this[_0x29556a(0x922)]);},VisuMZ['BattleCore'][_0x164fcd(0x118)]=Game_BattlerBase[_0x164fcd(0x2bf)]['eraseState'],Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0x134)]=function(_0x3764c0){const _0x826cf1=_0x164fcd;VisuMZ[_0x826cf1(0xb36)]['Game_BattlerBase_eraseState']['call'](this,_0x3764c0),this['isEnemy']()&&_0x3764c0===this[_0x826cf1(0x8eb)]()&&this[_0x826cf1(0x949)]()&&(this[_0x826cf1(0x813)]=![]),!this[_0x826cf1(0x137)]&&!this[_0x826cf1(0x558)]&&SceneManager['isSceneBattle']()&&this[_0x826cf1(0x1f0)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x3e4)]=Game_Action[_0x164fcd(0x2bf)]['clear'],Game_Action['prototype']['clear']=function(){const _0x2fe06d=_0x164fcd;VisuMZ[_0x2fe06d(0xb36)][_0x2fe06d(0x3e4)][_0x2fe06d(0xa10)](this),this[_0x2fe06d(0xc53)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x2fe06d(0x410)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x2fe06d(0x3dc)]=_0x2fe06d(0x18e),this['clearTargetBattlerKey']();},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x138)]=function(){const _0x4e4a9e=_0x164fcd;this[_0x4e4a9e(0x6e1)]='';},VisuMZ[_0x164fcd(0xb36)]['Game_Action_setSubject']=Game_Action['prototype'][_0x164fcd(0xa84)],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0xa84)]=function(_0x2262a9){const _0x3947a1=_0x164fcd;VisuMZ[_0x3947a1(0xb36)]['Game_Action_setSubject']['call'](this,_0x2262a9),this[_0x3947a1(0x138)]();},VisuMZ['BattleCore'][_0x164fcd(0x492)]=Game_Action[_0x164fcd(0x2bf)]['setSkill'],Game_Action['prototype'][_0x164fcd(0x1bc)]=function(_0x281e43){const _0x47728b=_0x164fcd;VisuMZ[_0x47728b(0xb36)][_0x47728b(0x492)][_0x47728b(0xa10)](this,_0x281e43),this['clearTargetBattlerKey']();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x216)]=Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0xa9c)],Game_Action['prototype']['setItem']=function(_0x20ea84){const _0x44b6da=_0x164fcd;VisuMZ['BattleCore'][_0x44b6da(0x216)][_0x44b6da(0xa10)](this,_0x20ea84),this[_0x44b6da(0x138)]();},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0xbd8)]=function(_0x519d98,_0xa203e0){const _0x510f4c=_0x164fcd;return VisuMZ['BattleCore'][_0x510f4c(0x1de)]['Damage'][_0x510f4c(0xaff)][_0x510f4c(0xa10)](this,_0x519d98,_0xa203e0);},Game_Action['prototype'][_0x164fcd(0xb7d)]=function(_0x23fe98,_0x1b297e){const _0x202043=_0x164fcd;return VisuMZ[_0x202043(0xb36)][_0x202043(0x1de)]['Damage'][_0x202043(0x9da)][_0x202043(0xa10)](this,_0x23fe98,_0x1b297e);},Game_Action['prototype']['applyGuard']=function(_0x50b890,_0x1bfeb7){const _0x2ca1d8=_0x164fcd;return VisuMZ[_0x2ca1d8(0xb36)]['Settings'][_0x2ca1d8(0x1ce)]['GuardFormulaJS']['call'](this,_0x50b890,_0x1bfeb7);},VisuMZ['BattleCore'][_0x164fcd(0x9a1)]=Game_Action[_0x164fcd(0x2bf)]['itemHit'],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x8db)]=function(_0x37cc11){const _0x13b5e0=_0x164fcd,_0x569cec=this[_0x13b5e0(0x5e9)]()['note'];if(_0x569cec[_0x13b5e0(0xa5d)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x569cec['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x247342=VisuMZ['BattleCore']['Game_Action_itemHit'][_0x13b5e0(0xa10)](this,_0x37cc11);return _0x247342=this[_0x13b5e0(0x410)]['hitRate']*_0x247342+this[_0x13b5e0(0x410)][_0x13b5e0(0x71c)],_0x247342;}}},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x8ba)]=function(_0x15e799){const _0x4fda15=_0x164fcd;if(!this[_0x4fda15(0x5e9)]()[_0x4fda15(0x597)][_0x4fda15(0xbf6)])return 0x0;let _0x22308d=VisuMZ['BattleCore'][_0x4fda15(0x1de)]['Damage'][_0x4fda15(0xbde)][_0x4fda15(0xa10)](this,_0x15e799);return _0x22308d=this[_0x4fda15(0x410)]['criticalHitRate']*_0x22308d+this['_multipliers'][_0x4fda15(0x4b5)],_0x22308d;},Game_Action[_0x164fcd(0x2bf)]['applyCritical']=function(_0x21a72f){const _0x1d49ff=_0x164fcd;return _0x21a72f=VisuMZ[_0x1d49ff(0xb36)]['Settings'][_0x1d49ff(0x1ce)][_0x1d49ff(0x3c8)][_0x1d49ff(0xa10)](this,_0x21a72f),_0x21a72f=this[_0x1d49ff(0x410)][_0x1d49ff(0x6b5)]*_0x21a72f+this[_0x1d49ff(0x410)][_0x1d49ff(0x3b3)],_0x21a72f;},VisuMZ['BattleCore']['Game_Action_evalDamageFormula']=Game_Action[_0x164fcd(0x2bf)]['evalDamageFormula'],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x7c1)]=function(_0x2305f7){const _0x3db856=_0x164fcd;if(this['_customDamageFormula']!=='default'){if(_0x3db856(0xa78)===_0x3db856(0x6d6))this[_0x3db856(0x3ae)]['x']=_0xfaf0b5[_0x3db856(0xab5)]-(_0x469872[_0x3db856(0xab5)]-_0x5d89b6[_0x3db856(0x273)])/0x2-this[_0x3db856(0x3ae)][_0x3db856(0xab5)]-0x4;else return this[_0x3db856(0x1f6)](_0x2305f7);}else return DataManager['getDamageStyle'](this[_0x3db856(0x5e9)]())===_0x3db856(0x7ad)?VisuMZ['BattleCore'][_0x3db856(0xa54)]['call'](this,_0x2305f7):this[_0x3db856(0xc85)](_0x2305f7);},Game_Action['prototype'][_0x164fcd(0x172)]=function(_0x430853){const _0x23b778=_0x164fcd;this[_0x23b778(0x3dc)]=_0x430853;},Game_Action['prototype'][_0x164fcd(0x1f6)]=function(_0x41b0fe){const _0x5c676a=_0x164fcd,_0x4c4db4=this[_0x5c676a(0x5e9)](),_0x368f4b=_0x4c4db4[_0x5c676a(0x597)][_0x5c676a(0x2ac)];_0x4c4db4[_0x5c676a(0x597)]['formula']=this[_0x5c676a(0x3dc)];let _0x305293=VisuMZ[_0x5c676a(0xb36)][_0x5c676a(0xa54)][_0x5c676a(0xa10)](this,_0x41b0fe);return _0x4c4db4[_0x5c676a(0x597)][_0x5c676a(0x2ac)]=_0x368f4b,_0x305293;},Game_Action[_0x164fcd(0x2bf)]['damageStyle']=function(){const _0x2fca63=_0x164fcd;if(this['item']()[_0x2fca63(0x9ea)][_0x2fca63(0xa5d)](/<DAMAGE STYLE:[ ](.*)>/i)){if('EsNda'===_0x2fca63(0x5ba)){const _0x40fb45=String(RegExp['$1'])[_0x2fca63(0x7e1)]()[_0x2fca63(0xab7)]();return _0x40fb45;}else _0x21d430=_0x299c9b>=_0x40f6d5?_0x1cf1bf:_0x39bf3b;}return _0x2fca63(0x7ad);},Game_Action[_0x164fcd(0x2bf)]['evalDamageFormulaBattleCore']=function(_0x12b1bd){const _0x5d9948=_0x164fcd,_0x26b453=DataManager['getDamageStyle'](this['item']()),_0x12149e=VisuMZ[_0x5d9948(0x4b8)][_0x26b453];try{return _0x12149e[_0x5d9948(0x5b1)][_0x5d9948(0xa10)](this,_0x12b1bd);}catch(_0x49034e){if($gameTemp[_0x5d9948(0x44a)]())console[_0x5d9948(0x18d)](_0x49034e);return VisuMZ['BattleCore'][_0x5d9948(0xa54)]['call'](this);}},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x461)]=function(_0x577d91,_0x3134a4){const _0x2eef05=_0x164fcd;if(this[_0x2eef05(0x769)]())return _0x3134a4;const _0x1beea0=this[_0x2eef05(0x724)](),_0x8c1f3d=_0x577d91;let _0x14cdb6=[],_0x936e90=[];_0x14cdb6[_0x2eef05(0x56b)](this['_armorPenetration'][_0x2eef05(0x402)],this['_armorPenetration'][_0x2eef05(0x537)]),_0x936e90[_0x2eef05(0x56b)](this[_0x2eef05(0xc53)]['arPenRate'],this[_0x2eef05(0xc53)][_0x2eef05(0xb27)]);const _0x1abff1=this[_0x2eef05(0x510)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x5d03ae=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x165f8a=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x4b92bf=this[_0x2eef05(0x510)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x14cdb6=_0x14cdb6[_0x2eef05(0x395)](_0x8c1f3d[_0x2eef05(0x66b)]()[_0x2eef05(0xa98)](_0x281a91=>_0x281a91&&_0x281a91[_0x2eef05(0x9ea)][_0x2eef05(0xa5d)](_0x1abff1)?Number(RegExp['$1']):0x0)),_0x936e90=_0x936e90['concat'](_0x8c1f3d[_0x2eef05(0x66b)]()[_0x2eef05(0xa98)](_0x22f49b=>_0x22f49b&&_0x22f49b[_0x2eef05(0x9ea)][_0x2eef05(0xa5d)](_0x5d03ae)?Number(RegExp['$1'])/0x64:0x0)),_0x14cdb6=_0x14cdb6['concat'](_0x1beea0[_0x2eef05(0x66b)]()[_0x2eef05(0xa98)](_0xda5d10=>_0xda5d10&&_0xda5d10[_0x2eef05(0x9ea)][_0x2eef05(0xa5d)](_0x165f8a)?Number(RegExp['$1']):0x0)),_0x936e90=_0x936e90['concat'](_0x1beea0[_0x2eef05(0x66b)]()['map'](_0x4dbde8=>_0x4dbde8&&_0x4dbde8['note'][_0x2eef05(0xa5d)](_0x4b92bf)?Number(RegExp['$1'])/0x64:0x0));this[_0x2eef05(0x5e9)]()['note'][_0x2eef05(0xa5d)](_0x165f8a)&&('msZfy'===_0x2eef05(0x95a)?_0x14cdb6[_0x2eef05(0x56b)](Number(RegExp['$1'])):(this[_0x2eef05(0x509)](),_0x4a3f54[_0x2eef05(0xb36)][_0x2eef05(0x808)][_0x2eef05(0xa10)](this),this['createAutoBattleWindow']()));if(this[_0x2eef05(0x5e9)]()[_0x2eef05(0x9ea)][_0x2eef05(0xa5d)](_0x4b92bf)){if(_0x2eef05(0xc2d)==='BgWEv')_0x936e90[_0x2eef05(0x56b)](Number(RegExp['$1']));else{const _0x54708f=_0x279c58[_0x2eef05(0x5b9)](0x2)===0x0?this[_0x2eef05(0xb4f)]():this[_0x2eef05(0xbe6)]();_0x13da77[_0x2eef05(0x56b)](_0x54708f[_0x2eef05(0x148)]());}}_0x3134a4=_0x14cdb6[_0x2eef05(0xb82)]((_0x2f6c53,_0x3466f2)=>_0x2f6c53-_0x3466f2,_0x3134a4);if(_0x3134a4>0x0){if(_0x2eef05(0x936)!==_0x2eef05(0x4df))_0x3134a4=_0x936e90[_0x2eef05(0xb82)]((_0x3e3d92,_0x29f3ac)=>_0x3e3d92*(0x1-_0x29f3ac),_0x3134a4);else{const _0x6f5e4=_0x2eef05(0x226)[_0x2eef05(0x272)](_0x5889d4);_0x3a8e4e[_0x2eef05(0xb36)]['JS'][_0x398ee5]=new _0x3577b3(_0x6f5e4);}}return _0x3134a4;},VisuMZ['BattleCore']['Game_Action_executeDamage']=Game_Action['prototype'][_0x164fcd(0x457)],Game_Action[_0x164fcd(0x2bf)]['executeDamage']=function(_0x5df281,_0x42b79a){const _0x33f863=_0x164fcd;_0x42b79a=_0x42b79a*this['_multipliers']['damageRate'],_0x42b79a+=this['_multipliers']['damageFlat']*(_0x42b79a>=0x0?0x1:-0x1),_0x42b79a=this[_0x33f863(0x120)](_0x33f863(0xb5f),_0x5df281,_0x42b79a,![]),_0x42b79a=this[_0x33f863(0xc32)](_0x42b79a),_0x42b79a=Math[_0x33f863(0xa13)](_0x42b79a),this[_0x33f863(0x786)]=_0x42b79a,this[_0x33f863(0x729)]=this[_0x33f863(0x729)]||0x0,this[_0x33f863(0x729)]+=_0x42b79a,VisuMZ[_0x33f863(0xb36)][_0x33f863(0x86b)][_0x33f863(0xa10)](this,_0x5df281,_0x42b79a),this[_0x33f863(0x120)]('PostDamage%1JS',_0x5df281,_0x42b79a,!![]);},Game_Action['prototype']['applyDamageCaps']=function(_0x4165a5){const _0x494f82=_0x164fcd;if(this['isBypassDamageCap']())return _0x4165a5;return _0x4165a5=this['applySoftDamageCap'](_0x4165a5),_0x4165a5=this[_0x494f82(0x214)](_0x4165a5),_0x4165a5;},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x661)]=function(){const _0x1838db=_0x164fcd,_0x38ac43=/<BYPASS DAMAGE CAP>/i;if(this[_0x1838db(0x5e9)]()[_0x1838db(0x9ea)][_0x1838db(0xa5d)](_0x38ac43))return!![];if(this[_0x1838db(0x724)]()['traitObjects']()[_0x1838db(0x119)](_0x5c5823=>_0x5c5823&&_0x5c5823[_0x1838db(0x9ea)][_0x1838db(0xa5d)](_0x38ac43)))return!![];return!VisuMZ['BattleCore']['Settings'][_0x1838db(0x1ce)][_0x1838db(0x180)];},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0xd0e)]=function(_0x1b8764){const _0x334302=_0x164fcd;if(!VisuMZ[_0x334302(0xb36)][_0x334302(0x1de)][_0x334302(0x1ce)][_0x334302(0x523)])return _0x1b8764;const _0x40416c=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x334302(0x5e9)]()['note'][_0x334302(0xa5d)](_0x40416c))return _0x1b8764;if(this['subject']()[_0x334302(0x66b)]()[_0x334302(0x119)](_0x4b877b=>_0x4b877b&&_0x4b877b[_0x334302(0x9ea)]['match'](_0x40416c)))return _0x1b8764;const _0x3ff9d1=_0x1b8764<0x0?-0x1:0x1;_0x1b8764=Math[_0x334302(0xa69)](_0x1b8764);let _0x297866=this[_0x334302(0x724)]()['softDamageCapRate']();this[_0x334302(0x5e9)]()[_0x334302(0x9ea)]['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x297866+=Number(RegExp['$1'])/0x64);_0x297866=_0x297866['clamp'](0.01,0x1);const _0x21906a=this[_0x334302(0x6e9)](),_0x48da03=_0x297866*_0x21906a;if(_0x1b8764>_0x48da03&&_0x21906a>_0x48da03){if(_0x334302(0x5cc)===_0x334302(0x66e)){if(!_0xbf6c05[_0x334302(0x53f)]())return;if(!_0xeee0fe[_0x334302(0x3bd)])return;_0x81e942[_0x334302(0x48e)](_0x1b149d,_0x47db11),_0x114cd5['_scene'][_0x334302(0x6c2)]();const _0x5e04fe=_0x186393['getLastPluginCommandInterpreter']();_0x5e04fe&&_0x524fe4[_0x334302(0x884)]&&_0x5e04fe['setWaitMode']('cutinExit');}else{_0x1b8764-=_0x48da03;const _0x3500f4=VisuMZ['BattleCore'][_0x334302(0x1de)]['Damage'][_0x334302(0x9f0)],_0x1d4eb4=Math[_0x334302(0xc92)](0x1-_0x1b8764/((_0x21906a-_0x48da03)*_0x3500f4+_0x1b8764),0.01);_0x1b8764*=_0x1d4eb4,_0x1b8764+=_0x48da03;}}return _0x1b8764*_0x3ff9d1;},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x6e9)]=function(){const _0x46bebc=_0x164fcd;return this[_0x46bebc(0x5e9)]()[_0x46bebc(0x9ea)][_0x46bebc(0xa5d)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this['subject']()['hardDamageCap']();},Game_Action['prototype'][_0x164fcd(0x214)]=function(_0x1d6aae){const _0x2a315b=_0x164fcd;console['log'](_0x1d6aae);let _0xd99931=this[_0x2a315b(0x6e9)]();return _0x1d6aae[_0x2a315b(0x487)](-_0xd99931,_0xd99931);},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x1f5)]=function(){const _0x15c185=_0x164fcd;if(!this[_0x15c185(0x5e9)]())return![];return(this[_0x15c185(0x5e9)]()[_0x15c185(0x9ea)]||'')[_0x15c185(0xa5d)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x6c7)]=function(_0x3ba457){const _0x5f11d5=_0x164fcd;if(this[_0x5f11d5(0x1f5)]()){let _0x4b19ec=BattleManager[_0x5f11d5(0x1f1)];_0x3ba457/=_0x4b19ec[_0x5f11d5(0xd04)],this['isAttack']()&&(_0x5f11d5(0x712)===_0x5f11d5(0x5bf)?(_0x42148b+=_0x5da771,_0x5c0142+=_0x132645):_0x3ba457*=this[_0x5f11d5(0x724)]()[_0x5f11d5(0xc3b)]()+0x1),_0x3ba457=_0x3ba457>0x0?Math[_0x5f11d5(0x405)](_0x3ba457):Math[_0x5f11d5(0x923)](_0x3ba457);}return _0x3ba457;},VisuMZ['BattleCore']['Game_Action_makeDamageValueDisperse']=Game_Action['prototype'][_0x164fcd(0xbd8)],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0xbd8)]=function(_0x541249,_0x108943){const _0x2eba53=_0x164fcd;let _0x14a0e6=VisuMZ['BattleCore']['Game_Action_makeDamageValueDisperse'][_0x2eba53(0xa10)](this,_0x541249,_0x108943);return this[_0x2eba53(0x6c7)](_0x14a0e6);},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x46f)]=function(_0x258039,_0x310fb8){const _0x323a95=_0x164fcd;let _0x216e8a=(_0x258039[_0x323a95(0x296)]*_0x310fb8[_0x323a95(0x56a)]+_0x310fb8[_0x323a95(0x6be)])*_0x258039[_0x323a95(0x4d6)];_0x216e8a=this[_0x323a95(0x6c7)](_0x216e8a),this[_0x323a95(0x88e)]()&&('aZMiZ'!==_0x323a95(0x552)?_0x216e8a*=this[_0x323a95(0x724)]()['pha']:_0x397510['BattleCore'][_0x323a95(0xbf3)]['call'](this)),_0x216e8a=Math[_0x323a95(0x923)](_0x216e8a),_0x216e8a!==0x0&&(_0x323a95(0x44c)==='jEGSb'?this['x']=this[_0x323a95(0x302)]()[_0x323a95(0x921)]()[_0x323a95(0x6ab)]:(_0x258039['gainHp'](_0x216e8a),this[_0x323a95(0x406)](_0x258039)));},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x2bd)]=function(_0x3a293b,_0x3ff525){const _0x1d9fcd=_0x164fcd;let _0x560f6c=(_0x3a293b[_0x1d9fcd(0x8bd)]*_0x3ff525[_0x1d9fcd(0x56a)]+_0x3ff525[_0x1d9fcd(0x6be)])*_0x3a293b[_0x1d9fcd(0x4d6)];_0x560f6c=this[_0x1d9fcd(0x6c7)](_0x560f6c),this[_0x1d9fcd(0x88e)]()&&(_0x560f6c*=this[_0x1d9fcd(0x724)]()[_0x1d9fcd(0x823)]),_0x560f6c=Math[_0x1d9fcd(0x923)](_0x560f6c),_0x560f6c!==0x0&&(_0x3a293b[_0x1d9fcd(0x614)](_0x560f6c),this[_0x1d9fcd(0x406)](_0x3a293b));},Game_Action['prototype']['itemEffectGainTp']=function(_0x45a341,_0x1f9a61){const _0x3c6e1f=_0x164fcd;let _0x428259=Math[_0x3c6e1f(0x923)](_0x1f9a61['value1']);_0x428259=this['disperseDamage'](_0x428259),_0x428259!==0x0&&(_0x45a341[_0x3c6e1f(0xad9)](_0x428259),this[_0x3c6e1f(0x406)](_0x45a341));},VisuMZ['BattleCore']['Game_Action_apply']=Game_Action['prototype'][_0x164fcd(0xba5)],Game_Action[_0x164fcd(0x2bf)]['apply']=function(_0x2ec178){const _0x19858f=_0x164fcd;this[_0x19858f(0x120)](_0x19858f(0xa82),_0x2ec178,0x0,!![]),VisuMZ['BattleCore'][_0x19858f(0x3dd)][_0x19858f(0xa10)](this,_0x2ec178),this[_0x19858f(0x120)](_0x19858f(0x48f),_0x2ec178,this[_0x19858f(0x786)]||0x0,!![]),this['applyResultSwitches'](_0x2ec178);},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x120)]=function(_0x3053d3,_0x1c4793,_0x24071f,_0x14f7fe){const _0x59fc9c=_0x164fcd;if(this[_0x59fc9c(0x558)]||this[_0x59fc9c(0x137)])return;_0x24071f=_0x24071f||0x0;const _0x351267=_0x24071f,_0x175f73=VisuMZ[_0x59fc9c(0xb36)][_0x59fc9c(0x1de)][_0x59fc9c(0x514)],_0x33e74e=_0x3053d3[_0x59fc9c(0x272)]('');if(_0x175f73[_0x33e74e]){_0x24071f=_0x175f73[_0x33e74e]['call'](this,_0x24071f,_0x1c4793);if(_0x14f7fe)_0x24071f=_0x351267;}let _0x2d9b12=VisuMZ[_0x59fc9c(0xb36)][_0x59fc9c(0x169)](this['item'](),_0x3053d3[_0x59fc9c(0x272)](''));if(VisuMZ[_0x59fc9c(0xb36)]['JS'][_0x2d9b12]){_0x24071f=VisuMZ[_0x59fc9c(0xb36)]['JS'][_0x2d9b12][_0x59fc9c(0xa10)](this,this[_0x59fc9c(0x724)](),_0x1c4793,this[_0x59fc9c(0x5e9)](),_0x24071f);if(_0x14f7fe)_0x24071f=_0x351267;}for(const _0x44caa3 of this[_0x59fc9c(0x724)]()[_0x59fc9c(0x66b)]()){if(!_0x44caa3)continue;_0x2d9b12=VisuMZ[_0x59fc9c(0xb36)][_0x59fc9c(0x169)](_0x44caa3,_0x3053d3['format'](_0x59fc9c(0x8a6)));if(VisuMZ[_0x59fc9c(0xb36)]['JS'][_0x2d9b12]){if('YypCD'!=='YypCD')this[_0x59fc9c(0x2d1)](_0x556c8d,_0x5cf5f8,_0x55f97d);else{_0x24071f=VisuMZ[_0x59fc9c(0xb36)]['JS'][_0x2d9b12][_0x59fc9c(0xa10)](this,this[_0x59fc9c(0x724)](),_0x1c4793,_0x44caa3,_0x24071f);if(_0x14f7fe)_0x24071f=_0x351267;}}}for(const _0x3f7733 of _0x1c4793['traitObjects']()){if(!_0x3f7733)continue;_0x2d9b12=VisuMZ[_0x59fc9c(0xb36)][_0x59fc9c(0x169)](_0x3f7733,_0x3053d3[_0x59fc9c(0x272)](_0x59fc9c(0xa3f)));if(VisuMZ[_0x59fc9c(0xb36)]['JS'][_0x2d9b12]){if(_0x59fc9c(0x6d4)===_0x59fc9c(0xa28))return _0x5eac56;else{_0x24071f=VisuMZ[_0x59fc9c(0xb36)]['JS'][_0x2d9b12][_0x59fc9c(0xa10)](this,this[_0x59fc9c(0x724)](),_0x1c4793,_0x3f7733,_0x24071f);if(_0x14f7fe)_0x24071f=_0x351267;}}}return _0x24071f;},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x7f3)]=function(_0x2f5465){const _0x31362c=_0x164fcd,_0x3d82f4=this[_0x31362c(0x729)]||0x0,_0x270f89=VisuMZ[_0x31362c(0xb36)][_0x31362c(0x1de)]['Mechanics'],_0x30f4bd=_0x2f5465[_0x31362c(0x272)]('');_0x270f89[_0x30f4bd]&&_0x270f89[_0x30f4bd][_0x31362c(0xa10)](this,_0x3d82f4);let _0x73b6e4=VisuMZ[_0x31362c(0xb36)][_0x31362c(0x169)](this[_0x31362c(0x5e9)](),_0x2f5465);VisuMZ[_0x31362c(0xb36)]['JS'][_0x73b6e4]&&VisuMZ['BattleCore']['JS'][_0x73b6e4][_0x31362c(0xa10)](this,this['subject'](),this['subject'](),this[_0x31362c(0x5e9)](),_0x3d82f4);for(const _0x3f36ab of this[_0x31362c(0x724)]()[_0x31362c(0x66b)]()){if(!_0x3f36ab)continue;_0x73b6e4=VisuMZ[_0x31362c(0xb36)][_0x31362c(0x169)](_0x3f36ab,_0x2f5465),VisuMZ[_0x31362c(0xb36)]['JS'][_0x73b6e4]&&VisuMZ[_0x31362c(0xb36)]['JS'][_0x73b6e4][_0x31362c(0xa10)](this,this[_0x31362c(0x724)](),this['subject'](),_0x3f36ab,_0x3d82f4);}},Game_Action['prototype']['speed']=function(){const _0x1ec9d5=_0x164fcd;return VisuMZ[_0x1ec9d5(0xb36)][_0x1ec9d5(0x1de)][_0x1ec9d5(0x514)]['CalcActionSpeedJS']['call'](this);},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x982)]=function(){const _0x53e943=_0x164fcd;return VisuMZ['BattleCore']['Settings'][_0x53e943(0x514)][_0x53e943(0x13b)];},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x5c5)]=function(){const _0x176688=_0x164fcd;if(this['_targetBattlerKey']===_0x176688(0xa4d))return![];if(this[_0x176688(0x6e1)]===_0x176688(0x398))return![];if(!this[_0x176688(0x5e9)]())return![];return this[_0x176688(0x5e9)]()[_0x176688(0x9ea)][_0x176688(0xa5d)](/<JS TARGETS>/i);},Game_Action['prototype']['isBattleCoreTargetScope']=function(){const _0x33367a=_0x164fcd;if(this[_0x33367a(0x6e1)]===_0x33367a(0xa4d))return![];if(this[_0x33367a(0x6e1)]==='all\x20enemies')return![];if(!this[_0x33367a(0xb66)]&&this[_0x33367a(0x724)]()[_0x33367a(0xab0)]())return![];if(this[_0x33367a(0x5c5)]())return!![];if(!this['item']())return![];return typeof this[_0x33367a(0x5e9)]()[_0x33367a(0x68c)]===_0x33367a(0x2c9);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x437)]=Game_Action[_0x164fcd(0x2bf)]['isForOpponent'],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x7ec)]=function(){const _0x3bccde=_0x164fcd;if(this[_0x3bccde(0x6e1)]==='all\x20actors')return![];if(this['_targetBattlerKey']===_0x3bccde(0x398))return!![];if(this[_0x3bccde(0x25c)]()&&!this['isCustomBattleScope']())return _0x3bccde(0xbab)!==_0x3bccde(0xbab)?(_0x1f8fc0=_0x1ade6f['toUpperCase']()['trim'](),this[_0x3bccde(0xa4f)]()===_0x3f9a7c):this[_0x3bccde(0xb5a)]();else{if(_0x3bccde(0xafb)!=='CTtTC')return VisuMZ[_0x3bccde(0xb36)][_0x3bccde(0x437)][_0x3bccde(0xa10)](this);else this[_0x3bccde(0x929)](_0x566a40);}},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0xb5a)]=function(){const _0x5dacfe=_0x164fcd,_0x58b0ed=this[_0x5dacfe(0x5e9)]()[_0x5dacfe(0x68c)];return _0x58b0ed['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x892)]=Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x9b5)],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x9b5)]=function(){const _0x19ff04=_0x164fcd;if(this[_0x19ff04(0x6e1)]===_0x19ff04(0xa4d))return!![];if(this[_0x19ff04(0x6e1)]==='all\x20enemies')return![];if(this[_0x19ff04(0x25c)]()&&!this[_0x19ff04(0x5c5)]())return this[_0x19ff04(0x886)]();else{if('CvqyB'==='CvqyB')return VisuMZ[_0x19ff04(0xb36)][_0x19ff04(0x892)][_0x19ff04(0xa10)](this);else{const _0xb684c=_0x56dd27[_0x19ff04(0xb36)][_0x19ff04(0x1de)]['BattleLayout'];if(_0xb684c['StatusWindowSelectableBackHide'])return;_0x442ede[_0x19ff04(0x2bf)]['drawItemBackground'][_0x19ff04(0xa10)](this,_0x2090d6);}}},Game_Action[_0x164fcd(0x2bf)]['isForFriendBattleCore']=function(){const _0x7b78a6=_0x164fcd,_0x5b01a8=this[_0x7b78a6(0x5e9)]()['scope'];return _0x5b01a8['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x164fcd(0x2bf)]['isForAnyone']=function(){const _0x46ce7c=_0x164fcd;if(this[_0x46ce7c(0x25c)]()&&!this[_0x46ce7c(0x5c5)]()){const _0x25da25=this[_0x46ce7c(0x5e9)]()[_0x46ce7c(0x68c)];return _0x25da25['match'](/(?:ENEMY|FOE)/i)&&_0x25da25[_0x46ce7c(0xa5d)](/OR/i)&&_0x25da25[_0x46ce7c(0xa5d)](/(?:ALLY|FRIEND)/i);}else{if('xlcxG'==='jYjbh')_0x322cf4+=_0x16100f[_0x46ce7c(0x31f)]()?-_0x534be8:_0x512a27,_0x46076e+=_0x14df30;else return![];}},Game_Action['prototype']['isForAnyoneFocusFriends']=function(){const _0x1cda64=_0x164fcd;if(this[_0x1cda64(0x317)]()){if(_0x1cda64(0x7fd)!==_0x1cda64(0x7fd))this['_phase']='turn';else{const _0x3678c0=this['item']()[_0x1cda64(0x68c)];if(_0x3678c0[_0x1cda64(0xa5d)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}}return![];},Game_Action['prototype'][_0x164fcd(0x193)]=function(){const _0x3eef9e=_0x164fcd;if(this[_0x3eef9e(0x317)]()){if(_0x3eef9e(0x29f)!==_0x3eef9e(0x29f)){if(this[_0x3eef9e(0x661)]())return _0xff4600;return _0x41e575=this[_0x3eef9e(0xd0e)](_0x979993),_0x44ec66=this['applyHardDamageCap'](_0x4a1fa6),_0x5694b2;}else{const _0x4a887d=this['item']()[_0x3eef9e(0x68c)];if(_0x4a887d[_0x3eef9e(0xa5d)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}}return![];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xbb3)]=Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x65a)],Game_Action['prototype'][_0x164fcd(0x65a)]=function(){const _0x1bec43=_0x164fcd;if(this[_0x1bec43(0x25c)]()&&!this[_0x1bec43(0x5c5)]())return this[_0x1bec43(0x798)]();else{if(_0x1bec43(0x4f2)===_0x1bec43(0xbc7)){if(!_0x5ea203[_0x1bec43(0xa01)])return;const _0x5392f4=_0x5c235a[_0x1bec43(0x4c8)][_0x1bec43(0xbd6)];if(!_0x5392f4)return;_0x2c1f5a[_0x1bec43(0x48e)](_0x43eded,_0x14abde);const _0x59d5b3=_0x83d9ff['X']||0x0,_0x1918f5=_0x12bf54['Y']||0x0,_0x134934=_0x146165[_0x1bec43(0x685)]||0x0,_0x425acd=_0x47cddb[_0x1bec43(0x55b)]||0x0,_0x3cfa71=_0x33345f[_0x1bec43(0x908)]||0x1;_0x5392f4[_0x1bec43(0x378)](_0x59d5b3,_0x1918f5,_0x134934,_0x425acd,_0x3cfa71);}else return VisuMZ[_0x1bec43(0xb36)][_0x1bec43(0xbb3)][_0x1bec43(0xa10)](this);}},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x798)]=function(){const _0x39c41e=_0x164fcd;if(this[_0x39c41e(0x317)]())return!![];return![];},VisuMZ[_0x164fcd(0xb36)]['Game_Action_isForOne']=Game_Action[_0x164fcd(0x2bf)]['isForOne'],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x34c)]=function(){const _0x80edc1=_0x164fcd;if(this['_targetBattlerKey']===_0x80edc1(0xa4d))return![];if(this[_0x80edc1(0x6e1)]==='all\x20enemies')return![];if(this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']())return _0x80edc1(0xcf3)!==_0x80edc1(0xcf3)?this[_0x80edc1(0x72f)][_0x80edc1(0x842)](_0x2d29d1=>_0x2d29d1[_0x80edc1(0xcb2)]===_0x3eb1da&&_0x2d29d1[_0x80edc1(0x4ab)]===_0x28575c):this[_0x80edc1(0xa93)]();else{if('ntbOQ'==='JkERa'){if(!_0x171f9d)return 0x0;let _0x1b4a8c=0x0;const _0x56fe5d=_0x1eacc[_0x80edc1(0x9ea)];return _0x56fe5d[_0x80edc1(0xa5d)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x1b4a8c+=_0x44b3fc(_0x3a33a2['$1'])),_0x56fe5d[_0x80edc1(0xa5d)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1b4a8c+=_0x42c796(_0x26218a['$1'])),_0x1b4a8c;}else return VisuMZ[_0x80edc1(0xb36)]['Game_Action_isForOne']['call'](this);}},Game_Action[_0x164fcd(0x2bf)]['isForOneBattleCore']=function(){const _0x4c38bb=_0x164fcd;if(this[_0x4c38bb(0x317)]())return!![];return![];},VisuMZ[_0x164fcd(0xb36)]['Game_Action_isForRandom']=Game_Action[_0x164fcd(0x2bf)]['isForRandom'],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x752)]=function(){const _0x4d52b0=_0x164fcd;if(this[_0x4d52b0(0x6e1)]===_0x4d52b0(0xa4d))return![];if(this[_0x4d52b0(0x6e1)]===_0x4d52b0(0x398))return![];if(this[_0x4d52b0(0x25c)]()&&!this[_0x4d52b0(0x5c5)]()){if('LexoF'!==_0x4d52b0(0x730))return this[_0x4d52b0(0x94a)]();else{if(_0x28bb92[_0x4d52b0(0x8a7)](_0x46a84e))return![];}}else{if(_0x4d52b0(0x496)!=='rBVvG'){const _0x3aa91c=_0x33186b[_0x4d52b0(0x4c8)][_0x4d52b0(0x8c5)];_0x3aa91c['scale']['y']=0x0;}else return VisuMZ['BattleCore'][_0x4d52b0(0x716)][_0x4d52b0(0xa10)](this);}},Game_Action['prototype'][_0x164fcd(0x94a)]=function(){const _0x4c90a1=_0x164fcd,_0x261d2c=this[_0x4c90a1(0x5e9)]()[_0x4c90a1(0x68c)];return _0x261d2c['match'](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0x164fcd(0x6bb)]=Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x4a2)],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x4a2)]=function(){const _0x2c7744=_0x164fcd;if(this[_0x2c7744(0x6e1)]===_0x2c7744(0xa4d))return!![];if(this[_0x2c7744(0x6e1)]===_0x2c7744(0x398))return!![];return VisuMZ['BattleCore'][_0x2c7744(0x6bb)][_0x2c7744(0xa10)](this);},Game_Action['prototype'][_0x164fcd(0x358)]=function(){const _0x1f1e07=_0x164fcd;if(!this['item']())return![];if(this[_0x1f1e07(0xa74)]())return![];return(this[_0x1f1e07(0x5e9)]()['note']||'')[_0x1f1e07(0xa5d)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ['BattleCore'][_0x164fcd(0x862)]=Game_Action['prototype'][_0x164fcd(0xb58)],Game_Action['prototype'][_0x164fcd(0xb58)]=function(){const _0x3efa01=_0x164fcd;if(this[_0x3efa01(0x25c)]()&&!this[_0x3efa01(0x5c5)]())return this['needsSelectionBattleCore']();else{if(_0x3efa01(0x953)==='LfJIM')return VisuMZ[_0x3efa01(0xb36)][_0x3efa01(0x862)]['call'](this);else this[_0x3efa01(0x2f7)][_0x3efa01(0x511)](),this[_0x3efa01(0x219)][_0x3efa01(0x511)]();}},Game_Action[_0x164fcd(0x2bf)]['needsSelectionBattleCore']=function(){const _0x165f85=_0x164fcd,_0x272035=this[_0x165f85(0x5e9)]()[_0x165f85(0x68c)];if(_0x272035[_0x165f85(0xa5d)](/RANDOM/i))return![];if(_0x272035[_0x165f85(0xa5d)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x272035[_0x165f85(0xa5d)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x272035[_0x165f85(0xa5d)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x272035['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ['BattleCore'][_0x165f85(0x862)][_0x165f85(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x333)]=Game_Action['prototype']['makeTargets'],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x62f)]=function(){const _0x288916=_0x164fcd;let _0x3daf5c=[];return this['isBattleCoreTargetScope']()?this[_0x288916(0x5c5)]()?_0x3daf5c=this[_0x288916(0x401)]():_0x3daf5c=this[_0x288916(0x5f2)]():_0x3daf5c=VisuMZ['BattleCore'][_0x288916(0x333)]['call'](this),_0x3daf5c=this[_0x288916(0x865)](_0x3daf5c),_0x3daf5c;},Game_Action['prototype']['isSubjectValidForAnyoneSelect']=function(){const _0x53e796=_0x164fcd;return this[_0x53e796(0x724)]()[_0x53e796(0x31f)]()&&!this[_0x53e796(0x724)]()[_0x53e796(0xb2e)]();},Game_Action[_0x164fcd(0x2bf)]['makeTargetsBattleCoreJS']=function(){const _0x12ecdb=_0x164fcd,_0x366b45=VisuMZ['BattleCore'][_0x12ecdb(0x169)](this[_0x12ecdb(0x5e9)](),'Targets');if(VisuMZ[_0x12ecdb(0xb36)]['JS'][_0x366b45]){if(_0x12ecdb(0x2d6)==='TgRyT')_0x21a119[_0x12ecdb(0x638)](_0x24b6d0),this[_0x12ecdb(0x406)](_0xc5bc5b);else{targets=VisuMZ[_0x12ecdb(0xb36)][_0x12ecdb(0x333)][_0x12ecdb(0xa10)](this);const _0x2a6b0c=VisuMZ[_0x12ecdb(0xb36)][_0x12ecdb(0x169)](this[_0x12ecdb(0x5e9)](),_0x12ecdb(0x7cc));return targets=VisuMZ['BattleCore']['JS'][_0x2a6b0c][_0x12ecdb(0xa10)](this,this[_0x12ecdb(0x724)](),targets),this[_0x12ecdb(0x262)](targets);}}return this['makeTargetsBattleCore']();},Game_Action['prototype'][_0x164fcd(0x5f2)]=function(){const _0x595469=_0x164fcd;let _0x1ce400=[];const _0x5b6334=String(this[_0x595469(0x5e9)]()[_0x595469(0x68c)]);if(this['isForAnyoneFocusOpponents']()){if(this['isSubjectValidForAnyoneSelect']())return _0x1ce400=this[_0x595469(0x6c9)](),this[_0x595469(0x262)](_0x1ce400);else{if('bWuHZ'===_0x595469(0x9dd))return this['_targetIndex']=-0x1,_0x1ce400[_0x595469(0x56b)](...this[_0x595469(0x67c)]()),this['repeatTargets'](_0x1ce400);else{if(this['_lastActor']&&this[_0x595469(0x466)][_0x595469(0x893)](this[_0x595469(0x46d)])){const _0x8ff511=this[_0x595469(0x466)][_0x595469(0x990)](this[_0x595469(0x46d)]);return this[_0x595469(0xa7e)](_0x8ff511);}else return this[_0x595469(0x3f9)]();}}}if(this[_0x595469(0x9ca)]()){if('WxvTp'!==_0x595469(0x885)){_0x57a151[_0x595469(0x2bf)]['activate'][_0x595469(0xa10)](this);const _0x3ac896=this[_0x595469(0x4b2)]();_0x3ac896===_0x595469(0x7e6)&&this[_0x595469(0xa63)]();}else{if(this[_0x595469(0x86f)]())return _0x1ce400=this[_0x595469(0x6c9)](),this[_0x595469(0x262)](_0x1ce400);else{if(_0x595469(0x6f0)!==_0x595469(0x6f0)){const _0x34237e=this['svBattlerData']()[_0x595469(0x29b)]||0x0;return _0x437920[_0x595469(0xb0c)][_0x34237e];}else{if(Imported[_0x595469(0x491)]){if(_0x595469(0x538)===_0x595469(0x538)){if(VisuMZ[_0x595469(0x194)][_0x595469(0xb5c)]<1.19){let _0x292c09='';_0x292c09+=_0x595469(0x56c),_0x292c09+='in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20',_0x292c09+=_0x595469(0x282),alert(_0x292c09),SceneManager[_0x595469(0x7f7)]();}}else{if(this[_0x595469(0x3dc)]!==_0x595469(0x18e))return this['customDamageFormula'](_0x5715f5);else return _0x540028['getDamageStyle'](this[_0x595469(0x5e9)]())===_0x595469(0x7ad)?_0x2c3a20['BattleCore'][_0x595469(0xa54)]['call'](this,_0x862364):this[_0x595469(0xc85)](_0xdec2e6);}}return this['_targetIndex']=-0x1,_0x1ce400[_0x595469(0x56b)](...this['targetsForFriends']()),this[_0x595469(0x262)](_0x1ce400);}}}}if(_0x5b6334['match'](/(\d+) RANDOM ANY/i)){let _0x40daca=Number(RegExp['$1']);while(_0x40daca--){const _0x408f61=Math[_0x595469(0x5b9)](0x2)===0x0?this[_0x595469(0xb4f)]():this['friendsUnit']();_0x1ce400['push'](_0x408f61[_0x595469(0x148)]());}return this[_0x595469(0x262)](_0x1ce400);}if(_0x5b6334[_0x595469(0xa5d)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x1f8631=Number(RegExp['$1']);while(_0x1f8631--){if(_0x595469(0xbe3)!==_0x595469(0x6f7))_0x1ce400[_0x595469(0x56b)](this['opponentsUnit']()[_0x595469(0x148)]());else return _0x3bf6b2=_0x591763(_0x3de63b),_0x43eb69[_0x595469(0xa5d)](/#(.*)/i)?_0x595469(0x15e)[_0x595469(0x272)](_0x45abb3(_0x210ae0['$1'])):this[_0x595469(0xbf8)](_0x1a3d4f(_0x53817c));}return this[_0x595469(0x262)](_0x1ce400);}if(_0x5b6334[_0x595469(0xa5d)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x595469(0xb20)==='tjbMb'){const _0x124629=this[_0x595469(0x949)](),_0x224021=this[_0x595469(0x5e4)]();_0x1fd719['BattleCore'][_0x595469(0x266)][_0x595469(0xa10)](this,_0x2de0cc),this[_0x595469(0xa79)]()&&_0x124629&&this[_0x595469(0x468)]()&&(this[_0x595469(0x813)]=!this['hasBeenDefeatedBefore'](),_0x4ef2e8[_0x595469(0x2fb)](this['enemyId']())),_0x1b6f00[_0x595469(0x53f)]()&&_0x224021!==this[_0x595469(0x5e4)]()&&(this[_0x595469(0x921)]()&&this[_0x595469(0x921)]()[_0x595469(0x25e)]());}else{let _0x1d55d7=Number(RegExp['$1']);while(_0x1d55d7--){if('NjqBz'===_0x595469(0xb53))_0x1ce400[_0x595469(0x56b)](this['friendsUnit']()['trueRandomTarget']());else return this[_0x595469(0x25c)]()&&!this[_0x595469(0x5c5)]()?this['needsSelectionBattleCore']():_0x26ce71['BattleCore'][_0x595469(0x862)]['call'](this);}return this['repeatTargets'](_0x1ce400);}}if(_0x5b6334[_0x595469(0xa5d)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x1ce400[_0x595469(0x56b)](...this[_0x595469(0xbe6)]()[_0x595469(0x279)]()[_0x595469(0x69f)](_0x232c55=>_0x232c55!==this[_0x595469(0x724)]())),this[_0x595469(0x262)](_0x1ce400);return VisuMZ[_0x595469(0xb36)][_0x595469(0x333)][_0x595469(0xa10)](this);},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0xc07)]=function(_0x5c1bbf){const _0x532dc5=_0x164fcd,_0x36935c=[];for(let _0x12c2cd=0x0;_0x12c2cd<this['numTargets']();_0x12c2cd++){if('UEjAl'===_0x532dc5(0x6ca))_0x36935c['push'](_0x5c1bbf[_0x532dc5(0x148)]());else return _0x1950ca['friendsUnit']()[_0x532dc5(0x211)]();}return _0x36935c;},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x865)]=function(_0x2810c7){const _0x430149=_0x164fcd;if(!this[_0x430149(0x5e9)]())return _0x2810c7;const _0x52ee54=this[_0x430149(0x5e9)]()[_0x430149(0x9ea)];return _0x52ee54['match'](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x2810c7['remove'](this[_0x430149(0x724)]()),_0x2810c7;},VisuMZ['BattleCore']['Game_Action_itemEffectAddAttackState']=Game_Action[_0x164fcd(0x2bf)]['itemEffectAddAttackState'],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x935)]=function(_0x4f5a05,_0x11415e){const _0x20bc1c=_0x164fcd;VisuMZ['BattleCore']['Game_Action_itemEffectAddAttackState']['call'](this,_0x4f5a05,_0x11415e);if(!_0x4f5a05[_0x20bc1c(0x40e)]())return;for(const _0x5bf557 of this[_0x20bc1c(0x724)]()['attackStates']()){if(_0x5bf557===_0x4f5a05['deathStateId']()){if(_0x20bc1c(0x88b)===_0x20bc1c(0x88b)){let _0x4efa08=_0x11415e[_0x20bc1c(0x56a)];_0x4efa08*=_0x4f5a05[_0x20bc1c(0x4fe)](_0x5bf557),_0x4efa08*=this['subject']()[_0x20bc1c(0x128)](_0x5bf557),_0x4efa08*=this[_0x20bc1c(0xc35)](_0x4f5a05),Math[_0x20bc1c(0xb48)]()<_0x4efa08&&(_0x4f5a05[_0x20bc1c(0x59e)]=!![],this[_0x20bc1c(0x406)](_0x4f5a05));}else{if(!_0x336d51[_0x20bc1c(0xb36)][_0x20bc1c(0x6e0)])return;if(_0x421878[_0x20bc1c(0xb9e)]&&_0x3428e6['isCTB']())return;const _0x67ddef=_0x6fc81d[_0x20bc1c(0x279)]()[_0x20bc1c(0x69f)](_0x41c04c=>_0x41c04c[_0x20bc1c(0x57c)]()&&_0x41c04c['canInput']());_0x15b41f['_currentActor']=_0x67ddef[0x0]||null,_0x55a850[_0x20bc1c(0x6b6)]&&_0x1732e3['_currentActor'][_0x20bc1c(0x4e9)](_0x20bc1c(0x817));}}}},VisuMZ['BattleCore'][_0x164fcd(0x29a)]=Game_Action[_0x164fcd(0x2bf)]['itemEffectAddNormalState'],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x761)]=function(_0x5d8488,_0x17b34b){const _0xc40a3e=_0x164fcd;VisuMZ[_0xc40a3e(0xb36)][_0xc40a3e(0x29a)]['call'](this,_0x5d8488,_0x17b34b);if(!_0x5d8488['isImmortal']())return;if(_0x17b34b['dataId']!==_0x5d8488[_0xc40a3e(0x8eb)]())return;let _0xacad8f=_0x17b34b[_0xc40a3e(0x56a)];!this[_0xc40a3e(0x769)]()&&(_0xacad8f*=_0x5d8488[_0xc40a3e(0x4fe)](_0x17b34b['dataId']),_0xacad8f*=this[_0xc40a3e(0xc35)](_0x5d8488)),Math[_0xc40a3e(0xb48)]()<_0xacad8f&&(_0x5d8488[_0xc40a3e(0x59e)]=!![],this[_0xc40a3e(0x406)](_0x5d8488));},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xc4f)]=Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0xb18)],Game_Action[_0x164fcd(0x2bf)]['applyGlobal']=function(){const _0x44d224=_0x164fcd;VisuMZ[_0x44d224(0xb36)][_0x44d224(0xc4f)][_0x44d224(0xa10)](this),this['applyGlobalCommonEventNotetags'](),this[_0x44d224(0x9cb)]();},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x348)]=function(){const _0x58e4eb=_0x164fcd;if(!SceneManager[_0x58e4eb(0x53f)]())return;const _0x159b0c=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x2d6d20=this[_0x58e4eb(0x5e9)]()[_0x58e4eb(0x9ea)]['match'](_0x159b0c);if(_0x2d6d20){if(_0x58e4eb(0x215)!=='WOHoK'){if(this[_0x58e4eb(0xc33)])_0x422b54=_0x296879['max'](0x0,this['_frame'][_0x58e4eb(0x5e0)]-0x4);}else for(const _0x418018 of _0x2d6d20){if(!_0x418018)continue;_0x418018[_0x58e4eb(0xa5d)](_0x159b0c);const _0x5a52c5=String(RegExp['$1'])['split'](',')[_0x58e4eb(0xa98)](_0x5882db=>String(_0x5882db)[_0x58e4eb(0xab7)]()),_0x293d85=_0x5a52c5[_0x58e4eb(0xa98)](_0x44ba41=>DataManager[_0x58e4eb(0x368)](_0x44ba41));for(const _0x2aa952 of _0x293d85){if(_0x58e4eb(0xb01)!==_0x58e4eb(0x870)){const _0x50d18c=$dataCommonEvents[_0x2aa952];_0x50d18c&&$gameTemp[_0x58e4eb(0x933)](_0x2aa952);}else return this[_0x58e4eb(0x724)]()['isActor']()&&!this[_0x58e4eb(0x724)]()[_0x58e4eb(0xb2e)]();}}}},DataManager['getCommonEventIdWithName']=function(_0x2186f1){const _0x269d91=_0x164fcd;_0x2186f1=_0x2186f1['toUpperCase']()['trim'](),this[_0x269d91(0x42d)]=this[_0x269d91(0x42d)]||{};if(this[_0x269d91(0x42d)][_0x2186f1])return this['_commonEventIDs'][_0x2186f1];for(const _0x44328c of $dataCommonEvents){if(!_0x44328c)continue;let _0x524096=_0x44328c['name'];_0x524096=_0x524096[_0x269d91(0x6db)](/\x1I\[(\d+)\]/gi,''),_0x524096=_0x524096[_0x269d91(0x6db)](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x524096['toUpperCase']()['trim']()]=_0x44328c['id'];}return this[_0x269d91(0x42d)][_0x2186f1]||0x0;},Game_Action[_0x164fcd(0x2bf)]['resetResultSwitches']=function(){const _0x37b3d6=_0x164fcd;if(!SceneManager[_0x37b3d6(0x53f)]())return;const _0x47fbb3=VisuMZ[_0x37b3d6(0xb36)][_0x37b3d6(0x1de)][_0x37b3d6(0x514)];_0x47fbb3[_0x37b3d6(0x1d3)]&&$gameSwitches[_0x37b3d6(0x2a1)](_0x47fbb3[_0x37b3d6(0x1d3)],![]);_0x47fbb3['SwitchMissEvade']&&$gameSwitches['setValue'](_0x47fbb3[_0x37b3d6(0xc4c)],![]);if(_0x47fbb3['VariableDmg']){if('HJflL'!==_0x37b3d6(0x4dd)){const _0x209a9a=_0x237314[_0x37b3d6(0xc9e)](),_0x5a2054=_0x209a9a[_0x37b3d6(0xce6)]();for(const _0x106d9a of _0x5a2054){const _0x18b151=_0x12a895[_0x37b3d6(0x31f)]()?_0x106d9a['message1']:_0x106d9a[_0x37b3d6(0xc7e)];_0x18b151&&_0x3b5ad7['BattleCore'][_0x37b3d6(0x1de)][_0x37b3d6(0xa08)][_0x37b3d6(0x855)]&&(this[_0x37b3d6(0x56b)]('fnordAddedStates'),this[_0x37b3d6(0x56b)]('popBaseLine'),this[_0x37b3d6(0x56b)]('pushBaseLine'),this[_0x37b3d6(0x56b)](_0x37b3d6(0x233),_0x18b151[_0x37b3d6(0x272)](_0x3e921d[_0x37b3d6(0x16d)]())),this[_0x37b3d6(0x56b)]('wait')),_0x106d9a['id']===_0x13bbc9[_0x37b3d6(0x8eb)]()&&this[_0x37b3d6(0x56b)](_0x37b3d6(0x6c6),_0x314ca0);}}else $gameVariables[_0x37b3d6(0x2a1)](_0x47fbb3[_0x37b3d6(0x912)],0x0);}if(_0x47fbb3['VariableHeal']){if(_0x37b3d6(0x82e)===_0x37b3d6(0xb00))return _0x4a682e['BattleCore'][_0x37b3d6(0x1de)][_0x37b3d6(0xa08)]['BackColor'];else $gameVariables[_0x37b3d6(0x2a1)](_0x47fbb3['VariableHeal'],0x0);}},Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x4c5)]=function(_0x2ec1a3){const _0x17a84=_0x164fcd;if(!SceneManager[_0x17a84(0x53f)]())return;if(!_0x2ec1a3)return;const _0x2e244c=_0x2ec1a3['result'](),_0x1e2198=VisuMZ[_0x17a84(0xb36)]['Settings']['Mechanics'];_0x1e2198[_0x17a84(0x1d3)]&&_0x2e244c['critical']&&$gameSwitches[_0x17a84(0x2a1)](_0x1e2198[_0x17a84(0x1d3)],!![]);if(_0x1e2198['SwitchMissEvade']&&(_0x2e244c[_0x17a84(0x691)]||_0x2e244c['evaded'])){if(_0x17a84(0x2d0)===_0x17a84(0xc43)){const _0x5bf457=this[_0x17a84(0xae7)](_0x52fbd8);if(_0x5bf457===_0x17a84(0x821))this[_0x17a84(0x8de)](_0x3babbe);else _0x5bf457===_0x17a84(0x3e0)?this[_0x17a84(0x929)](_0x5c59df):_0xd762db[_0x17a84(0x2bf)][_0x17a84(0x432)][_0x17a84(0xa10)](this,_0x204dde);this[_0x17a84(0x739)](_0x5862fb);}else $gameSwitches[_0x17a84(0x2a1)](_0x1e2198[_0x17a84(0xc4c)],!![]);}if(_0x1e2198[_0x17a84(0x912)]){let _0x20fc4d=$gameVariables[_0x17a84(0x8a7)](_0x1e2198[_0x17a84(0x912)]);_0x2e244c[_0x17a84(0xc89)]>0x0&&(_0x20fc4d+=Math[_0x17a84(0xa69)](_0x2e244c[_0x17a84(0xc89)])),$gameVariables[_0x17a84(0x2a1)](_0x1e2198[_0x17a84(0x912)],_0x20fc4d);}if(_0x1e2198[_0x17a84(0x24e)]){if(_0x17a84(0x5f4)!==_0x17a84(0x5f4)){if(this[_0x17a84(0x313)])return this[_0x17a84(0x313)];return this[_0x17a84(0x313)]=_0x462ac2['_scene']['battleLayoutStyle'](),this[_0x17a84(0x313)];}else{let _0xcb26b0=$gameVariables[_0x17a84(0x8a7)](_0x1e2198[_0x17a84(0x24e)]);_0x2e244c['hpDamage']<0x0&&(_0xcb26b0+=Math[_0x17a84(0xa69)](_0x2e244c['hpDamage'])),$gameVariables[_0x17a84(0x2a1)](_0x1e2198[_0x17a84(0x24e)],_0xcb26b0);}}},VisuMZ[_0x164fcd(0xb36)]['Game_BattlerBase_initMembers']=Game_BattlerBase[_0x164fcd(0x2bf)]['initMembers'],Game_BattlerBase['prototype']['initMembers']=function(){const _0x6bab01=_0x164fcd;VisuMZ[_0x6bab01(0xb36)][_0x6bab01(0x8ad)][_0x6bab01(0xa10)](this),this[_0x6bab01(0x748)]();},Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0x748)]=function(){const _0x146ee3=_0x164fcd;this[_0x146ee3(0xc54)]=![];},VisuMZ['BattleCore'][_0x164fcd(0x5ce)]=Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0x72d)],Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0x72d)]=function(){const _0x1a2fcf=_0x164fcd;this[_0x1a2fcf(0x958)]={},VisuMZ['BattleCore'][_0x1a2fcf(0x5ce)][_0x1a2fcf(0xa10)](this);},Game_BattlerBase['prototype'][_0x164fcd(0x917)]=function(_0x2a2ec8){const _0x4ff34f=_0x164fcd;return this[_0x4ff34f(0x958)]=this[_0x4ff34f(0x958)]||{},this[_0x4ff34f(0x958)][_0x2a2ec8]!==undefined;},Game_BattlerBase[_0x164fcd(0x2bf)]['hardDamageCap']=function(){const _0x2976cf=_0x164fcd;if(this[_0x2976cf(0x958)][_0x2976cf(0xd08)]!==undefined)return this[_0x2976cf(0x958)][_0x2976cf(0xd08)];const _0x36c1b3=/<DAMAGE CAP:[ ](\d+)>/i,_0x2ff2a7=this[_0x2976cf(0x66b)]()[_0x2976cf(0xa98)](_0x247574=>_0x247574&&_0x247574['note']['match'](_0x36c1b3)?Number(RegExp['$1']):0x0);let _0x3b7734=_0x2ff2a7[_0x2976cf(0xd04)]>0x0?Math[_0x2976cf(0xc92)](..._0x2ff2a7):0x0;if(_0x3b7734<=0x0)_0x3b7734=VisuMZ['BattleCore'][_0x2976cf(0x1de)]['Damage'][_0x2976cf(0x6bf)];return this[_0x2976cf(0x958)][_0x2976cf(0xd08)]=_0x3b7734,this['_cache'][_0x2976cf(0xd08)];},Game_BattlerBase['prototype'][_0x164fcd(0x2ee)]=function(){const _0x2a0d3b=_0x164fcd;if(this[_0x2a0d3b(0x958)][_0x2a0d3b(0x484)]!==undefined)return this[_0x2a0d3b(0x958)][_0x2a0d3b(0x484)];let _0x5a0c1f=VisuMZ[_0x2a0d3b(0xb36)][_0x2a0d3b(0x1de)][_0x2a0d3b(0x1ce)][_0x2a0d3b(0xb29)];const _0x24f3fd=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x1af012=this[_0x2a0d3b(0x66b)]()[_0x2a0d3b(0xa98)](_0x161b0b=>_0x161b0b&&_0x161b0b[_0x2a0d3b(0x9ea)]['match'](_0x24f3fd)?Number(RegExp['$1'])/0x64:0x0);return _0x5a0c1f=_0x1af012['reduce']((_0x30e478,_0x150066)=>_0x30e478+_0x150066,_0x5a0c1f),this[_0x2a0d3b(0x958)][_0x2a0d3b(0x484)]=_0x5a0c1f,this[_0x2a0d3b(0x958)][_0x2a0d3b(0x484)]['clamp'](0.01,0x1);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x52c)]=Game_BattlerBase[_0x164fcd(0x2bf)]['die'],Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0xa23)]=function(){const _0x2c483c=_0x164fcd;VisuMZ[_0x2c483c(0xb36)][_0x2c483c(0x52c)][_0x2c483c(0xa10)](this),SceneManager['isSceneBattle']()&&this[_0x2c483c(0x8f0)]('dead');},Game_BattlerBase[_0x164fcd(0x2bf)]['battler']=function(){const _0x49ab33=_0x164fcd;if(!SceneManager['isSceneBattle']())return null;if(!SceneManager[_0x49ab33(0x4c8)][_0x49ab33(0xbd6)])return null;return SceneManager[_0x49ab33(0x4c8)]['_spriteset'][_0x49ab33(0xb10)](this);},Game_BattlerBase['prototype']['svBattlerAnchorX']=function(){const _0x32f161=_0x164fcd;return VisuMZ[_0x32f161(0xb36)][_0x32f161(0x1de)][_0x32f161(0x9ef)][_0x32f161(0x399)];},Game_BattlerBase['prototype']['svBattlerAnchorY']=function(){const _0x4c2460=_0x164fcd;return VisuMZ[_0x4c2460(0xb36)]['Settings'][_0x4c2460(0x9ef)][_0x4c2460(0x4e1)];},Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0x6e3)]=function(){const _0x41ba3c=_0x164fcd;return this[_0x41ba3c(0x31f)]&&this['isActor']()?_0x41ba3c(0x4b4)==='LXwFK'?VisuMZ[_0x41ba3c(0xb36)]['Settings'][_0x41ba3c(0x9ef)]['Shadow']:_0x519ba6[_0x41ba3c(0x53f)]()?(_0x56c8c5[_0x41ba3c(0x4c8)][_0x41ba3c(0xbd6)][_0x41ba3c(0x293)](_0x3997ce[0x0],_0x3769f0[0x1]),!![]):_0x474a99[_0x41ba3c(0xb36)][_0x41ba3c(0x4a1)][_0x41ba3c(0xa10)](this,_0xe48b06):VisuMZ[_0x41ba3c(0xb36)][_0x41ba3c(0x1de)][_0x41ba3c(0x337)][_0x41ba3c(0x2fe)];},Game_BattlerBase[_0x164fcd(0x2bf)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0x1e8)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x164fcd(0x5bd)]=function(){return 0x0;},Game_BattlerBase[_0x164fcd(0x2bf)]['createBattleUIOffsetX']=function(_0x5044b8){const _0x2adbd8=_0x164fcd;if(!_0x5044b8)return 0x0;let _0x293a6b=0x0;const _0x5523d4=_0x5044b8[_0x2adbd8(0x9ea)];if(_0x5523d4[_0x2adbd8(0xa5d)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x2adbd8(0x442)!==_0x2adbd8(0x4fa))_0x293a6b+=Number(RegExp['$1']);else{const _0x2ba399=this[_0x2adbd8(0x42c)](_0xb49080);if(_0x2ba399[_0x2adbd8(0xa5d)](/\\I\[(\d+)\]/i)){const _0x4fa226=this[_0x2adbd8(0xd1c)](_0x2f7c95),_0x59c25b=this[_0x2adbd8(0x45a)](_0x2ba399)['width'];return _0x59c25b<=_0x4fa226['width']?_0x2adbd8(0x821):_0x2adbd8(0x3e0);}}}return _0x5523d4[_0x2adbd8(0xa5d)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x293a6b+=Number(RegExp['$1'])),_0x293a6b;},Game_BattlerBase['prototype'][_0x164fcd(0x422)]=function(_0x190713){const _0x597970=_0x164fcd;if(!_0x190713)return 0x0;let _0x409c19=0x0;const _0x3c2c06=_0x190713['note'];return _0x3c2c06['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x409c19+=Number(RegExp['$1'])),_0x3c2c06[_0x597970(0xa5d)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x409c19+=Number(RegExp['$2'])),_0x409c19;},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x7fc)]=Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0x79a)],Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0x79a)]=function(_0x3f02dc){const _0x5f20c4=_0x164fcd;if(_0x3f02dc===this[_0x5f20c4(0x8eb)]()&&this[_0x5f20c4(0x40e)]())return!![];return VisuMZ[_0x5f20c4(0xb36)][_0x5f20c4(0x7fc)][_0x5f20c4(0xa10)](this,_0x3f02dc);},Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0x40e)]=function(){return this['_immortal'];},Game_BattlerBase['prototype'][_0x164fcd(0x6f3)]=function(_0x241faa){const _0x2bcea3=_0x164fcd;_0x241faa?'mAIIf'===_0x2bcea3(0x679)?this[_0x2bcea3(0xa96)]():(this['battleStatusWindowAnimationContainer']()['addChild'](_0x432a01),_0x55d531['battleStatusSprite']=!![]):this['removeImmortal']();},Game_BattlerBase['prototype']['addImmortal']=function(){const _0x1b94d8=_0x164fcd;if(this['isDead']())return;this[_0x1b94d8(0xc54)]=!![],this[_0x1b94d8(0x59e)]=![];},Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0x212)]=function(){const _0x3682d8=_0x164fcd,_0x2219ce=this[_0x3682d8(0x949)]();this['_immortal']=![],_0x2219ce&&this[_0x3682d8(0x59e)]&&this[_0x3682d8(0xa23)](),this[_0x3682d8(0x59e)]=![],this[_0x3682d8(0x72d)](),this[_0x3682d8(0x468)]()&&_0x2219ce&&(this[_0x3682d8(0x6c6)](),this['requestMotionRefresh']());},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x839)]=Game_Action['prototype'][_0x164fcd(0x9e8)],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x9e8)]=function(){const _0x1f576b=_0x164fcd;return this['item']()?VisuMZ['BattleCore']['Game_Action_numRepeats'][_0x1f576b(0xa10)](this):0x0;},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x40d)]=Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x7ac)],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0x7ac)]=function(){const _0x3563f2=_0x164fcd;this[_0x3563f2(0x724)]()&&this[_0x3563f2(0x724)]()['canAttack']()?VisuMZ[_0x3563f2(0xb36)]['Game_Action_setAttack'][_0x3563f2(0xa10)](this):this[_0x3563f2(0x7bf)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xbc8)]=Game_BattlerBase['prototype'][_0x164fcd(0xafa)],Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0xafa)]=function(){const _0x18a55e=_0x164fcd;if(!this[_0x18a55e(0x83b)]())return![];return VisuMZ['BattleCore'][_0x18a55e(0xbc8)]['call'](this);},Game_BattlerBase['prototype'][_0x164fcd(0x83b)]=function(){const _0x2edf04=_0x164fcd;for(const _0xc91a01 of this[_0x2edf04(0x66b)]()){if(!_0xc91a01)continue;if(_0xc91a01['note'][_0x2edf04(0xa5d)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x363)]=Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0xabc)],Game_Action[_0x164fcd(0x2bf)][_0x164fcd(0xabc)]=function(){const _0x39de7b=_0x164fcd;if(this['subject']()[_0x39de7b(0xbb6)]()){if(_0x39de7b(0x499)!==_0x39de7b(0x499)){if(this['battleStatusSprite'])return;}else VisuMZ[_0x39de7b(0xb36)][_0x39de7b(0x363)][_0x39de7b(0xa10)](this);}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x2d2)]=Game_BattlerBase[_0x164fcd(0x2bf)]['canGuard'],Game_BattlerBase['prototype'][_0x164fcd(0xbb6)]=function(){const _0x2bc8a3=_0x164fcd;if(!this['canGuardBattleCore']())return![];return VisuMZ[_0x2bc8a3(0xb36)][_0x2bc8a3(0x2d2)][_0x2bc8a3(0xa10)](this);},Game_BattlerBase['prototype']['canGuardBattleCore']=function(){const _0x5a1972=_0x164fcd;for(const _0x55ec92 of this['traitObjects']()){if(!_0x55ec92)continue;if(_0x55ec92[_0x5a1972(0x9ea)][_0x5a1972(0xa5d)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0x97a)]=function(){const _0x33f960=_0x164fcd;for(const _0x5d97b5 of this[_0x33f960(0x66b)]()){if(!_0x5d97b5)continue;if(_0x5d97b5[_0x33f960(0x9ea)][_0x33f960(0xa5d)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler[_0x164fcd(0x2bf)]['allowRandomSpeed']=function(){const _0x48a68c=_0x164fcd;return VisuMZ['BattleCore'][_0x48a68c(0x1de)]['Mechanics'][_0x48a68c(0x13b)];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xc68)]=Game_Battler['prototype'][_0x164fcd(0x6cb)],Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x6cb)]=function(){const _0x51890b=_0x164fcd;if(SceneManager[_0x51890b(0x53f)]()){if(BattleManager[_0x51890b(0xb52)]()){if(this[_0x51890b(0x15f)]()<=0x0)return;}else{if($gameTroop['turnCount']()<=0x0)return;}}if(SceneManager[_0x51890b(0x53f)]()&&BattleManager['isTpb']()&&this['_lastRegenFrameCount']===Graphics[_0x51890b(0x738)]){if(_0x51890b(0x5be)===_0x51890b(0x5be))return;else _0x534432(_0x207d41[_0x51890b(0x272)]('BTB')),_0x1f10a3[_0x51890b(0x7f7)]();}this[_0x51890b(0x643)]=Graphics[_0x51890b(0x738)],SceneManager['isSceneBattle']()&&this[_0x51890b(0x54f)](_0x51890b(0x322)),VisuMZ[_0x51890b(0xb36)][_0x51890b(0xc68)][_0x51890b(0xa10)](this),SceneManager[_0x51890b(0x53f)]()&&(this[_0x51890b(0x946)](),this[_0x51890b(0x54f)]('PostRegenerateJS'));},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x946)]=function(){const _0xad2bd0=_0x164fcd;if(SceneManager[_0xad2bd0(0x53f)]())for(const _0x30fae1 of this[_0xad2bd0(0x66b)]()){if(!_0x30fae1)continue;this[_0xad2bd0(0x12d)](_0x30fae1);}},Game_Battler[_0x164fcd(0x2bf)]['onRegeneratePlayStateAnimation']=function(_0xfbe60c){const _0x1e0df4=_0x164fcd;if(!Imported['VisuMZ_0_CoreEngine'])return;if(!SceneManager['isSceneBattle']())return;if(this['isDead']())return;if(this[_0x1e0df4(0xc49)]())return;if(_0xfbe60c[_0x1e0df4(0x9ea)][_0x1e0df4(0xa5d)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if('rrNfp'!==_0x1e0df4(0x54a)){const _0x99e3bb=Number(RegExp['$1']);$gameTemp[_0x1e0df4(0x867)]([this],_0x99e3bb,![],![]);}else{if(this[_0x1e0df4(0xb6c)]<0xff)this[_0x1e0df4(0xb6c)]+=0x10;}}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x7e9)]=Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xccb)],Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xccb)]=function(){const _0x2a4d1d=_0x164fcd;this[_0x2a4d1d(0x54f)]('PreStartTurnJS'),VisuMZ[_0x2a4d1d(0xb36)][_0x2a4d1d(0x7e9)][_0x2a4d1d(0xa10)](this),this[_0x2a4d1d(0x54f)](_0x2a4d1d(0x911));},VisuMZ['BattleCore'][_0x164fcd(0x2f2)]=Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xc2e)],Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xc2e)]=function(){const _0x22174b=_0x164fcd;this['processBattleCoreJS']('PreEndTurnJS'),VisuMZ[_0x22174b(0xb36)]['Game_Battler_onTurnEnd'][_0x22174b(0xa10)](this),this['processBattleCoreJS'](_0x22174b(0xc40));},Game_Battler[_0x164fcd(0x2bf)]['processBattleCoreJS']=function(_0x1ac0ed){const _0x357fc4=_0x164fcd;if(this[_0x357fc4(0x558)]||this['_tempActor'])return;const _0x407b6b=VisuMZ[_0x357fc4(0xb36)][_0x357fc4(0x1de)][_0x357fc4(0x514)];if(_0x407b6b[_0x1ac0ed])_0x407b6b[_0x1ac0ed][_0x357fc4(0xa10)](this);for(const _0x4ecf47 of this[_0x357fc4(0x66b)]()){if(!_0x4ecf47)continue;key=VisuMZ[_0x357fc4(0xb36)][_0x357fc4(0x169)](_0x4ecf47,_0x1ac0ed),VisuMZ[_0x357fc4(0xb36)]['JS'][key]&&('xrRML'!==_0x357fc4(0x40c)?VisuMZ['BattleCore']['JS'][key][_0x357fc4(0xa10)](this,this,this,_0x4ecf47,0x0):(this['_animationCount']++,this[_0x357fc4(0x533)]=!![]));}},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x657)]=function(){const _0x2673b1=_0x164fcd;return VisuMZ[_0x2673b1(0xb36)][_0x2673b1(0x1de)][_0x2673b1(0x9ef)][_0x2673b1(0xb1a)]||![];},Game_Battler['prototype']['isChanting']=function(){const _0x403e41=_0x164fcd;if(this[_0x403e41(0x9f7)]()){if(this['chantStyle']()){if(this[_0x403e41(0xa9a)][_0x403e41(0x119)](_0x1f808d=>_0x1f808d[_0x403e41(0x5e9)]()&&_0x1f808d[_0x403e41(0x33d)]()))return!![];}else{if(this[_0x403e41(0xa9a)][_0x403e41(0x119)](_0x3c4127=>_0x3c4127[_0x403e41(0x5e9)]()&&_0x3c4127[_0x403e41(0x47f)]())){if('otsiJ'!==_0x403e41(0xa9b))return!![];else{this[_0x403e41(0x1b8)](_0x27373a)?this['battleStatusWindowAnimationContainer']()[_0x403e41(0x6de)](_0x50cc80):this['_animationContainer']['removeChild'](_0x52a97a);this[_0x403e41(0x804)][_0x403e41(0x6de)](_0x1223ad),this[_0x403e41(0x868)][_0x403e41(0x6de)](_0x56c453),this[_0x403e41(0xae8)][_0x403e41(0x494)](_0x389d8f);if(this[_0x403e41(0x94c)])this[_0x403e41(0x94c)]['remove'](_0x4c2f50);}}}}if(BattleManager[_0x403e41(0xb52)]()&&this[_0x403e41(0x4a8)]===_0x403e41(0x53c)){if(this[_0x403e41(0x657)]()){if('ggRmu'!=='NCmiN')return this[_0x403e41(0x1d2)]()&&this['currentAction']()[_0x403e41(0x5e9)]()&&this[_0x403e41(0x1d2)]()['isMagical']();else{if(!_0x3aeb79[_0x403e41(0x818)])return;if(!_0x22a832[_0x403e41(0x53f)]())return;if(this[_0x403e41(0x468)]())return;if(this[_0x403e41(0xc49)]())return;if(_0x27cb4a[_0x403e41(0x9ea)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x2de5a9=_0x3a41ee(_0x2ab0c4['$1']);_0x566181['requestFauxAnimation']([this],_0x2de5a9,![],![]);}}}else{if('otune'===_0x403e41(0xb07))return this[_0x403e41(0x1d2)]()&&this[_0x403e41(0x1d2)]()[_0x403e41(0x5e9)]()&&this[_0x403e41(0x1d2)]()['isMagicSkill']();else _0x5ac381*=this[_0x403e41(0x724)]()[_0x403e41(0xc3b)]()+0x1;}}return![];},Game_Battler[_0x164fcd(0x2bf)]['isCharging']=function(){const _0x563097=_0x164fcd;if(BattleManager[_0x563097(0xb52)]()&&this[_0x563097(0x4a8)]===_0x563097(0x53c))return this[_0x563097(0x657)]()?this[_0x563097(0x1d2)]()&&this[_0x563097(0x1d2)]()[_0x563097(0x5e9)]()&&!this[_0x563097(0x1d2)]()['isMagical']():this['currentAction']()&&this[_0x563097(0x1d2)]()[_0x563097(0x5e9)]()&&!this['currentAction']()[_0x563097(0x47f)]();return![];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xb39)]=Game_Battler[_0x164fcd(0x2bf)]['clearDamagePopup'],Game_Battler['prototype'][_0x164fcd(0x2f0)]=function(){const _0x2bfd66=_0x164fcd;VisuMZ[_0x2bfd66(0xb36)][_0x2bfd66(0xb39)][_0x2bfd66(0xa10)](this),this[_0x2bfd66(0x3be)]=[];},Game_Battler['prototype'][_0x164fcd(0x551)]=function(){const _0x74500=_0x164fcd;if(!this[_0x74500(0x3be)])this[_0x74500(0x2f0)]();return this['_damagePopupArray']['length']>0x0;},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x7b1)]=function(){const _0x427449=_0x164fcd;if(!SceneManager[_0x427449(0x53f)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x427449(0x3be)])this['clearDamagePopup']();this[_0x427449(0xcc5)]();const _0x15241f=this['battler']();if(_0x15241f)_0x15241f['setupDamagePopup']();},Game_Battler['prototype']['createSeparateDamagePopups']=function(){const _0xe23cd4=_0x164fcd,_0x40db49=this[_0xe23cd4(0xc9e)]();if(_0x40db49[_0xe23cd4(0x691)]||_0x40db49[_0xe23cd4(0xbec)]){if('UKuCC'===_0xe23cd4(0x341)){const _0x1133e4=JsonEx[_0xe23cd4(0x835)](_0x40db49);_0x1133e4[_0xe23cd4(0x9e4)]=![],_0x1133e4[_0xe23cd4(0x14a)]=0x0,this[_0xe23cd4(0x3be)]['push'](_0x1133e4);}else this[_0xe23cd4(0x23a)](this[_0xe23cd4(0x2ce)]);}if(_0x40db49[_0xe23cd4(0x9e4)]){const _0x839551=JsonEx[_0xe23cd4(0x835)](_0x40db49);_0x839551[_0xe23cd4(0x691)]=![],_0x839551['evaded']=![],_0x839551[_0xe23cd4(0x14a)]=0x0,this[_0xe23cd4(0x3be)][_0xe23cd4(0x56b)](_0x839551);}if(_0x40db49[_0xe23cd4(0x14a)]!==0x0){if(_0xe23cd4(0x309)!==_0xe23cd4(0x309))_0x3e29db+=_0x404516[_0xe23cd4(0xa69)](_0x59d2c1[_0xe23cd4(0xc89)]);else{const _0x493671=JsonEx['makeDeepCopy'](_0x40db49);_0x493671[_0xe23cd4(0x691)]=![],_0x493671[_0xe23cd4(0xbec)]=![],_0x493671['hpAffected']=![],this[_0xe23cd4(0x3be)][_0xe23cd4(0x56b)](_0x493671);}}},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x859)]=function(){const _0x399a0d=_0x164fcd;if(!this[_0x399a0d(0x3be)])this['clearDamagePopup']();if(VisuMZ['BattleCore'][_0x399a0d(0x1de)][_0x399a0d(0x1ce)][_0x399a0d(0xa3a)]){if('BCjhC'===_0x399a0d(0x364))return this['_damagePopupArray']['shift']();else{if(!_0x3ddbe1[_0x399a0d(0x2bf)][_0x399a0d(0xbb7)][_0x399a0d(0xa10)](this,_0x27ed27))return!![];if(!_0x3cdbec['prototype']['checkShowHideSwitchNotetags']['call'](this,_0x5323d4))return!![];if(!_0x2dc131[_0x399a0d(0x2bf)][_0x399a0d(0x35a)][_0x399a0d(0xa10)](this,_0x1b19b2))return!![];}}else return this[_0x399a0d(0x3be)][_0x399a0d(0xa22)]();},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x7ab)]=function(_0x237cd2,_0x576abc){const _0x24c4ad=_0x164fcd;if(!SceneManager[_0x24c4ad(0x53f)]())return;if(BattleManager[_0x24c4ad(0x361)]())return;if(!this['battler']())return;if(_0x237cd2['length']<=0x0)return;_0x576abc=_0x576abc||{},_0x576abc[_0x24c4ad(0xbf8)]=_0x576abc[_0x24c4ad(0xbf8)]||_0x24c4ad(0x4dc),_0x576abc[_0x24c4ad(0xa77)]=_0x576abc[_0x24c4ad(0xa77)]||[0x0,0x0,0x0,0x0],_0x576abc['flashDuration']=_0x576abc[_0x24c4ad(0x39b)]||0x0,this['battler']()[_0x24c4ad(0x7ab)](_0x237cd2,_0x576abc);},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xabd)]=function(_0x5815a4,_0x288cf6,_0x480210){const _0x21fd6a=_0x164fcd;if(!SceneManager['isSceneBattle']())return;if(BattleManager[_0x21fd6a(0x361)]())return;if(!this['battler']())return;if(_0x288cf6[_0x21fd6a(0xd04)]<=0x0)return;_0x480210=_0x480210||{},_0x480210[_0x21fd6a(0xbf8)]=_0x480210['textColor']||_0x21fd6a(0x4dc),_0x480210[_0x21fd6a(0xa77)]=_0x480210[_0x21fd6a(0xa77)]||[0x0,0x0,0x0,0x0],_0x480210[_0x21fd6a(0x39b)]=_0x480210[_0x21fd6a(0x39b)]||0x0,this[_0x21fd6a(0x921)]()['setupIconTextPopup'](_0x5815a4,_0x288cf6,_0x480210);},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x5e5)]=function(){const _0x458a2c=_0x164fcd;if(this[_0x458a2c(0xc49)]())return![];if(this['isAlive']()&&this['isAppeared']())return!![];if(this[_0x458a2c(0xa79)]()&&this[_0x458a2c(0x86a)]()){if(this[_0x458a2c(0x468)]()&&this['allowCollapse']())return![];}else{if(this[_0x458a2c(0x468)]())return _0x458a2c(0x4fc)===_0x458a2c(0x4fc)?![]:_0x4cd1f5[_0x458a2c(0xb4f)]()[_0x458a2c(0x211)]();}return!![];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x5b4)]=Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xac0)],Game_Battler['prototype'][_0x164fcd(0xac0)]=function(){const _0x3f19a4=_0x164fcd;VisuMZ[_0x3f19a4(0xb36)][_0x3f19a4(0x5b4)][_0x3f19a4(0xa10)](this),this[_0x3f19a4(0xbef)]();},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x74c)]=function(){return!![];},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x3de)]=function(){return![];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xb1e)]=Game_Battler['prototype'][_0x164fcd(0x512)],Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x512)]=function(_0x29cb39){const _0xba594f=_0x164fcd;VisuMZ['BattleCore'][_0xba594f(0xb1e)][_0xba594f(0xa10)](this,_0x29cb39),this[_0xba594f(0x8cc)](_0x29cb39),this[_0xba594f(0x2f0)]();},Game_Battler['prototype'][_0x164fcd(0x8cc)]=function(_0x27a769){const _0x296392=_0x164fcd;this[_0x296392(0x295)](![]),this[_0x296392(0xb04)]=undefined,this[_0x296392(0xc19)]=undefined;},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x656)]=Game_Battler['prototype'][_0x164fcd(0x4c7)],Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x4c7)]=function(){const _0x1cad54=_0x164fcd;VisuMZ['BattleCore'][_0x1cad54(0x656)][_0x1cad54(0xa10)](this),this[_0x1cad54(0x3ef)]();},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x3ef)]=function(){this['_forcedHomeX']=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x164fcd(0xb36)]['Game_Battler_performActionStart']=Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x998)],Game_Battler['prototype'][_0x164fcd(0x998)]=function(_0xf0ff6){const _0x25f37f=_0x164fcd;VisuMZ[_0x25f37f(0xb36)]['Game_Battler_performActionStart'][_0x25f37f(0xa10)](this,_0xf0ff6);if(!_0xf0ff6[_0x25f37f(0xc99)]()){const _0xf50fa0=this[_0x25f37f(0x921)]();_0xf50fa0&&(_0x25f37f(0xa72)===_0x25f37f(0x2a5)?_0x517e65[_0x25f37f(0xb36)][_0x25f37f(0x488)]['call'](this):_0xf50fa0[_0x25f37f(0x275)]());}this['setBattlerFlip'](![]);},Game_Battler[_0x164fcd(0x2bf)]['performActionEndMembers']=function(){const _0x5b47df=_0x164fcd,_0x569f5b=this[_0x5b47df(0x76e)];this[_0x5b47df(0x76e)]=![];if(BattleManager[_0x5b47df(0xa2f)]()&&this[_0x5b47df(0xa42)]()){if(_0x5b47df(0x81f)===_0x5b47df(0x136))_0x12a50f[_0x5b47df(0xb36)][_0x5b47df(0x288)][_0x5b47df(0xa10)](this,_0x405a28);else{const _0x19043e=this['battler']();if(_0x19043e&&_0x569f5b)_0x19043e[_0x5b47df(0x275)]();return;}}const _0x248921=this['battler']();if(_0x248921)_0x248921['stepBack']();this[_0x5b47df(0x295)](![]),this[_0x5b47df(0x1f0)]();},Game_Battler['prototype'][_0x164fcd(0x8f4)]=function(_0x3e6140){const _0xee548e=_0x164fcd;if(_0x3e6140[_0xee548e(0x359)]())_0xee548e(0x1b2)==='NEUZO'?this['requestMotion'](_0xee548e(0x39d)):this[_0xee548e(0x2c0)]();else{if(_0x3e6140[_0xee548e(0xc99)]())this['requestMotion'](_0xee548e(0x7a7));else{if(_0x3e6140[_0xee548e(0x33d)]()){if(_0xee548e(0x9fc)!==_0xee548e(0x90e))this['requestMotion'](_0xee548e(0xc3c));else{const _0x38d95b=this[_0xee548e(0x80c)];_0x38d95b[_0xee548e(0xaa5)](_0x63aee5,0x0,_0x1871b0['y'],_0x38d95b[_0xee548e(0x96e)],_0xee548e(0x37f));}}else{if(_0x3e6140[_0xee548e(0x9bc)]())[0x1,0x2,0x5,0x6]['includes'](_0x3e6140[_0xee548e(0x5e9)]()[_0xee548e(0x597)]['type'])?this[_0xee548e(0x2c0)]():this[_0xee548e(0x8f0)](_0xee548e(0x880));else _0x3e6140['isItem']()&&this[_0xee548e(0x8f0)](_0xee548e(0x5e9));}}}},Game_Battler[_0x164fcd(0x2bf)]['getAttackMotion']=function(){const _0x358e53=_0x164fcd;return $dataSystem[_0x358e53(0xb0c)][0x0];},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x6bc)]=function(){const _0x287b5b=_0x164fcd,_0x259f26=this['getAttackMotion']();return _0x259f26?_0x259f26[_0x287b5b(0x2b5)]:0x0;},Game_Battler['prototype']['performSubstitute']=function(_0x36ed4a){const _0xb729c7=_0x164fcd;if(!$gameSystem[_0xb729c7(0x709)]())return;const _0x3257bf=this[_0xb729c7(0x921)](),_0x1c7b1d=_0x36ed4a[_0xb729c7(0x921)]();if(!_0x3257bf||!_0x1c7b1d)return;const _0x260165=_0x1c7b1d['_baseX'],_0x579b4b=_0x1c7b1d[_0xb729c7(0x3db)];this[_0xb729c7(0x887)](_0x260165,_0x579b4b,0x0,![],_0xb729c7(0x28c),-0x1),_0x3257bf[_0xb729c7(0x682)]();const _0x434a9b=VisuMZ[_0xb729c7(0xb36)][_0xb729c7(0x1de)][_0xb729c7(0x8b1)];let _0x3aada8=(_0x1c7b1d[_0xb729c7(0xab5)]+_0x3257bf[_0xb729c7(0xab5)])/0x2;_0x3aada8*=this[_0xb729c7(0x31f)]()?0x1:-0x1;let _0x4e5f7a=_0x434a9b['StepDistanceY']*(this['isActor']()?0x1:-0x1);_0x36ed4a[_0xb729c7(0xd1e)](_0x3aada8,_0x4e5f7a,0x0,![],_0xb729c7(0x28c)),_0x1c7b1d['updatePosition']();},Game_Battler['prototype'][_0x164fcd(0x8f0)]=function(_0x3c5c68){const _0x123732=_0x164fcd;if(SceneManager[_0x123732(0x53f)]()){const _0x4b154d=this[_0x123732(0x921)]();_0x4b154d&&(_0x4b154d[_0x123732(0xb05)](_0x3c5c68),['swing',_0x123732(0xbc1),_0x123732(0x39d)][_0x123732(0x893)](_0x3c5c68)&&this['performWeaponAnimation']());}this[_0x123732(0xbef)]();},Game_Battler['prototype'][_0x164fcd(0x629)]=function(){},Game_Battler['prototype'][_0x164fcd(0x984)]=function(_0x3949b6){const _0x1c64fe=_0x164fcd;if(SceneManager[_0x1c64fe(0x53f)]()){const _0x320ef4=this[_0x1c64fe(0x921)]();if(_0x320ef4)_0x320ef4[_0x1c64fe(0xaeb)](_0x3949b6);}},Game_Battler[_0x164fcd(0x2bf)]['startAttackWeaponAnimation']=function(){const _0x33c2d9=_0x164fcd;if(SceneManager['isSceneBattle']()){const _0x30fb96=this['getAttackWeaponAnimationId']();this[_0x33c2d9(0x984)](_0x30fb96);}},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x1c2)]=function(_0x49d5a6,_0x3e4685){const _0x188c04=_0x164fcd;if(!_0x49d5a6)return;if(!_0x49d5a6[_0x188c04(0x5e9)]())return;if(_0x49d5a6[_0x188c04(0x359)]())return;if(_0x49d5a6['isGuard']())return;if(_0x49d5a6[_0x188c04(0x88e)]())return;let _0x511d9a=0x0;const _0x44380a=VisuMZ[_0x188c04(0xb36)]['Settings']['ActionSequence'],_0x4c1473=_0x49d5a6[_0x188c04(0x5e9)]()[_0x188c04(0x9ea)];if(_0x4c1473[_0x188c04(0xa5d)](/<CAST ANIMATION: (\d+)>/i))_0x511d9a=Number(RegExp['$1']);else{if(_0x4c1473[_0x188c04(0xa5d)](/<NO CAST ANIMATION>/i))return;else{if(_0x49d5a6[_0x188c04(0x769)]())_0x188c04(0x991)!==_0x188c04(0x3bb)?_0x511d9a=_0x44380a[_0x188c04(0x6e7)]:this[_0x188c04(0x30c)]();else{if(_0x49d5a6[_0x188c04(0x510)]()){if(_0x188c04(0xb64)!==_0x188c04(0xca8))_0x511d9a=_0x44380a[_0x188c04(0xb74)];else{if(!_0x4cdfa1[_0x188c04(0x53f)]())return;if(!_0x11ca69[_0x188c04(0x3bd)])return;_0x5a8880['ConvertParams'](_0x176965,_0x27c3db);const _0xc8693f=_0x2abfb3[_0x188c04(0xb36)]['CreateCutinSettings'](_0x1f311a);_0x48dfdb[_0x188c04(0x4c8)][_0x188c04(0xad1)](_0xc8693f);const _0x5dbc04=_0x3a9cb2[_0x188c04(0x1da)]();_0x5dbc04&&_0x37214a[_0x188c04(0x2e8)]&&_0x5dbc04['setWaitMode'](_0x188c04(0x43c));}}else{if(_0x49d5a6[_0x188c04(0x33d)]()){if('dghVQ'!==_0x188c04(0xb2c)){if(!this['_battler']['isSpriteVisible']())return;if(_0x4e053e[_0x188c04(0x361)]())return;const _0x420bde=_0x4c0aa7['BattleCore'][_0x188c04(0x1de)][_0x188c04(0x1ce)],_0x465c4a=new _0x28acf0();_0x465c4a['_duration']=_0x420bde['PopupDuration'],this[_0x188c04(0x9c0)](_0x465c4a),_0x465c4a['setupTextPopup'](_0x16215a,_0x11770a),this[_0x188c04(0x8a3)](_0x465c4a);}else _0x511d9a=_0x44380a[_0x188c04(0x731)];}}}}}_0x511d9a>0x0&&$gameTemp[_0x188c04(0x9eb)]([this],_0x511d9a,!!_0x3e4685);},Game_Battler['prototype'][_0x164fcd(0xa16)]=function(){const _0xed67a7=_0x164fcd;SoundManager[_0xed67a7(0x380)]();let _0x39592c=VisuMZ[_0xed67a7(0xb36)][_0xed67a7(0x1de)][_0xed67a7(0x8b1)][_0xed67a7(0x1aa)];if(_0x39592c>0x0){if(_0xed67a7(0x501)==='BvNfE')Imported[_0xed67a7(0x818)]?$gameTemp['requestFauxAnimation']([this],_0x39592c):$gameTemp[_0xed67a7(0x9eb)]([this],_0x39592c);else return 0x1*this[_0xed67a7(0x31d)];}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x435)]=Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x42e)],Game_Battler['prototype'][_0x164fcd(0x42e)]=function(){const _0x1ecfd8=_0x164fcd;VisuMZ[_0x1ecfd8(0xb36)][_0x1ecfd8(0x435)]['call'](this),this[_0x1ecfd8(0xcb7)](),this['performShakeFlinch']();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x75d)]=Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x91e)],Game_Battler['prototype']['performMiss']=function(){const _0x5b4949=_0x164fcd;VisuMZ[_0x5b4949(0xb36)][_0x5b4949(0x75d)][_0x5b4949(0xa10)](this),this[_0x5b4949(0xcb7)]();},VisuMZ['BattleCore']['Game_Battler_performEvasion']=Game_Battler['prototype'][_0x164fcd(0xd0d)],Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xd0d)]=function(){const _0x119e66=_0x164fcd;VisuMZ['BattleCore']['Game_Battler_performEvasion']['call'](this),this[_0x119e66(0xcb7)]();},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xcb7)]=function(){const _0x10d767=_0x164fcd;if(!$gameSystem[_0x10d767(0x709)]())return;if(this[_0x10d767(0x76e)])return;this['_flinched']=!![];const _0x2eb0d0=this['battler']();if(_0x2eb0d0)_0x2eb0d0[_0x10d767(0x16e)]();},Game_Battler[_0x164fcd(0x2bf)]['performShakeFlinch']=function(){const _0x160631=_0x164fcd;if(!this[_0x160631(0x74c)]())return;const _0x4bcecd=VisuMZ[_0x160631(0xb36)][_0x160631(0x1de)][_0x160631(0x9ef)];if(!(_0x4bcecd[_0x160631(0x613)]??![]))return;if(this[_0x160631(0xd00)]<=0x0)return;const _0x1f55d0=this[_0x160631(0x921)]();if(_0x1f55d0){if(_0x160631(0x38d)===_0x160631(0x1f9))_0x3f5934[_0x160631(0xb36)][_0x160631(0xc08)][_0x160631(0xa10)](this,_0xe0192);else{const _0x2ae5e7=this[_0x160631(0xd00)],_0x261ee0=(_0x2ae5e7/this[_0x160631(0x296)])['clamp'](0.8,0x1),_0x49df70=_0x4bcecd[_0x160631(0x84c)]??0x30,_0x51088c=_0x261ee0*_0x49df70;_0x1f55d0[_0x160631(0x1fd)](_0x51088c,_0x261ee0);}}},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x1f0)]=function(){const _0x11031a=_0x164fcd;if(this[_0x11031a(0x468)]()&&this[_0x11031a(0xc46)]!==_0x11031a(0x822)){this[_0x11031a(0x8f0)](_0x11031a(0x822));return;}if(this[_0x11031a(0x468)]()&&this[_0x11031a(0xc46)]===_0x11031a(0x822))return;if(!!this['_freezeMotionData'])return;if(this[_0x11031a(0xa79)]()){if(!this[_0x11031a(0x2dc)]()&&this!==BattleManager['_subject']){if(this[_0x11031a(0x921)]())this['battler']()[_0x11031a(0x25e)]();}this[_0x11031a(0xbef)]();return;}if(this[_0x11031a(0xc46)]==='victory')return;if(this[_0x11031a(0xc46)]==='escape'&&!BattleManager[_0x11031a(0xa42)]())return;if(this['_motionType']===_0x11031a(0x7a7)&&!BattleManager[_0x11031a(0xa42)]())return;this[_0x11031a(0xac0)]();if(BattleManager['isActiveTpb']()&&this===BattleManager[_0x11031a(0x5a7)])return;if(this['battler']()&&BattleManager[_0x11031a(0xa42)]()){this[_0x11031a(0x921)]()[_0x11031a(0x25e)](),this[_0x11031a(0xbef)]();return;}},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x2dc)]=function(){const _0x288127=_0x164fcd;if(!this[_0x288127(0x86a)]())return![];const _0x3d2380=this[_0x288127(0x921)]();if(!_0x3d2380)return![];const _0xff42b6=_0x3d2380[_0x288127(0x79c)];if(!_0xff42b6)return![];const _0x4346bf=_0xff42b6[_0x288127(0x48d)];return _0x4346bf&&!_0x4346bf[_0x288127(0xa27)];},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xcf8)]=function(){const _0x4c0c93=_0x164fcd;return this[_0x4c0c93(0x603)];},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x295)]=function(_0x4f7ea0){const _0x7a62ad=_0x164fcd;if(!$gameSystem[_0x7a62ad(0x709)]())return;this[_0x7a62ad(0x603)]=_0x4f7ea0;const _0x3a674d=this[_0x7a62ad(0x921)]();if(_0x3a674d)_0x3a674d[_0x7a62ad(0x622)]();},Game_Battler['prototype'][_0x164fcd(0x4b9)]=function(_0x263aec,_0x49861d,_0xca4287){const _0x2028fa=_0x164fcd;if(!$gameSystem[_0x2028fa(0x709)]())return;const _0xbcfbd0=this['battler']();if(!_0xbcfbd0)return;if(_0x263aec===_0xbcfbd0[_0x2028fa(0x6ab)])return;let _0x476acb=![];if(this[_0x2028fa(0x31f)]()){if(_0x263aec>_0xbcfbd0['_baseX'])_0x476acb=!![];if(_0x263aec<_0xbcfbd0[_0x2028fa(0x6ab)])_0x476acb=![];}else{if(this[_0x2028fa(0xa79)]()){if(_0x2028fa(0x76f)===_0x2028fa(0x76f)){if(_0x263aec>_0xbcfbd0['_baseX'])_0x476acb=![];if(_0x263aec<_0xbcfbd0[_0x2028fa(0x6ab)])_0x476acb=!![];}else _0x40258d[_0x2028fa(0xb36)]['Window_BattleLog_displayEvasion'][_0x2028fa(0xa10)](this,_0x42d48d);}};this[_0x2028fa(0x295)](_0xca4287?!_0x476acb:_0x476acb),_0xbcfbd0[_0x2028fa(0x622)]();},Game_Battler['prototype'][_0x164fcd(0xd1e)]=function(_0x2daa36,_0x9b4083,_0x23fbb8,_0x449a95,_0x138576){const _0xa6c22d=_0x164fcd;if(!$gameSystem[_0xa6c22d(0x709)]())return;const _0x59227a=this[_0xa6c22d(0x921)]();if(!_0x59227a)return;if(_0x449a95)this[_0xa6c22d(0x4b9)](_0x2daa36+_0x59227a['_baseX'],_0x9b4083+_0x59227a[_0xa6c22d(0x3db)],![]);_0x2daa36+=_0x59227a['_baseX']-_0x59227a[_0xa6c22d(0xa35)],_0x9b4083+=_0x59227a['_baseY']-_0x59227a[_0xa6c22d(0xa83)],_0x59227a[_0xa6c22d(0xa52)](_0x2daa36,_0x9b4083,_0x23fbb8);if(Imported[_0xa6c22d(0x818)])_0x59227a[_0xa6c22d(0x6c4)](_0x138576||'Linear');},Game_Battler['prototype']['moveBattlerToPoint']=function(_0x3663ca,_0x43f246,_0x5cc591,_0x1ea9ba,_0xef2bcd,_0x2dd1f8){const _0x56e277=_0x164fcd;if(!$gameSystem[_0x56e277(0x709)]())return;const _0x5e8f3f=this[_0x56e277(0x921)]();if(!_0x5e8f3f)return;if(_0x3663ca===Infinity||_0x43f246===Infinity)return;if(isNaN(_0x3663ca)||isNaN(_0x43f246))return;_0x2dd1f8=_0x2dd1f8||0x0;if(_0x2dd1f8>0x0){if('BsTQh'!==_0x56e277(0x896)){const _0x33c557=_0x3a37b9[_0x56e277(0xab5)],_0x4584d3=_0x1bf19f['round']((_0x12c329['boxWidth']-_0x33c557)/0x2),_0x43e8e8=this[_0x56e277(0x87d)](),_0x4ad918=(_0x18050f['height']-_0x8ded25['boxHeight'])/-0x2;return new _0x497c03(_0x4584d3,_0x4ad918,_0x33c557,_0x43e8e8);}else{if(_0x5e8f3f[_0x56e277(0x6ab)]>_0x3663ca)_0x3663ca+=_0x5e8f3f['width']/0x2+_0x2dd1f8;if(_0x5e8f3f['_baseX']<_0x3663ca)_0x3663ca-=_0x5e8f3f['width']/0x2+_0x2dd1f8;}}if(_0x1ea9ba)this['setBattlerFacePoint'](_0x3663ca,_0x43f246,![]);_0x3663ca-=_0x5e8f3f['_homeX'],_0x43f246-=_0x5e8f3f[_0x56e277(0xa83)],_0x5e8f3f[_0x56e277(0xa52)](_0x3663ca,_0x43f246,_0x5cc591);if(Imported[_0x56e277(0x818)])_0x5e8f3f['setMoveEasingType'](_0xef2bcd||_0x56e277(0x28c));},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x8bc)]=function(_0x3772ac,_0x591bb6,_0x4206da,_0x427eaf,_0x93be58){const _0x594fca=_0x164fcd;if(!$gameSystem[_0x594fca(0x709)]())return;const _0x25b3f2=this['battler']();if(!_0x25b3f2)return;if(_0x427eaf)this[_0x594fca(0x4b9)](_0x3772ac+_0x25b3f2[_0x594fca(0x6ab)],_0x591bb6+_0x25b3f2[_0x594fca(0x3db)],![]);_0x3772ac+=_0x25b3f2['_homeX'],_0x591bb6+=_0x25b3f2['_homeY'],_0x25b3f2[_0x594fca(0xa66)](_0x3772ac,_0x591bb6,_0x4206da,_0x93be58),this[_0x594fca(0xb04)]=_0x3772ac,this[_0x594fca(0xc19)]=_0x591bb6;},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x207)]=function(_0x3e808e,_0x376edf,_0x4a01aa,_0x11a2d9,_0x5b4f70,_0x1e1294){const _0x17979c=_0x164fcd;if(!$gameSystem[_0x17979c(0x709)]())return;const _0x20c78f=this[_0x17979c(0x921)]();if(!_0x20c78f)return;_0x1e1294=_0x1e1294||0x0;if(_0x1e1294>0x0){if(_0x20c78f[_0x17979c(0x6ab)]>_0x3e808e)_0x3e808e+=_0x20c78f[_0x17979c(0xab5)]/0x2+_0x1e1294;if(_0x20c78f[_0x17979c(0x6ab)]<_0x3e808e)_0x3e808e-=_0x20c78f[_0x17979c(0xab5)]/0x2+_0x1e1294;}if(_0x11a2d9)this[_0x17979c(0x4b9)](_0x3e808e,_0x376edf,![]);_0x20c78f[_0x17979c(0xa66)](_0x3e808e,_0x376edf,_0x4a01aa,_0x5b4f70),this['_forcedHomeX']=_0x3e808e,this[_0x17979c(0xc19)]=_0x376edf;},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x13e)]=function(_0x5cf975,_0x1aa529,_0x661c5){const _0xfd3073=_0x164fcd;if(!$gameSystem[_0xfd3073(0x709)]())return;const _0x405723=this['battler']();if(!_0x405723)return;_0x405723['startFloat'](_0x5cf975,_0x1aa529,_0x661c5);},Game_Battler[_0x164fcd(0x2bf)]['jumpBattler']=function(_0x4c0b90,_0x2f5779){const _0x2c148c=_0x164fcd;if(!$gameSystem[_0x2c148c(0x709)]())return;const _0x3e90fc=this['battler']();if(!_0x3e90fc)return;_0x3e90fc['startJump'](_0x4c0b90,_0x2f5779);},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x3d3)]=function(_0x8efeda,_0x20aedb,_0x1e7bde,_0x300932){const _0x188be8=_0x164fcd;if(!$gameSystem[_0x188be8(0x709)]())return;const _0x133493=this[_0x188be8(0x921)]();if(!_0x133493)return;_0x133493['startSpin'](_0x8efeda,_0x20aedb,_0x1e7bde,_0x300932);},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xafd)]=function(_0x554b1e,_0x2015cb,_0x1ec948,_0xda0a7d){const _0x8f57f6=_0x164fcd;if(!$gameSystem[_0x8f57f6(0x709)]())return;const _0xdc772f=this['battler']();if(!_0xdc772f)return;this[_0x8f57f6(0x31f)]()&&(_0x554b1e*=-0x1,_0x2015cb*=-0x1),_0xdc772f[_0x8f57f6(0x8fa)](_0x554b1e,_0x2015cb,_0x1ec948,_0xda0a7d);},Game_Battler[_0x164fcd(0x2bf)]['growBattler']=function(_0x3f6a77,_0x1ae480,_0x410302,_0x52f022){const _0x2479e7=_0x164fcd;if(!$gameSystem['isSideView']())return;const _0x3990af=this[_0x2479e7(0x921)]();if(!_0x3990af)return;_0x3990af[_0x2479e7(0x95f)](_0x3f6a77,_0x1ae480,_0x410302,_0x52f022);},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x853)]=function(_0x43a15e,_0x3bed2b,_0x2f2f04){const _0x259b75=_0x164fcd;if(!$gameSystem['isSideView']())return;const _0x561355=this[_0x259b75(0x921)]();if(!_0x561355)return;_0x561355[_0x259b75(0x30a)](_0x43a15e,_0x3bed2b,_0x2f2f04);},Game_Battler['prototype'][_0x164fcd(0xbef)]=function(){const _0x3159ab=_0x164fcd,_0x16b0cb=!!this[_0x3159ab(0x8f3)];this[_0x3159ab(0x8f3)]=undefined,_0x16b0cb&&(_0x3159ab(0x41a)===_0x3159ab(0x4ed)?(_0x371b69[_0x3159ab(0xb36)]['Sprite_Actor_update'][_0x3159ab(0xa10)](this),this[_0x3159ab(0x41e)]&&(this[_0x3159ab(0x340)](),this[_0x3159ab(0x59c)]())):(this[_0x3159ab(0x1f0)](),this['clearFreezeMotionForWeapons']()));},Game_Battler['prototype'][_0x164fcd(0x652)]=function(){const _0x28d980=_0x164fcd;if(!SceneManager[_0x28d980(0x53f)]())return;const _0x1206bd=this[_0x28d980(0x921)]();if(!_0x1206bd)return;let _0x2c2360=this[_0x28d980(0x31f)]()?_0x1206bd['_weaponSprite']:_0x1206bd[_0x28d980(0x79c)][_0x28d980(0x65f)];_0x2c2360&&_0x2c2360[_0x28d980(0xd03)](0x0);},Game_Battler[_0x164fcd(0x2bf)]['freezeMotion']=function(_0x4a9506,_0x599f57,_0x4d58fe){const _0xbd4729=_0x164fcd;if(this[_0xbd4729(0xa79)]()&&!this[_0xbd4729(0x86a)]())return;let _0x111130=0x0,_0x1eb220=0x0;if(_0x4a9506['match'](/ATTACK[ ](\d+)/i)){if(_0xbd4729(0xccf)!=='YdKQl'){if(_0x2f4867[_0xbd4729(0x6b2)](_0x4a6ec1))return!![];return![];}else _0x1eb220=Number(RegExp['$1']),_0x1eb220--;}if(this[_0xbd4729(0x31f)]()){const _0x52f080=this['weapons']();_0x111130=_0x52f080[_0x1eb220]?_0x52f080[_0x1eb220]['wtypeId']:0x0;}else this[_0xbd4729(0xa79)]()&&(_0x111130=this['svBattlerData']()[_0xbd4729(0x29b)]||0x0);const _0x5bd047=$dataSystem[_0xbd4729(0xb0c)][_0x111130];if(_0x4a9506[_0xbd4729(0xa5d)](/attack/i)){if(_0xbd4729(0xc0a)!==_0xbd4729(0xc0a))return this[_0xbd4729(0xcdd)]()['anchorY'];else _0x4a9506=['thrust',_0xbd4729(0x706),'missile'][_0x5bd047[_0xbd4729(0xaa3)]]||_0xbd4729(0x706);}this[_0xbd4729(0x8f3)]={'motionType':_0x4a9506,'weaponImageId':_0x599f57?_0x5bd047[_0xbd4729(0x2b5)]:0x0,'pattern':_0x4d58fe};},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x51c)]=function(_0x3a2449){const _0x50f9b5=_0x164fcd;if(!_0x3a2449)return![];return _0x3a2449[_0x50f9b5(0xbe6)]()===this[_0x50f9b5(0xbe6)]();},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x2da)]=function(_0x1067ad){const _0x2d952f=_0x164fcd;if(!_0x1067ad)return![];return _0x1067ad[_0x2d952f(0xb4f)]()===this['friendsUnit']();},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xc86)]=function(){return![];},Game_Actor[_0x164fcd(0x2bf)]['hasStaticSvBattler']=function(){const _0x5ab0b2=_0x164fcd;return this['battlerName']()[_0x5ab0b2(0xa5d)](/\$/i);},Game_Enemy['prototype']['hasStaticSvBattler']=function(){const _0x129914=_0x164fcd;return this[_0x129914(0x86a)]()&&this[_0x129914(0x4f5)]()[_0x129914(0xa5d)](/\$/i);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x45d)]=Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0xd03)],Game_Actor[_0x164fcd(0x2bf)]['setup']=function(_0xb68c96){const _0x1ef754=_0x164fcd;VisuMZ[_0x1ef754(0xb36)][_0x1ef754(0x45d)][_0x1ef754(0xa10)](this,_0xb68c96),this[_0x1ef754(0x62e)]();},Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x62e)]=function(){const _0x19ac8d=_0x164fcd;this[_0x19ac8d(0x89b)]='';if(this[_0x19ac8d(0x6ae)]()&&this[_0x19ac8d(0x6ae)]()[_0x19ac8d(0x9ea)][_0x19ac8d(0xa5d)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)){if(_0x19ac8d(0x92b)===_0x19ac8d(0x6d8)){const _0x3373eb=_0x3d5e5e[_0x19ac8d(0x784)]();if(!_0x3373eb)return!![];if(!_0x3373eb['item']())return!![];const _0x52c26b=this['actor'](this[_0x19ac8d(0xca1)]()),_0x1fdcea=_0x3373eb[_0x19ac8d(0x5e9)]()[_0x19ac8d(0x9ea)];if(_0x1fdcea[_0x19ac8d(0xa5d)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x52c26b===_0x2493d9['actor']())return![];}if(_0x3373eb[_0x19ac8d(0xa74)]()){if(!_0x52c26b['isDead']())return![];}if(_0x3373eb['isForAliveFriend']()){if(!_0x52c26b[_0x19ac8d(0x949)]())return![];}return!![];}else this['_battlePortrait']=String(RegExp['$1']);}},Game_Actor[_0x164fcd(0x2bf)]['getBattlePortraitFilename']=function(){const _0x2addca=_0x164fcd;if(this[_0x2addca(0x805)]()!==''){if(_0x2addca(0x8ea)==='siqoI')return this[_0x2addca(0x805)]();else{let _0x562a0d=_0x54b17a[_0x2addca(0xa94)](_0xff1012['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x562a0d);}}else{if(Imported['VisuMZ_1_MainMenuCore']&&this[_0x2addca(0x526)]()!=='')return this[_0x2addca(0x526)]();}return'';},Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x805)]=function(){const _0x2c7791=_0x164fcd;if(this['_battlePortrait']===undefined)this[_0x2c7791(0x62e)]();return this[_0x2c7791(0x89b)];},Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x4d9)]=function(_0x2cf151){const _0xd6d52=_0x164fcd;if(this[_0xd6d52(0x89b)]===undefined)this[_0xd6d52(0x62e)]();this[_0xd6d52(0x89b)]=_0x2cf151;if(SceneManager[_0xd6d52(0x53f)]()&&$gameParty['battleMembers']()['includes'](this)){const _0x2aa0a2=SceneManager[_0xd6d52(0x4c8)]['_statusWindow'];_0x2aa0a2&&_0x2aa0a2[_0xd6d52(0xb15)](this);}},Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x97f)]=function(){return!![];},Game_Actor[_0x164fcd(0x2bf)]['isAutoBattle']=function(){const _0x2436a2=_0x164fcd;if(!this[_0x2436a2(0xab0)]()&&BattleManager['_autoBattle'])return!![];return Game_Battler['prototype']['isAutoBattle'][_0x2436a2(0xa10)](this);},VisuMZ['BattleCore'][_0x164fcd(0x5f6)]=Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x64e)],Game_Actor['prototype']['makeActionList']=function(){const _0x567265=_0x164fcd;if(BattleManager[_0x567265(0x9c8)]&&!ConfigManager[_0x567265(0x206)])return this[_0x567265(0x22b)]();else{return VisuMZ[_0x567265(0xb36)][_0x567265(0x5f6)][_0x567265(0xa10)](this);;}},Game_Actor['prototype'][_0x164fcd(0x22b)]=function(){const _0x22fd2e=_0x164fcd,_0x58d0b7=[],_0x422687=new Game_Action(this);return _0x422687[_0x22fd2e(0x7ac)](),_0x58d0b7[_0x22fd2e(0x56b)](_0x422687),_0x58d0b7;},Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x44d)]=function(){const _0x20d4e8=_0x164fcd;return this[_0x20d4e8(0x65b)]()[_0x20d4e8(0x9ea)][_0x20d4e8(0xa5d)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x20d4e8(0x77e)](/[\r\n]+/):VisuMZ[_0x20d4e8(0xb36)]['Settings'][_0x20d4e8(0x560)]['BattleCmdList'];},Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x961)]=function(){const _0x4e7ac2=_0x164fcd;if(this[_0x4e7ac2(0x958)][_0x4e7ac2(0xc84)]!==undefined)return this[_0x4e7ac2(0x958)][_0x4e7ac2(0xc84)];return this[_0x4e7ac2(0x6ae)]()[_0x4e7ac2(0x9ea)][_0x4e7ac2(0xa5d)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x4e7ac2(0x958)][_0x4e7ac2(0xc84)]=eval(RegExp['$1']),this[_0x4e7ac2(0x958)][_0x4e7ac2(0xa24)]=eval(RegExp['$2'])):this[_0x4e7ac2(0x958)][_0x4e7ac2(0xc84)]=Game_Battler[_0x4e7ac2(0x2bf)][_0x4e7ac2(0x961)][_0x4e7ac2(0xa10)](this),this[_0x4e7ac2(0x958)][_0x4e7ac2(0xc84)];},Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x16c)]=function(){const _0xfc954=_0x164fcd;if(this[_0xfc954(0x958)][_0xfc954(0xa24)]!==undefined)return this[_0xfc954(0x958)][_0xfc954(0xa24)];return this[_0xfc954(0x6ae)]()[_0xfc954(0x9ea)][_0xfc954(0xa5d)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0xfc954(0x958)][_0xfc954(0xc84)]=eval(RegExp['$1']),this[_0xfc954(0x958)][_0xfc954(0xa24)]=eval(RegExp['$2'])):_0xfc954(0x8c1)!==_0xfc954(0x8c1)?this[_0xfc954(0x5fd)]=this['_targetFloatHeight']:this[_0xfc954(0x958)][_0xfc954(0xa24)]=Game_Battler[_0xfc954(0x2bf)][_0xfc954(0x16c)][_0xfc954(0xa10)](this),this[_0xfc954(0x958)][_0xfc954(0xa24)];},Game_Actor['prototype']['svBattlerShadowVisible']=function(){const _0x1ed825=_0x164fcd;if(this[_0x1ed825(0x958)][_0x1ed825(0x1c0)]!==undefined)return this[_0x1ed825(0x958)]['svShadow'];if(this[_0x1ed825(0x6ae)]()[_0x1ed825(0x9ea)][_0x1ed825(0xa5d)](/<SIDEVIEW SHOW SHADOW>/i)){if('nNZCL'===_0x1ed825(0x23c)){const _0x5ab6cd=this['result']();if(_0x5ab6cd[_0x1ed825(0x691)]||_0x5ab6cd[_0x1ed825(0xbec)]){const _0x2108da=_0x23a783['makeDeepCopy'](_0x5ab6cd);_0x2108da[_0x1ed825(0x9e4)]=![],_0x2108da[_0x1ed825(0x14a)]=0x0,this[_0x1ed825(0x3be)][_0x1ed825(0x56b)](_0x2108da);}if(_0x5ab6cd[_0x1ed825(0x9e4)]){const _0x362294=_0x3ca8ac['makeDeepCopy'](_0x5ab6cd);_0x362294[_0x1ed825(0x691)]=![],_0x362294[_0x1ed825(0xbec)]=![],_0x362294[_0x1ed825(0x14a)]=0x0,this[_0x1ed825(0x3be)][_0x1ed825(0x56b)](_0x362294);}if(_0x5ab6cd[_0x1ed825(0x14a)]!==0x0){const _0x3b1240=_0x27ca61[_0x1ed825(0x835)](_0x5ab6cd);_0x3b1240[_0x1ed825(0x691)]=![],_0x3b1240[_0x1ed825(0xbec)]=![],_0x3b1240['hpAffected']=![],this['_damagePopupArray'][_0x1ed825(0x56b)](_0x3b1240);}}else this[_0x1ed825(0x958)]['svShadow']=!![];}else{if(this[_0x1ed825(0x6ae)]()[_0x1ed825(0x9ea)][_0x1ed825(0xa5d)](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x1ed825(0xb1b)===_0x1ed825(0xb1b))this[_0x1ed825(0x958)]['svShadow']=![];else{if(this[_0x1ed825(0x701)]<=0x0)return;if(!this[_0x1ed825(0x4e7)])return;const _0x1ce4b9=this['_growDuration'],_0x3b41c2=this['_growWholeDuration'],_0x561a39=this['_growEasing'];_0x51173f['VisuMZ_0_CoreEngine']?(this['_growX']=this['applyEasing'](this[_0x1ed825(0x8aa)],this[_0x1ed825(0xa31)],_0x1ce4b9,_0x3b41c2,_0x561a39),this[_0x1ed825(0x31d)]=this['applyEasing'](this['_growY'],this[_0x1ed825(0xd02)],_0x1ce4b9,_0x3b41c2,_0x561a39)):(this['_growX']=(this[_0x1ed825(0x8aa)]*(_0x1ce4b9-0x1)+this['_targetGrowX'])/_0x1ce4b9,this[_0x1ed825(0x31d)]=(this[_0x1ed825(0x31d)]*(_0x1ce4b9-0x1)+this['_targetGrowY'])/_0x1ce4b9);this[_0x1ed825(0x701)]--;if(this[_0x1ed825(0x701)]<=0x0)this[_0x1ed825(0x32c)]();}}else this['_cache'][_0x1ed825(0x1c0)]=Game_Battler[_0x1ed825(0x2bf)]['svBattlerShadowVisible']['call'](this);}return this['_cache']['svShadow'];},Game_Actor['prototype'][_0x164fcd(0xcdf)]=function(){const _0x3af9f4=_0x164fcd;return VisuMZ[_0x3af9f4(0xb36)][_0x3af9f4(0x1de)][_0x3af9f4(0x9ef)][_0x3af9f4(0x6d2)];},Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x629)]=function(){const _0x2fa7cf=_0x164fcd,_0x321518=this['weapons'](),_0x1a3421=_0x321518[0x0]?_0x321518[0x0][_0x2fa7cf(0x29b)]:0x0,_0x3ef3bd=$dataSystem[_0x2fa7cf(0xb0c)][_0x1a3421];if(_0x3ef3bd){if(_0x2fa7cf(0x159)!==_0x2fa7cf(0x737))this[_0x2fa7cf(0x984)](_0x3ef3bd['weaponImageId']);else{this[_0x2fa7cf(0xcf5)]=new _0x1a231f(0x1,0x1);if(this[_0x2fa7cf(0x86a)]()){const _0x166f11=this[_0x2fa7cf(0xa44)][_0x2fa7cf(0xcdd)]();this[_0x2fa7cf(0xcf5)]=new _0x3cd676(_0x166f11[_0x2fa7cf(0xab5)],_0x166f11[_0x2fa7cf(0x5e0)]),this[_0x2fa7cf(0x35c)][_0x2fa7cf(0xcf5)]=new _0x25a0c2(0x1,0x1);}else{if(_0xe9cf4[_0x2fa7cf(0x709)]()){const _0x12abab=_0x529b95[_0x2fa7cf(0x7e0)](_0x1dd3b6);_0x12abab[_0x2fa7cf(0x250)](this['onStaticEnemyBitmapLoad'][_0x2fa7cf(0x1f7)](this,_0x12abab));}else{const _0x1c3a61=_0x10d75b[_0x2fa7cf(0x2f3)](_0x141a2d);_0x1c3a61[_0x2fa7cf(0x250)](this['onStaticEnemyBitmapLoad'][_0x2fa7cf(0x1f7)](this,_0x1c3a61));}}}}},Game_Actor[_0x164fcd(0x2bf)]['performAction']=function(_0x1711a1){const _0x1c1cc8=_0x164fcd;Game_Battler['prototype']['performAction'][_0x1c1cc8(0xa10)](this,_0x1711a1),this[_0x1c1cc8(0x8f4)](_0x1711a1);},Game_Actor[_0x164fcd(0x2bf)]['getAttackMotion']=function(){const _0x18bbc3=_0x164fcd,_0x2669cc=this[_0x18bbc3(0x99b)](),_0x19d2d9=_0x2669cc[0x0]?_0x2669cc[0x0][_0x18bbc3(0x29b)]:0x0;return $dataSystem[_0x18bbc3(0xb0c)][_0x19d2d9];},Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0xc5c)]=function(_0x1270b1){const _0x127c1a=_0x164fcd;_0x1270b1=_0x1270b1||0x1,_0x1270b1--;const _0x4c4640=this[_0x127c1a(0x99b)]();return _0x4c4640[_0x1270b1]?_0x4c4640[_0x1270b1][_0x127c1a(0x52a)]:0x0;},Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0xb76)]=function(_0x135ec6){const _0x435edd=_0x164fcd;_0x135ec6=_0x135ec6||0x1,_0x135ec6--;const _0x2ebad5=this['weapons'](),_0x2a9b38=_0x2ebad5[_0x135ec6]?_0x2ebad5[_0x135ec6]['wtypeId']:0x0;return $dataSystem[_0x435edd(0xb0c)][_0x2a9b38];},Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x7ba)]=function(_0x4c3b91){const _0x184d69=_0x164fcd;_0x4c3b91=_0x4c3b91||0x1,_0x4c3b91--;const _0xca620a=this[_0x184d69(0x99b)](),_0x117362=_0xca620a[_0x4c3b91]?_0xca620a[_0x4c3b91][_0x184d69(0x29b)]:0x0,_0x3bad05=$dataSystem[_0x184d69(0xb0c)][_0x117362];if(_0x3bad05){if(_0x3bad05['type']===0x0)this['requestMotion']('thrust');else{if(_0x3bad05['type']===0x1){if(_0x184d69(0x9e0)===_0x184d69(0x283)){if(this[_0x184d69(0x600)]())_0x36a98f[_0x184d69(0xb36)][_0x184d69(0x9ed)][_0x184d69(0xa10)](this);}else this['requestMotion'](_0x184d69(0x706));}else{if(_0x3bad05[_0x184d69(0xaa3)]===0x2){if('jsHHR'==='rNdbn'){if(!_0x4c2188)return![];return _0xb3b14a[_0x184d69(0xbe6)]()===this['friendsUnit']();}else this['requestMotion']('missile');}}}this[_0x184d69(0x984)](_0x3bad05[_0x184d69(0x2b5)]);}},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x57e)]=function(_0x3fc0fe){const _0x3f567f=_0x164fcd;this[_0x3f567f(0xcb3)]=_0x3fc0fe||0x0,this[_0x3f567f(0x958)]={};},Game_Battler['prototype'][_0x164fcd(0xbeb)]=function(){const _0x4722ef=_0x164fcd;this[_0x4722ef(0xcb3)]=this[_0x4722ef(0xcb3)]||0x0,this[_0x4722ef(0xcb3)]++,this[_0x4722ef(0x958)]={};},Game_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xadb)]=function(){const _0x1e9d1a=_0x164fcd;this[_0x1e9d1a(0xcb3)]=undefined,this['_cache']={};},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x23e)]=Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x5a6)],Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x5a6)]=function(){const _0x47a3e7=_0x164fcd;let _0x42fcfb=VisuMZ[_0x47a3e7(0xb36)][_0x47a3e7(0x23e)][_0x47a3e7(0xa10)](this);if(this['_tempEquipCheck'])return _0x42fcfb;if(this[_0x47a3e7(0xcb3)]!==undefined){this[_0x47a3e7(0x86d)]=!![];const _0x445a80=this[_0x47a3e7(0x5da)]();for(let _0x3ebd53=0x0;_0x3ebd53<_0x445a80['length'];_0x3ebd53++){if(_0x445a80[_0x3ebd53]===0x1&&this[_0x47a3e7(0xcb3)]!==_0x3ebd53){if('KIyFf'===_0x47a3e7(0x2f6))_0x42fcfb[_0x3ebd53]=null;else{if(!this[_0x47a3e7(0x302)]())return;_0x5aab26['isBattleFlipped']()?this['x']=_0xe19160[_0x47a3e7(0x273)]-this['enemy']()[_0x47a3e7(0x921)]()[_0x47a3e7(0x6ab)]:this['x']=this[_0x47a3e7(0x302)]()[_0x47a3e7(0x921)]()[_0x47a3e7(0x6ab)];this['x']-=_0x28f66d[_0x47a3e7(0xa13)](this[_0x47a3e7(0xab5)]/0x2),this['y']=this[_0x47a3e7(0x302)]()[_0x47a3e7(0x921)]()[_0x47a3e7(0x3db)]-_0x393361[_0x47a3e7(0xa13)](this[_0x47a3e7(0x82c)]()*1.5);const _0xb9c695=_0x237565['BattleCore']['Settings'][_0x47a3e7(0x337)];this['x']+=_0xb9c695[_0x47a3e7(0xcf9)]||0x0,this['y']+=_0xb9c695[_0x47a3e7(0xb3b)]||0x0;}}}this[_0x47a3e7(0x86d)]=undefined;}return _0x42fcfb;},Window_BattleLog[_0x164fcd(0x2bf)]['getDualWieldTimes']=function(_0x2c0b75){const _0x22e038=_0x164fcd;return _0x2c0b75[_0x22e038(0x31f)]()?_0x2c0b75[_0x22e038(0x99b)]()[_0x22e038(0xd04)]||0x1:0x1;},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x8e6)]=function(_0x26bb63,_0x15322f){const _0x14c9d6=_0x164fcd;_0x26bb63&&_0x26bb63['isActor']()&&_0x26bb63[_0x14c9d6(0x57e)](_0x15322f),this['callNextMethod']();},Window_BattleLog['prototype']['clearActiveWeaponSet']=function(_0x529eb5){const _0x4f0518=_0x164fcd;if(_0x529eb5&&_0x529eb5[_0x4f0518(0x31f)]()){if('VVfaC'===_0x4f0518(0x7e4)){const _0x18a35e=_0x3ca20b[_0x4f0518(0xb36)]['Settings']['AutoBattle'],_0x520c27=this[_0x4f0518(0xc51)](_0x4f0518(0x206));return _0x520c27?_0x18a35e['StyleON']:_0x18a35e[_0x4f0518(0x5df)];}else _0x529eb5['clearActiveWeaponSlot']();}this[_0x4f0518(0x227)]();},Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x1e8)]=function(){const _0x55500=_0x164fcd;let _0xc1e732='battleUIOffsetX';if(this[_0x55500(0x917)](_0xc1e732))return this['_cache'][_0xc1e732];return this[_0x55500(0x958)][_0xc1e732]=this[_0x55500(0x3cb)](this['actor']()),this[_0x55500(0x958)][_0xc1e732];},Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x5bd)]=function(){const _0x4a9bc0=_0x164fcd;let _0x460330='battleUIOffsetY';if(this[_0x4a9bc0(0x917)](_0x460330))return this[_0x4a9bc0(0x958)][_0x460330];return this[_0x4a9bc0(0x958)][_0x460330]=this[_0x4a9bc0(0x422)](this['actor']()),this[_0x4a9bc0(0x958)][_0x460330];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xa5f)]=Game_Enemy['prototype'][_0x164fcd(0xd03)],Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0xd03)]=function(_0x4a6eca,_0x4be6ad,_0x147832){const _0x569ad3=_0x164fcd;_0x4a6eca=DataManager['swapEnemyIDs'](_0x4a6eca),VisuMZ[_0x569ad3(0xb36)]['Game_Enemy_setup'][_0x569ad3(0xa10)](this,_0x4a6eca,_0x4be6ad,_0x147832),Imported[_0x569ad3(0xac1)]&&this[_0x569ad3(0x42b)](),this[_0x569ad3(0xcc3)](),this[_0x569ad3(0x588)](),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x569ad3(0x667)]();},Game_Enemy[_0x164fcd(0x2bf)]['clearBattleCoreData']=function(){const _0x421f31=_0x164fcd,_0x351e77=VisuMZ[_0x421f31(0xb36)][_0x421f31(0x1de)][_0x421f31(0x337)];this['_attackAnimationId']=_0x351e77[_0x421f31(0xb1f)],this[_0x421f31(0x9c2)]={};},Game_Enemy['prototype'][_0x164fcd(0x588)]=function(){const _0x4dd3ad=_0x164fcd,_0x4ceef6=VisuMZ[_0x4dd3ad(0xb36)][_0x4dd3ad(0x1de)][_0x4dd3ad(0x337)],_0x2a7c5d=this[_0x4dd3ad(0x302)]()[_0x4dd3ad(0x9ea)];this[_0x4dd3ad(0x9c2)]={'name':'','wtypeId':_0x4ceef6['WtypeId'],'collapse':_0x4ceef6[_0x4dd3ad(0x91b)],'motionIdle':_0x4ceef6[_0x4dd3ad(0xbfa)],'width':_0x4ceef6[_0x4dd3ad(0x6da)]||0x40,'height':_0x4ceef6['Height']||0x40,'anchorX':_0x4ceef6[_0x4dd3ad(0x399)]||0x0,'anchorY':_0x4ceef6['AnchorY']||0x0,'shadow':_0x4ceef6[_0x4dd3ad(0x2fe)]};_0x2a7c5d[_0x4dd3ad(0xa5d)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x209327=this['_svBattlerData'];if(_0x2a7c5d[_0x4dd3ad(0xa5d)](/<SIDEVIEW BATTLER: (.*)>/i)){if(_0x4dd3ad(0x24f)!==_0x4dd3ad(0x52d))_0x209327[_0x4dd3ad(0x16d)]=String(RegExp['$1']);else{_0x1e1d23[_0x4dd3ad(0xb36)][_0x4dd3ad(0x1c6)][_0x4dd3ad(0xa10)](this),this[_0x4dd3ad(0x748)]();if(this[_0x4dd3ad(0xc12)]===_0x3ce7b9)this[_0x4dd3ad(0xcd4)]();this['createDistortionSprite']();}}else{if(_0x2a7c5d['match'](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if(_0x4dd3ad(0x9cd)==='LtPZj'){const _0x3b4157=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x4dd3ad(0x494)]('');_0x209327[_0x4dd3ad(0x16d)]=DataManager[_0x4dd3ad(0x9dc)](_0x3b4157);}else _0x52d8bf=_0x1bf842[_0x4dd3ad(0x273)]/0x2,_0xb9a836=_0x3f5337[_0x4dd3ad(0xa5c)]/0x2;}}_0x2a7c5d['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x209327[_0x4dd3ad(0xa62)]=eval(RegExp['$1']),_0x209327['anchorY']=eval(RegExp['$2']));if(_0x2a7c5d[_0x4dd3ad(0xa5d)](/<SIDEVIEW COLLAPSE>/i))_0x209327[_0x4dd3ad(0x25d)]=!![];else _0x2a7c5d[_0x4dd3ad(0xa5d)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x209327[_0x4dd3ad(0x25d)]=![]);if(_0x2a7c5d[_0x4dd3ad(0xa5d)](/<SIDEVIEW SHOW SHADOW>/i))_0x209327['shadow']=!![];else _0x2a7c5d[_0x4dd3ad(0xa5d)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x4dd3ad(0x7e7)!=='eafvs'?_0x209327[_0x4dd3ad(0x5c2)]=![]:this[_0x4dd3ad(0x728)](_0x44cfa2));if(_0x2a7c5d[_0x4dd3ad(0xa5d)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x209327[_0x4dd3ad(0x2f1)]=String(RegExp['$1'])['toLowerCase']()[_0x4dd3ad(0xab7)]();else{if(_0x2a7c5d[_0x4dd3ad(0xa5d)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x12bc87=String(RegExp['$1'])[_0x4dd3ad(0x77e)](/[\r\n]+/)[_0x4dd3ad(0x494)]('');_0x209327[_0x4dd3ad(0x2f1)]=DataManager[_0x4dd3ad(0x9dc)](_0x12bc87);}}_0x2a7c5d[_0x4dd3ad(0xa5d)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x209327[_0x4dd3ad(0xab5)]=Number(RegExp['$1']),_0x209327[_0x4dd3ad(0x5e0)]=Number(RegExp['$2']));if(_0x2a7c5d[_0x4dd3ad(0xa5d)](/<SIDEVIEW WEAPON: (.*)>/i)){if(_0x4dd3ad(0x861)===_0x4dd3ad(0x2ab)){const _0x202b78=this[_0x4dd3ad(0x31f)]()?this[_0x4dd3ad(0x6ae)]():this['enemy']();if(_0x202b78){const _0x27fdc0=_0x202b78[_0x4dd3ad(0x9ea)];if(_0x27fdc0[_0x4dd3ad(0xa5d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x3972b2(_0x153346['$1'])*0.01;else{if(_0x27fdc0[_0x4dd3ad(0xa5d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0xb86475(_0x20b7cc['$1'])||0x0;}}return 0x1;}else _0x209327[_0x4dd3ad(0x29b)]=DataManager[_0x4dd3ad(0xcc0)](RegExp['$1']);}else{if(_0x2a7c5d[_0x4dd3ad(0xa5d)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x4507eb=String(RegExp['$1'])[_0x4dd3ad(0x77e)](/[\r\n]+/)[_0x4dd3ad(0x494)](''),_0x22f8d3=DataManager[_0x4dd3ad(0x9dc)](_0x4507eb);_0x209327[_0x4dd3ad(0x29b)]=DataManager[_0x4dd3ad(0xcc0)](_0x22f8d3);}}if(Imported[_0x4dd3ad(0xac1)]){if(_0x4dd3ad(0xb24)!==_0x4dd3ad(0xb24)){const _0x281d80=_0x179e66[_0x4dd3ad(0x144)]('['+_0x391ebe['$1'][_0x4dd3ad(0xa5d)](/\d+/g)+']');for(const _0x1c9cba of _0x281d80){if(!_0x43126e[_0x4dd3ad(0x8a7)](_0x1c9cba))return![];}return!![];}else{const _0x567260=this['getTraitSetKeys']();for(const _0x48a7c9 of _0x567260){const _0x147134=this['traitSet'](_0x48a7c9)[_0x4dd3ad(0xb88)]['toUpperCase']()[_0x4dd3ad(0xab7)](),_0x300191=_0x48a7c9[_0x4dd3ad(0x7e1)]()[_0x4dd3ad(0xab7)]();if(_0x2a7c5d[_0x4dd3ad(0xa5d)](VisuMZ[_0x4dd3ad(0x7d0)]['RegExp'][_0x4dd3ad(0x3b8)[_0x4dd3ad(0x272)](_0x300191,_0x147134)])){if('iBJkv'===_0x4dd3ad(0xa86)){if(_0x1ecdd5[_0x4dd3ad(0xb36)][_0x4dd3ad(0x1de)]['BattleLog']['BattleLogRectJS'])return _0x6f8926[_0x4dd3ad(0xb36)]['Settings'][_0x4dd3ad(0xa08)][_0x4dd3ad(0xa2a)]['call'](this);return _0xb5dadd['BattleCore']['Scene_Battle_logWindowRect'][_0x4dd3ad(0xa10)](this);}else _0x209327['name']=String(RegExp['$1']);}else{if(_0x2a7c5d[_0x4dd3ad(0xa5d)](VisuMZ[_0x4dd3ad(0x7d0)][_0x4dd3ad(0x58d)][_0x4dd3ad(0x3c6)[_0x4dd3ad(0x272)](_0x300191,_0x147134)])){if(_0x4dd3ad(0x3da)===_0x4dd3ad(0x3da)){const _0x37e550=String(RegExp['$1'])[_0x4dd3ad(0x77e)](/[\r\n]+/)['remove']('');_0x209327['name']=DataManager[_0x4dd3ad(0x9dc)](_0x37e550);}else{_0x1e87cc(_0x4dd3ad(0xcd1)),_0x55e9aa[_0x4dd3ad(0x7f7)]();return;}}}if(_0x2a7c5d[_0x4dd3ad(0xa5d)](VisuMZ[_0x4dd3ad(0x7d0)]['RegExp'][_0x4dd3ad(0xbdb)[_0x4dd3ad(0x272)](_0x300191,_0x147134)]))_0x209327[_0x4dd3ad(0x29b)]=DataManager[_0x4dd3ad(0xcc0)](RegExp['$1']);else{if(_0x2a7c5d[_0x4dd3ad(0xa5d)](VisuMZ[_0x4dd3ad(0x7d0)][_0x4dd3ad(0x58d)][_0x4dd3ad(0x9bb)[_0x4dd3ad(0x272)](_0x300191,_0x147134)])){const _0x41b154=String(RegExp['$1'])[_0x4dd3ad(0x77e)](/[\r\n]+/)[_0x4dd3ad(0x494)](''),_0x1a987b=DataManager[_0x4dd3ad(0x9dc)](_0x41b154);_0x209327['wtypeId']=DataManager[_0x4dd3ad(0xcc0)](_0x1a987b);}}if(_0x2a7c5d[_0x4dd3ad(0xa5d)](VisuMZ['ElementStatusCore'][_0x4dd3ad(0x58d)][_0x4dd3ad(0xa1c)[_0x4dd3ad(0x272)](_0x300191,_0x147134)]))_0x4dd3ad(0xbb2)!=='ZccCV'?_0x209327[_0x4dd3ad(0x2f1)]=String(RegExp['$1'])[_0x4dd3ad(0x790)]()[_0x4dd3ad(0xab7)]():_0xd48458[_0x4dd3ad(0x2a1)](_0x461d10[_0x4dd3ad(0x24e)],0x0);else{if(_0x2a7c5d[_0x4dd3ad(0xa5d)](VisuMZ['ElementStatusCore']['RegExp'][_0x4dd3ad(0xba3)[_0x4dd3ad(0x272)](_0x300191,_0x147134)])){if(_0x4dd3ad(0x4ba)!=='owtKU'){const _0x44288b=String(RegExp['$1'])[_0x4dd3ad(0x77e)](/[\r\n]+/)[_0x4dd3ad(0x494)]('');_0x209327[_0x4dd3ad(0x2f1)]=DataManager[_0x4dd3ad(0x9dc)](_0x44288b);}else _0xccd0f0['addState'](_0x104ced);}}}}}},Game_Enemy['prototype']['attackAnimationId1']=function(){const _0x3820cd=_0x164fcd;return this[_0x3820cd(0x6a5)]||0x0;},Game_Enemy[_0x164fcd(0x2bf)]['attackAnimationId2']=function(){const _0x4f5789=_0x164fcd;return this[_0x4f5789(0xb85)]();},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0xc5c)]=function(_0x234ffd){const _0x4ca764=_0x164fcd;return this[_0x4ca764(0xb85)]();},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x74c)]=function(){const _0x3685e6=_0x164fcd;if(this[_0x3685e6(0x302)]()[_0x3685e6(0x9ea)][_0x3685e6(0xa5d)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x3685e6(0x2bf)][_0x3685e6(0x74c)]['call'](this);},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x3de)]=function(){const _0x586954=_0x164fcd;if(this[_0x586954(0x302)]()[_0x586954(0x9ea)]['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x2d5)]=function(){const _0x1d4533=_0x164fcd,_0x3b36c6=[];for(const _0xf7e878 of this[_0x1d4533(0x302)]()[_0x1d4533(0xc83)]){if(_0x1d4533(0x76c)!==_0x1d4533(0x76c))_0x48a56f=this[_0x1d4533(0x7f9)][_0x1d4533(0xb04)]??_0x42ab37,_0x4f31f3=this[_0x1d4533(0x7f9)]['_forcedHomeY']??_0x13b461;else{const _0x548757=$dataSkills[_0xf7e878[_0x1d4533(0x9ae)]];if(_0x548757&&!_0x3b36c6[_0x1d4533(0x893)](_0x548757))_0x3b36c6['push'](_0x548757);}}return _0x3b36c6;},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x1e8)]=function(){const _0x13d281=_0x164fcd;let _0x3bff96=_0x13d281(0x1e8);if(this[_0x13d281(0x917)](_0x3bff96))return this[_0x13d281(0x958)][_0x3bff96];return this[_0x13d281(0x958)][_0x3bff96]=this['createBattleUIOffsetX'](this[_0x13d281(0x302)]()),this['_cache'][_0x3bff96];},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x5bd)]=function(){const _0x7b4c5=_0x164fcd;let _0x5ac401=_0x7b4c5(0x5bd);if(this[_0x7b4c5(0x917)](_0x5ac401))return this['_cache'][_0x5ac401];return this['_cache'][_0x5ac401]=this[_0x7b4c5(0x422)](this[_0x7b4c5(0x302)]()),this[_0x7b4c5(0x958)][_0x5ac401];},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0xcdd)]=function(){const _0x50a375=_0x164fcd;if(this[_0x50a375(0x9c2)]!==undefined)return this[_0x50a375(0x9c2)];return this[_0x50a375(0x588)](),this[_0x50a375(0x9c2)];},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x86a)]=function(){const _0x20a1f1=_0x164fcd;return this[_0x20a1f1(0xcdd)]()[_0x20a1f1(0x16d)]!=='';},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x4f5)]=function(){const _0x3287ed=_0x164fcd;return this[_0x3287ed(0xcdd)]()[_0x3287ed(0x16d)];},Game_Enemy['prototype']['battlerSmoothImage']=function(){const _0x2a0835=_0x164fcd;if(this[_0x2a0835(0x86a)]()){if(_0x2a0835(0x8a2)!==_0x2a0835(0x8a2)){if(!this['_actor'][_0x2a0835(0x6b8)](_0x22213a['id']))return![];}else return VisuMZ[_0x2a0835(0xb36)][_0x2a0835(0x1de)]['Actor']['SmoothImage'];}else return VisuMZ[_0x2a0835(0xb36)]['Settings'][_0x2a0835(0x337)][_0x2a0835(0x6d2)];},Game_Enemy[_0x164fcd(0x2bf)]['performAction']=function(_0x17f1cf){const _0xf06bd=_0x164fcd;Game_Battler[_0xf06bd(0x2bf)][_0xf06bd(0x78f)][_0xf06bd(0xa10)](this,_0x17f1cf);if(this[_0xf06bd(0x86a)]())this[_0xf06bd(0x8f4)](_0x17f1cf);},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x2c0)]=function(){const _0x359f92=_0x164fcd,_0x387342=this[_0x359f92(0xcdd)]()[_0x359f92(0x29b)]||0x0,_0x45270e=$dataSystem[_0x359f92(0xb0c)][_0x387342];if(_0x45270e){if(_0x45270e[_0x359f92(0xaa3)]===0x0)this[_0x359f92(0x8f0)](_0x359f92(0xbc1));else{if(_0x45270e[_0x359f92(0xaa3)]===0x1)this[_0x359f92(0x8f0)](_0x359f92(0x706));else _0x45270e[_0x359f92(0xaa3)]===0x2&&this[_0x359f92(0x8f0)]('missile');}}},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x629)]=function(){const _0x131862=_0x164fcd,_0x56254b=this[_0x131862(0xcdd)]()[_0x131862(0x29b)]||0x0,_0x5cc18b=$dataSystem[_0x131862(0xb0c)][_0x56254b];_0x5cc18b&&this[_0x131862(0x984)](_0x5cc18b[_0x131862(0x2b5)]);},Game_Enemy['prototype'][_0x164fcd(0x801)]=function(){const _0x313890=_0x164fcd,_0x572547=this[_0x313890(0xcdd)]()[_0x313890(0x29b)]||0x0;return $dataSystem[_0x313890(0xb0c)][_0x572547];},Game_Enemy['prototype'][_0x164fcd(0xb76)]=function(_0x27d52d){return this['getAttackMotion']();},Game_Enemy[_0x164fcd(0x2bf)]['performDamage']=function(){const _0x5868a1=_0x164fcd;Game_Battler[_0x5868a1(0x2bf)][_0x5868a1(0x42e)][_0x5868a1(0xa10)](this);if(this[_0x5868a1(0x97f)]()&&this[_0x5868a1(0x86a)]()){if(_0x5868a1(0x9bd)===_0x5868a1(0x874)){const _0x2c9ac6=this[_0x5868a1(0x5e9)]()['scope'];return _0x2c9ac6[_0x5868a1(0xa5d)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);}else this['requestMotion']('damage');}SoundManager['playEnemyDamage']();},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0xd0d)]=function(){const _0xcc3f13=_0x164fcd;Game_Battler['prototype'][_0xcc3f13(0xd0d)][_0xcc3f13(0xa10)](this),this[_0xcc3f13(0x8f0)](_0xcc3f13(0xd10));},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0xbb4)]=function(){const _0x3101d7=_0x164fcd;Game_Battler['prototype'][_0x3101d7(0xbb4)][_0x3101d7(0xa10)](this),this[_0x3101d7(0x8f0)](_0x3101d7(0xd10));},Game_Enemy['prototype'][_0x164fcd(0x5cf)]=function(){const _0x1a9f11=_0x164fcd;Game_Battler[_0x1a9f11(0x2bf)]['performCounter'][_0x1a9f11(0xa10)](this),this['performAttack']();},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x600)]=function(){const _0x574e4d=_0x164fcd;if(this[_0x574e4d(0x86a)]()){if(_0x574e4d(0x12a)!==_0x574e4d(0x12a))this[_0x574e4d(0x1b4)]();else{if(this[_0x574e4d(0x459)]()>=0x1)return!![];return this[_0x574e4d(0xcdd)]()['collapse'];}}else return!![];},Game_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x961)]=function(){const _0x1f04e4=_0x164fcd;return this['svBattlerData']()[_0x1f04e4(0xa62)];},Game_Enemy[_0x164fcd(0x2bf)]['svBattlerAnchorY']=function(){const _0x29c68c=_0x164fcd;return this[_0x29c68c(0xcdd)]()['anchorY'];},Game_Enemy['prototype'][_0x164fcd(0x6e3)]=function(){const _0x2c66e4=_0x164fcd;return this[_0x2c66e4(0xcdd)]()[_0x2c66e4(0x5c2)];},VisuMZ['BattleCore'][_0x164fcd(0x76a)]=Game_Enemy[_0x164fcd(0x2bf)]['transform'],Game_Enemy['prototype'][_0x164fcd(0x55f)]=function(_0x1e54b0){const _0x27cb12=_0x164fcd;VisuMZ[_0x27cb12(0xb36)][_0x27cb12(0x76a)][_0x27cb12(0xa10)](this,_0x1e54b0),this[_0x27cb12(0xcc3)](),this['setupBattleCoreData']();const _0x24d766=this[_0x27cb12(0x921)]();if(_0x24d766){if(_0x27cb12(0x444)!==_0x27cb12(0x448))_0x24d766[_0x27cb12(0x849)]=undefined,_0x24d766['setBattler'](this);else{if(this[_0x27cb12(0xcb5)]){const _0x3bfb0d=this[_0x27cb12(0xcb5)][_0x27cb12(0xcf5)],_0x483a39=this['width']-0x8,_0x258f17=this[_0x27cb12(0x5e0)],_0x5665aa=this['padding'],_0x4a6d12=_0x1532c0[_0x27cb12(0x60b)](),_0x129a26=_0x555251[_0x27cb12(0xcbc)]();this['_dimmerSprite']['x']=0x4,_0x3bfb0d[_0x27cb12(0x5e6)](_0x483a39,_0x258f17),_0x3bfb0d['gradientFillRect'](0x0,0x0,_0x483a39,_0x5665aa,_0x129a26,_0x4a6d12,!![]),_0x3bfb0d[_0x27cb12(0x829)](0x0,_0x5665aa,_0x483a39,_0x258f17-_0x5665aa*0x2,_0x4a6d12),_0x3bfb0d[_0x27cb12(0xb90)](0x0,_0x258f17-_0x5665aa,_0x483a39,_0x5665aa,_0x4a6d12,_0x129a26,!![]),this['_dimmerSprite'][_0x27cb12(0x522)](0x0,0x0,_0x483a39,_0x258f17);}}}},Game_Unit[_0x164fcd(0x2bf)][_0x164fcd(0x54f)]=function(_0x4a69d1){const _0x21eb90=_0x164fcd;for(const _0x3dd4fb of this['members']()){if(_0x21eb90(0x723)===_0x21eb90(0x723)){if(_0x3dd4fb)_0x3dd4fb[_0x21eb90(0x54f)](_0x4a69d1);}else this[_0x21eb90(0xcb3)]=this[_0x21eb90(0xcb3)]||0x0,this[_0x21eb90(0xcb3)]++,this['_cache']={};}},Game_Unit[_0x164fcd(0x2bf)][_0x164fcd(0x148)]=function(){const _0x55235c=_0x164fcd,_0x5f1ff6=this[_0x55235c(0x279)]();return _0x5f1ff6[Math[_0x55235c(0x5b9)](_0x5f1ff6[_0x55235c(0xd04)])];},VisuMZ['BattleCore']['Game_Party_addActor']=Game_Party[_0x164fcd(0x2bf)][_0x164fcd(0x781)],Game_Party[_0x164fcd(0x2bf)][_0x164fcd(0x781)]=function(_0x50ce8b){const _0x9bc77e=_0x164fcd;VisuMZ[_0x9bc77e(0xb36)]['Game_Party_addActor']['call'](this,_0x50ce8b),BattleManager[_0x9bc77e(0x230)]();},VisuMZ['BattleCore'][_0x164fcd(0xb80)]=Game_Party['prototype']['removeActor'],Game_Party[_0x164fcd(0x2bf)][_0x164fcd(0x2f4)]=function(_0x3d36ec){const _0x314ef9=_0x164fcd;VisuMZ[_0x314ef9(0xb36)][_0x314ef9(0xb80)][_0x314ef9(0xa10)](this,_0x3d36ec),BattleManager[_0x314ef9(0x230)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x85e)]=Game_Troop[_0x164fcd(0x2bf)][_0x164fcd(0xd03)],Game_Troop[_0x164fcd(0x2bf)][_0x164fcd(0xd03)]=function(_0x10c7e7){const _0x2f4822=_0x164fcd;$gameTemp[_0x2f4822(0x9c9)](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0x10c7e7),VisuMZ['BattleCore']['Game_Troop_setup'][_0x2f4822(0xa10)](this,_0x10c7e7),this[_0x2f4822(0xc57)]();},VisuMZ['BattleCore'][_0x164fcd(0xced)]=Game_Troop[_0x164fcd(0x2bf)][_0x164fcd(0x462)],Game_Troop[_0x164fcd(0x2bf)][_0x164fcd(0x462)]=function(){const _0x1b2955=_0x164fcd;let _0xe9458a=VisuMZ[_0x1b2955(0xb36)][_0x1b2955(0xced)][_0x1b2955(0xa10)](this);return this[_0x1b2955(0x276)]&&(_0x1b2955(0x779)!==_0x1b2955(0x779)?this[_0x1b2955(0x6e1)]='':_0xe9458a*=this[_0x1b2955(0x276)]()),Math[_0x1b2955(0x405)](_0xe9458a);},Game_Troop[_0x164fcd(0x2bf)]['expRate']=function(){return 0x1;},Game_Troop[_0x164fcd(0x2bf)][_0x164fcd(0xc57)]=function(){const _0x2903c6=_0x164fcd,_0x3d7f41=DataManager['createTroopNote'](this['troop']()['id']);if(_0x3d7f41['match'](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x3bf08d=RegExp['$1']['split'](',')[_0x2903c6(0xa98)](_0x1653f7=>Number(_0x1653f7));this[_0x2903c6(0xa40)](),this[_0x2903c6(0x458)](_0x3bf08d);}},Game_Troop[_0x164fcd(0x2bf)][_0x164fcd(0xa40)]=function(){const _0x212345=_0x164fcd;let _0x436e3a='Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest'+'\x0a';_0x436e3a+='version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.';Imported[_0x212345(0x994)]&&(VisuMZ[_0x212345(0x689)][_0x212345(0xb5c)]<1.11&&(alert(_0x436e3a[_0x212345(0x272)](_0x212345(0x746))),SceneManager[_0x212345(0x7f7)]()));if(Imported[_0x212345(0xb9e)]){if(_0x212345(0xaef)!==_0x212345(0xaef)){const _0xecd8b=_0x156b3c[_0x212345(0xb36)][_0x212345(0x1de)]['Mechanics'];if(_0xecd8b[_0x212345(0xb8f)]>0x0&&_0x52cb34[_0xecd8b['BattleStartEvent']]){const _0x4dec21=_0x2a0918[_0xecd8b[_0x212345(0xb8f)]],_0x582afe=_0x4dec21[_0x212345(0xa4e)][_0x212345(0xd04)]-0x2,_0xc03f2e=_0x4dec21['list'][_0x582afe];if(_0xc03f2e&&_0xc03f2e['code']!==0xe6){const _0x7ec575={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x2a797e=_0x4dec21['list'][_0x212345(0xa22)]();_0x4dec21[_0x212345(0xa4e)]['unshift'](_0x7ec575),_0x4dec21[_0x212345(0xa4e)][_0x212345(0xa1f)](_0x2a797e);}}}else{if(VisuMZ[_0x212345(0x4b0)][_0x212345(0xb5c)]<1.19){if(_0x212345(0x9a2)==='jqJer')alert(_0x436e3a['format'](_0x212345(0x816))),SceneManager[_0x212345(0x7f7)]();else{if(_0xf92704[_0x212345(0xb36)]['Settings'][_0x212345(0x337)]['NameLegacy'])return;this[_0x212345(0xc77)]=new _0x9ab5c2(),_0x3b8520[_0x212345(0xa59)](this[_0x212345(0xc77)]);for(const _0x2ca0f3 of this[_0x212345(0x475)]){const _0x4d6eff=new _0x52b9d2();this[_0x212345(0xc77)][_0x212345(0x23a)](_0x4d6eff),_0x4d6eff[_0x212345(0x371)](_0x2ca0f3);}}}}}if(Imported[_0x212345(0x1f3)]){if(_0x212345(0x741)!==_0x212345(0x82a))VisuMZ['BattleSystemSTB']['version']<1.15&&(alert(_0x436e3a[_0x212345(0x272)](_0x212345(0x1a7))),SceneManager[_0x212345(0x7f7)]());else return _0x308ae7[_0x212345(0xb36)][_0x212345(0x1de)][_0x212345(0x514)]['CalcActionSpeedJS'][_0x212345(0xa10)](this);}},Game_Troop[_0x164fcd(0x2bf)][_0x164fcd(0x458)]=function(_0x1ae988){const _0x3b7a05=_0x164fcd;this[_0x3b7a05(0x41b)]={};for(const _0x5e1509 of this['members']()){if(!_0x5e1509)continue;_0x5e1509['setLetter']('');}for(const _0x42ee39 of _0x1ae988){if(_0x3b7a05(0xa80)!=='kgmWk')_0x51d4f9['BattleCore']['Game_BattlerBase_die']['call'](this),_0x1adc2f['isSceneBattle']()&&this['requestMotion']('dead');else{const _0x40664c=$dataTroops[_0x42ee39];if(_0x40664c)this[_0x3b7a05(0x602)](_0x40664c);}}this[_0x3b7a05(0x94e)]();},Game_Troop[_0x164fcd(0x2bf)]['addExtendedTroopMembers']=function(_0x3370b1){const _0x216ae3=_0x164fcd;for(const _0x3adeef of _0x3370b1[_0x216ae3(0x346)]){if($dataEnemies[_0x3adeef[_0x216ae3(0x5ec)]]){const _0x70a32=_0x3adeef[_0x216ae3(0x5ec)],_0x348cfc=_0x3adeef['x'],_0xb22da6=_0x3adeef['y'],_0x479fec=new Game_Enemy(_0x70a32,_0x348cfc,_0xb22da6);_0x3adeef[_0x216ae3(0xcf4)]&&('hTnfp'!==_0x216ae3(0x959)?(_0xf3fac4[_0x216ae3(0x2bf)][_0x216ae3(0x316)][_0x216ae3(0xa10)](this),this[_0x216ae3(0xbd6)]&&this[_0x216ae3(0xbd6)]['update'](),_0x513b9f['_tpbSceneChangeCacheActor']&&_0xbbbcb8[_0x216ae3(0x30c)]()):_0x479fec[_0x216ae3(0xad3)]()),this[_0x216ae3(0x466)][_0x216ae3(0x56b)](_0x479fec);}}},VisuMZ[_0x164fcd(0xb36)]['Game_Map_setupBattleback']=Game_Map['prototype'][_0x164fcd(0x24d)],Game_Map[_0x164fcd(0x2bf)][_0x164fcd(0x24d)]=function(){const _0x584cd7=_0x164fcd;VisuMZ[_0x584cd7(0xb36)][_0x584cd7(0x343)][_0x584cd7(0xa10)](this),this[_0x584cd7(0xb32)]();},Game_Map['prototype'][_0x164fcd(0xb32)]=function(){const _0x295503=_0x164fcd;this[_0x295503(0x680)]={},this[_0x295503(0x8b3)]={};if(!$dataMap)return;const _0x2e175b=$dataMap[_0x295503(0x9ea)];if(!_0x2e175b)return;const _0x32ac44=_0x2e175b[_0x295503(0xa5d)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x32ac44)for(const _0x3746df of _0x32ac44){if(_0x295503(0xa97)!==_0x295503(0x6b0)){_0x3746df[_0x295503(0xa5d)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x5c1226=Number(RegExp['$1']),_0x6ba54e=Number(RegExp['$2']),_0x2c0021=_0x6ba54e===0x1?this['_regionBattleback1']:this[_0x295503(0x8b3)],_0x1d4faf=String(RegExp['$3']);_0x2c0021[_0x5c1226]=_0x1d4faf;}else this['_mainSprite']['y']=this[_0x295503(0x5e0)]*0.5,this[_0x295503(0x35c)]['y']+=_0x3eae4d[_0x295503(0x5b9)](this[_0x295503(0x791)])*(_0x367ca0[_0x295503(0xb48)]()<0.5?-0x1:0x1);}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xa18)]=Game_Map[_0x164fcd(0x2bf)]['battleback1Name'],Game_Map[_0x164fcd(0x2bf)][_0x164fcd(0xcfd)]=function(){const _0x41cc78=_0x164fcd;if(!BattleManager[_0x41cc78(0x9b4)]()){const _0x23427b=$gamePlayer[_0x41cc78(0x93b)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this['_regionBattleback1'][_0x23427b]){if('SzSeS'!==_0x41cc78(0xaa4))_0x16ae75=_0x555a76>=_0x4fe494?_0x220903:_0x2d1a07;else return this[_0x41cc78(0x680)][_0x23427b];}}return VisuMZ[_0x41cc78(0xb36)]['Game_Map_battleback1Name'][_0x41cc78(0xa10)](this);},VisuMZ['BattleCore'][_0x164fcd(0x60d)]=Game_Map['prototype']['battleback2Name'],Game_Map['prototype'][_0x164fcd(0x6b3)]=function(){const _0x3518e6=_0x164fcd;if(!BattleManager[_0x3518e6(0x9b4)]()){const _0xef5e9=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3518e6(0x680)]&&this[_0x3518e6(0x8b3)][_0xef5e9]){if('oESDQ'!==_0x3518e6(0x683)){if(!_0x31a9af[_0x3518e6(0x53f)]())return;if(_0x18f4b6[_0x3518e6(0x361)]())return;if(!this[_0x3518e6(0x921)]())return;if(_0x3a2702['length']<=0x0)return;_0x3a872a=_0x7a341||{},_0x341705[_0x3518e6(0xbf8)]=_0x41f08c[_0x3518e6(0xbf8)]||_0x3518e6(0x4dc),_0x1f82f9[_0x3518e6(0xa77)]=_0x42a8a1[_0x3518e6(0xa77)]||[0x0,0x0,0x0,0x0],_0x24ceed[_0x3518e6(0x39b)]=_0x47f185[_0x3518e6(0x39b)]||0x0,this['battler']()[_0x3518e6(0x7ab)](_0x40dd1e,_0x40b2ec);}else return this['_regionBattleback2'][_0xef5e9];}}return VisuMZ['BattleCore'][_0x3518e6(0x60d)][_0x3518e6(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x1f4)]=Game_Map[_0x164fcd(0x2bf)]['encounterList'],Game_Map[_0x164fcd(0x2bf)][_0x164fcd(0x6eb)]=function(){const _0x134b4b=_0x164fcd;let _0x41dc11=JsonEx[_0x134b4b(0x835)](VisuMZ[_0x134b4b(0xb36)][_0x134b4b(0x1f4)][_0x134b4b(0xa10)](this));return VisuMZ[_0x134b4b(0xb36)][_0x134b4b(0xa64)](_0x41dc11);},VisuMZ[_0x164fcd(0xb36)]['ShuffleArray']=function(_0x48e112){const _0x5436ac=_0x164fcd;var _0x2824f2,_0x3669d7,_0x43a8fb;for(_0x43a8fb=_0x48e112[_0x5436ac(0xd04)]-0x1;_0x43a8fb>0x0;_0x43a8fb--){_0x2824f2=Math[_0x5436ac(0x923)](Math[_0x5436ac(0xb48)]()*(_0x43a8fb+0x1)),_0x3669d7=_0x48e112[_0x43a8fb],_0x48e112[_0x43a8fb]=_0x48e112[_0x2824f2],_0x48e112[_0x2824f2]=_0x3669d7;}return _0x48e112;},VisuMZ[_0x164fcd(0xb36)]['Game_Interpreter_PluginCommand']=Game_Interpreter['prototype'][_0x164fcd(0xb55)],Game_Interpreter[_0x164fcd(0x2bf)][_0x164fcd(0xb55)]=function(_0x282e35){const _0x49840f=_0x164fcd;return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ[_0x49840f(0xb36)]['Game_Interpreter_PluginCommand'][_0x49840f(0xa10)](this,_0x282e35);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x188)]=Game_Interpreter[_0x164fcd(0x2bf)][_0x164fcd(0x888)],Game_Interpreter[_0x164fcd(0x2bf)]['updateWaitMode']=function(){const _0x437210=_0x164fcd;if(SceneManager[_0x437210(0x53f)]()){if(_0x437210(0x5e1)!=='YkJgV')switch(this[_0x437210(0xa88)]){case'battleAngle':if(Imported[_0x437210(0x2d3)]){if(_0x437210(0xc91)!==_0x437210(0x396)){if($gameScreen['battleCameraData']()[_0x437210(0x9f4)]>0x0)return!![];this['_waitMode']='';}else{const _0x42b30e=this[_0x437210(0xc04)][_0x437210(0xcf5)];this[_0x437210(0xc04)]['setFrame'](0x0,0x0,_0x42b30e[_0x437210(0xab5)],_0x42b30e['height']);}}break;case _0x437210(0x1fc):if(BattleManager['_spriteset'][_0x437210(0xad0)]())return!![];this[_0x437210(0xa88)]='';break;case _0x437210(0x618):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen['battleCameraData']()['cameraDuration']>0x0)return!![];if($gameScreen[_0x437210(0x6e4)]()[_0x437210(0x627)]>0x0)return!![];this[_0x437210(0xa88)]='';}break;case _0x437210(0x5b0):if(BattleManager[_0x437210(0xbd6)][_0x437210(0x8b2)]())return!![];this[_0x437210(0xa88)]='';break;case _0x437210(0x555):if(BattleManager['_spriteset'][_0x437210(0x87a)]())return!![];this[_0x437210(0xa88)]='';break;case _0x437210(0xa85):if(BattleManager[_0x437210(0xbd6)][_0x437210(0xaa6)]())return!![];this[_0x437210(0xa88)]='';break;case _0x437210(0x563):if(BattleManager[_0x437210(0x566)]['isBusy']())return!![];this[_0x437210(0xa88)]='';break;case'battleMove':if(BattleManager['_spriteset'][_0x437210(0x57f)]())return!![];this[_0x437210(0xa88)]='';break;case _0x437210(0x37b):if(BattleManager['_spriteset'][_0x437210(0x947)]())return!![];this[_0x437210(0xa88)]='';break;case _0x437210(0x636):if(BattleManager['_spriteset']['isAnyoneGrowing']())return!![];this['_waitMode']='';break;case _0x437210(0x7b6):if(BattleManager[_0x437210(0xbd6)][_0x437210(0x8bf)]())return!![];this[_0x437210(0xa88)]='';break;case _0x437210(0x619):if(Imported['VisuMZ_3_ActSeqProjectiles']){if(BattleManager['_spriteset'][_0x437210(0x596)]())return!![];this[_0x437210(0xa88)]='';}break;case _0x437210(0xb4c):if(Imported[_0x437210(0x2d3)]){if($gameScreen['battleCameraData']()[_0x437210(0xb03)]>0x0)return!![];this['_waitMode']='';}break;case'battleSpin':if(BattleManager[_0x437210(0xbd6)][_0x437210(0x1e5)]())return!![];this[_0x437210(0xa88)]='';break;case'battleZoom':if(Imported[_0x437210(0x2d3)]){if($gameScreen['battleCameraData']()[_0x437210(0x718)]>0x0)return!![];this[_0x437210(0xa88)]='';}break;case _0x437210(0x403):if(Imported[_0x437210(0xa01)]){if(BattleManager[_0x437210(0xbd6)][_0x437210(0xb71)]){if('BPfak'===_0x437210(0x26f)){if(BattleManager[_0x437210(0xbd6)]['isAnyoneInjectAniPrepping']())return!![];this[_0x437210(0xa88)]=_0x437210(0x3f4);}else this[_0x437210(0xa1f)](_0x437210(0x8b8)),_0x450029[_0x437210(0x3ee)](_0x5d1b8a,_0x185284),this[_0x437210(0x227)]();}else{if('KxKJe'===_0x437210(0x299))this[_0x437210(0xa88)]='';else{let _0x47b253=_0x4c1b01(_0x1989cf['$1']);while(_0x47b253--){_0x4be848[_0x437210(0x56b)](this[_0x437210(0xb4f)]()[_0x437210(0x148)]());}return this[_0x437210(0x262)](_0x3246fc);}}break;}break;case _0x437210(0x3f4):if(Imported[_0x437210(0xa01)]){if('CoIhO'===_0x437210(0x8da))this[_0x437210(0x318)]=!this[_0x437210(0xa44)]['isHidden'](),!this['_appeared']&&(this['opacity']=0x0);else{if(BattleManager[_0x437210(0xbd6)][_0x437210(0x660)]())return!![];this['_waitMode']='';}}break;}else this['push']('performMagicEvasion',_0xfff05f);}return VisuMZ[_0x437210(0xb36)][_0x437210(0x188)][_0x437210(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xc7f)]=Game_Interpreter['prototype'][_0x164fcd(0x369)],Game_Interpreter[_0x164fcd(0x2bf)][_0x164fcd(0x369)]=function(_0x169831){const _0xcd67d4=_0x164fcd;return!$gameParty[_0xcd67d4(0x568)]()?this[_0xcd67d4(0x6a9)](_0x169831):VisuMZ[_0xcd67d4(0xb36)]['Game_Interpreter_command301'][_0xcd67d4(0xa10)](this,_0x169831);},Game_Interpreter['prototype'][_0x164fcd(0x41d)]=function(_0x500f10){const _0x508a0d=_0x164fcd;return VisuMZ[_0x508a0d(0xb36)]['Game_Interpreter_command301'][_0x508a0d(0xa10)](this,_0x500f10),BattleManager['setEventCallback'](_0x37f666=>{const _0x1056cf=_0x508a0d;_0x1056cf(0xb3f)===_0x1056cf(0xb3f)?this['_branch'][this[_0x1056cf(0x937)]]=_0x37f666:_0x961b26[_0x1056cf(0x5ef)](_0x14725a,_0x1954e1);}),!![];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x7dd)]=function(_0x464aa4){const _0x2b9a79=_0x164fcd,_0x279134=$dataCommonEvents[_0x464aa4];if(!_0x279134)return![];if(_0x279134['list'][_0x2b9a79(0xd04)]<=0x1)return![];return!![];},Game_Interpreter[_0x164fcd(0x2bf)]['command301_PreBattleEvent']=function(_0x2c2b27){const _0x1efe07=_0x164fcd,_0x4afa7c=VisuMZ[_0x1efe07(0xb36)]['Settings']['Mechanics'],_0x2379cb=_0x4afa7c[_0x1efe07(0xb8f)],_0x2cde41=$dataCommonEvents[_0x2379cb];if(_0x2cde41&&VisuMZ[_0x1efe07(0xb36)][_0x1efe07(0x7dd)](_0x2379cb)){const _0x33877d=this[_0x1efe07(0x12e)]()?this[_0x1efe07(0xb6f)]:0x0,_0x10a1c4=_0x2cde41[_0x1efe07(0xa4e)];this[_0x1efe07(0x531)](_0x10a1c4,_0x33877d),this[_0x1efe07(0x72f)]=JsonEx[_0x1efe07(0x835)](this[_0x1efe07(0x72f)]);const _0x1dfc14={'code':0xbc3,'indent':this[_0x1efe07(0x937)],'parameters':JsonEx[_0x1efe07(0x835)](_0x2c2b27)};return this[_0x1efe07(0x72f)][_0x1efe07(0x9a8)](this[_0x1efe07(0x5a0)]+0x1,0x0,_0x1dfc14),!![];}else{if(_0x1efe07(0x5d6)!=='ALEAf')_0x1efd04[_0x7b4852]=0x1,_0x1abdbd++;else return VisuMZ[_0x1efe07(0xb36)]['Game_Interpreter_command301']['call'](this,_0x2c2b27);}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x36c)]=BattleManager['onEncounter'],BattleManager[_0x164fcd(0x8d8)]=function(){const _0x29491=_0x164fcd;VisuMZ['BattleCore'][_0x29491(0x36c)][_0x29491(0xa10)](this),this[_0x29491(0x577)]();},BattleManager['onEncounterBattleCore']=function(){const _0x15d566=_0x164fcd,_0x1a263d=VisuMZ['BattleCore'][_0x15d566(0x1de)][_0x15d566(0x514)],_0x50c832=_0x1a263d[_0x15d566(0xb8f)];if(_0x50c832&&VisuMZ[_0x15d566(0xb36)][_0x15d566(0x7dd)](_0x50c832)){if(_0x15d566(0x967)===_0x15d566(0x556)){_0x138c7f-=_0x144028[_0x2a5242];if(_0x258fef<=0x0)return _0x42fe47;}else this[_0x15d566(0xa45)]=!![],$gameTemp[_0x15d566(0x933)](_0x1a263d[_0x15d566(0xb8f)]),$gameMap[_0x15d566(0xaf4)](),$gameMap[_0x15d566(0x202)]['_preBattleCommonEvent']=!![];}_0x1a263d['DefeatEvent']>0x0&&(this['_canLose']=!![]);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x1a2)]=Scene_Map[_0x164fcd(0x2bf)][_0x164fcd(0x631)],Scene_Map['prototype'][_0x164fcd(0x631)]=function(){const _0x487a16=_0x164fcd;if(BattleManager['_battleCoreBattleStartEvent'])return;VisuMZ['BattleCore'][_0x487a16(0x1a2)][_0x487a16(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x3a8)]=Scene_Map[_0x164fcd(0x2bf)][_0x164fcd(0xd01)],Scene_Map[_0x164fcd(0x2bf)]['launchBattle']=function(){const _0x34844a=_0x164fcd;BattleManager[_0x34844a(0xa45)]?this[_0x34844a(0x5ac)]():VisuMZ[_0x34844a(0xb36)][_0x34844a(0x3a8)]['call'](this);},Scene_Map[_0x164fcd(0x2bf)][_0x164fcd(0x5ac)]=function(){const _0xa1de7a=_0x164fcd;this[_0xa1de7a(0x6a0)]=!![];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xc7a)]=SceneManager['isSceneChanging'],SceneManager[_0x164fcd(0xb30)]=function(){const _0x948d50=_0x164fcd;if(BattleManager[_0x948d50(0xa45)])return![];return VisuMZ[_0x948d50(0xb36)]['SceneManager_isSceneChanging'][_0x948d50(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x13c)]=Game_Interpreter[_0x164fcd(0x2bf)][_0x164fcd(0xb67)],Game_Interpreter[_0x164fcd(0x2bf)]['terminate']=function(){const _0x4a9416=_0x164fcd;VisuMZ[_0x4a9416(0xb36)][_0x4a9416(0x13c)]['call'](this),this[_0x4a9416(0xc10)]&&('QImpc'===_0x4a9416(0x9f6)?(this[_0x4a9416(0xb25)]=_0x1251ee,this[_0x4a9416(0x41c)]=_0x246182,this[_0x4a9416(0xbac)]=_0x33a74c,this[_0x4a9416(0x9f9)]=_0x203679,this[_0x4a9416(0xb19)]=_0xc26d13,_0x27e3cd<=0x0&&this[_0x4a9416(0xb72)]()):(this[_0x4a9416(0xc10)]=undefined,SceneManager['_scene'][_0x4a9416(0x765)]()));},Scene_Map[_0x164fcd(0x2bf)][_0x164fcd(0x765)]=function(){const _0x13ca1e=_0x164fcd;BattleManager[_0x13ca1e(0xa45)]=undefined,BattleManager[_0x13ca1e(0x843)]=!![],this['stop']();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x894)]=Scene_Map['prototype']['initialize'],Scene_Map[_0x164fcd(0x2bf)][_0x164fcd(0x1ec)]=function(){const _0x318ca2=_0x164fcd;VisuMZ[_0x318ca2(0xb36)][_0x318ca2(0x894)][_0x318ca2(0xa10)](this),BattleManager['_battleCoreBattleResumeAfter']&&('uzcxc'==='uzcxc'?(this[_0x318ca2(0x6a0)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined):this[_0x318ca2(0x8f0)](_0x318ca2(0x880)));},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x736)]=Scene_Map[_0x164fcd(0x2bf)]['initialize'],Scene_Map['prototype']['initialize']=function(){const _0x5934d5=_0x164fcd;VisuMZ[_0x5934d5(0xb36)][_0x5934d5(0x736)][_0x5934d5(0xa10)](this),$gameTemp[_0x5934d5(0x9c9)]();},VisuMZ['BattleCore']['Scene_ItemBase_applyItem']=Scene_ItemBase[_0x164fcd(0x2bf)][_0x164fcd(0x4c6)],Scene_ItemBase['prototype'][_0x164fcd(0x4c6)]=function(){const _0x36ad92=_0x164fcd;VisuMZ[_0x36ad92(0xb36)][_0x36ad92(0xa09)][_0x36ad92(0xa10)](this);if(this['item']()[_0x36ad92(0x9ea)][_0x36ad92(0xa5d)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;if(this[_0x36ad92(0x5e9)]()[_0x36ad92(0x9ea)][_0x36ad92(0xa5d)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x36ad92(0x916)!==_0x36ad92(0x916)){if(!_0x116e85)return;for(const _0xc0b64c of _0x25ebfe['list']){if([0x6c,0x198]['includes'](_0xc0b64c[_0x36ad92(0x641)])){const _0xdab61f=_0xc0b64c[_0x36ad92(0xb98)][0x0];if(_0xdab61f['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];}else $gameTemp['_commonEventQueue']=[];}if(DataManager[_0x36ad92(0xba1)](this[_0x36ad92(0x5e9)]())){if('uUfcg'===_0x36ad92(0x773))$gameTemp[_0x36ad92(0x274)]=[];else{const _0x191d35=this[_0x36ad92(0x31f)]()?this[_0x36ad92(0x6ae)]():this[_0x36ad92(0x302)]();if(_0x191d35){const _0x10a249=_0x191d35[_0x36ad92(0x9ea)];if(_0x10a249[_0x36ad92(0xa5d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x48b219(_0x47531f['$1'])*0.01;else{if(_0x10a249[_0x36ad92(0xa5d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x4a769a(_0x2a4197['$1'])||0x0;}}return 0x1;}}},VisuMZ['BattleCore']['Scene_Options_maxCommands']=Scene_Options[_0x164fcd(0x2bf)][_0x164fcd(0x164)],Scene_Options['prototype'][_0x164fcd(0x164)]=function(){const _0x4ed581=_0x164fcd;let _0x3a227e=VisuMZ[_0x4ed581(0xb36)][_0x4ed581(0x663)][_0x4ed581(0xa10)](this);const _0x2af853=VisuMZ[_0x4ed581(0xb36)][_0x4ed581(0x1de)];if(_0x2af853[_0x4ed581(0x8ef)][_0x4ed581(0xb78)]&&_0x2af853[_0x4ed581(0x8ef)]['AdjustRect'])_0x3a227e+=0x2;if(_0x2af853[_0x4ed581(0x83d)][_0x4ed581(0xb78)]&&_0x2af853['HpGauge'][_0x4ed581(0x69c)])_0x3a227e+=0x1;return _0x3a227e;},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xcdb)]=Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x1ec)],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x1ec)]=function(){const _0x4d3920=_0x164fcd;VisuMZ['BattleCore'][_0x4d3920(0xcdb)][_0x4d3920(0xa10)](this),this[_0x4d3920(0x5ab)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x6ec)]=Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x316)],Scene_Battle[_0x164fcd(0x2bf)]['start']=function(){const _0x1c9a33=_0x164fcd;SceneManager['isPreviousSceneBattleTransitionable']()?_0x1c9a33(0xc7b)!=='wRZSd'?_0x28ef49[_0x1c9a33(0xb36)][_0x1c9a33(0x7db)][_0x1c9a33(0xa10)](this,_0x2513c6):(Scene_Message[_0x1c9a33(0x2bf)][_0x1c9a33(0x316)]['call'](this),this[_0x1c9a33(0xbd6)]&&this[_0x1c9a33(0xbd6)][_0x1c9a33(0x71d)](),BattleManager['_tpbSceneChangeCacheActor']&&BattleManager[_0x1c9a33(0x30c)]()):(VisuMZ[_0x1c9a33(0xb36)][_0x1c9a33(0x6ec)][_0x1c9a33(0xa10)](this),$gameTroop['onBattleStartOnceParallels']());},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x763)]=Scene_Battle[_0x164fcd(0x2bf)]['stop'],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x439)]=function(){const _0x4b0c05=_0x164fcd;if(SceneManager[_0x4b0c05(0x6e2)]()){if(_0x4b0c05(0xc52)!==_0x4b0c05(0xc52)){const _0x110541=_0x155bb9(_0x5744c0['$1'])[_0x4b0c05(0x77e)](',')[_0x4b0c05(0xa98)](_0x1f3da3=>_0x1f3da3[_0x4b0c05(0xab7)]());return[_0x4c7b2b['GetActionSequenceSpecialTargetWithFlags'](_0x110541)];}else Scene_Message[_0x4b0c05(0x2bf)][_0x4b0c05(0x439)][_0x4b0c05(0xa10)](this);}else VisuMZ[_0x4b0c05(0xb36)][_0x4b0c05(0x763)][_0x4b0c05(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xbf3)]=Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xb67)],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xb67)]=function(){const _0x16a8cf=_0x164fcd;SceneManager[_0x16a8cf(0x6e2)]()?'ECtNt'!==_0x16a8cf(0x2ba)?Scene_Message['prototype']['terminate'][_0x16a8cf(0xa10)](this):(_0x2fb3c5[_0x16a8cf(0xab5)]=_0x46431f(_0x13cbba['$1']),_0x3b71b0['height']=_0x1effa9(_0x3fd2bc['$2'])):VisuMZ[_0x16a8cf(0xb36)][_0x16a8cf(0xbf3)][_0x16a8cf(0xa10)](this),this[_0x16a8cf(0x5ab)]();},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x594)]=function(){const _0x5ea8e6=_0x164fcd;if(ConfigManager[_0x5ea8e6(0x36f)]&&ConfigManager['uiInputPosition']!==undefined){if('UzXSe'!==_0x5ea8e6(0x837))return ConfigManager[_0x5ea8e6(0x6fc)];else _0x32c6eb[_0x5ea8e6(0xadb)]();}else{if(this[_0x5ea8e6(0x4b2)]()===_0x5ea8e6(0x7e6))return![];else{if('PIBmm'!==_0x5ea8e6(0xb38)){if(this['actor']()[_0x5ea8e6(0x9ea)][_0x5ea8e6(0xa5d)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x5bfa55(_0x3fa4f1['$1']);else{if(this[_0x5ea8e6(0x6ae)]()[_0x5ea8e6(0x9ea)][_0x5ea8e6(0xa5d)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x1097cf(_0x78d9c5['$1']);}return 0x0;}else{return Scene_Message[_0x5ea8e6(0x2bf)][_0x5ea8e6(0x594)][_0x5ea8e6(0xa10)](this);;}}}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x808)]=Scene_Battle['prototype']['createAllWindows'],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x88c)]=function(){const _0x614da1=_0x164fcd;this[_0x614da1(0x509)](),VisuMZ[_0x614da1(0xb36)][_0x614da1(0x808)]['call'](this),this[_0x614da1(0x83f)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xc30)]=Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x9c3)],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x9c3)]=function(){const _0x1b174c=_0x164fcd;VisuMZ['BattleCore'][_0x1b174c(0xc30)][_0x1b174c(0xa10)](this),this[_0x1b174c(0x497)]();},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x497)]=function(){this['createMultiTargetWindow'](!![]),this['createMultiTargetWindow'](![]);},Scene_Battle['prototype'][_0x164fcd(0xa68)]=function(_0x226b74){const _0x49ed58=_0x164fcd,_0x50b367=Window_BattleMultiTarget['WIDTH'],_0x363d88=this[_0x49ed58(0x883)](0x1,!![]);let _0x55fa31=_0x226b74?Graphics[_0x49ed58(0x273)]-_0x50b367:0x0;_0x55fa31+=_0x226b74?Window_BattleMultiTarget[_0x49ed58(0x4b3)]:Window_BattleMultiTarget['ENEMY_OFFSET_X'];const _0x513ed1=[_0x49ed58(0x59b)][_0x49ed58(0x893)](this['battleLayoutStyle']())?0x0:this[_0x49ed58(0x8c5)][_0x49ed58(0x5e0)];let _0x41a67a=Graphics[_0x49ed58(0xa5c)]-_0x513ed1-_0x363d88;return _0x41a67a+=_0x226b74?Window_BattleMultiTarget[_0x49ed58(0xa6e)]:Window_BattleMultiTarget['ENEMY_OFFSET_Y'],new Rectangle(_0x55fa31,_0x41a67a,_0x50b367,_0x363d88);},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xc42)]=function(_0x4504b6){const _0x53f03d=_0x164fcd,_0x546fc2=this[_0x53f03d(0xa68)](_0x4504b6),_0x28aafa=new Window_BattleMultiTarget(_0x546fc2,_0x4504b6);this[_0x53f03d(0x4b6)](_0x28aafa);if(_0x4504b6)this[_0x53f03d(0x807)]=_0x28aafa;else{if(_0x53f03d(0x570)===_0x53f03d(0x7be)){let _0x526618=_0x53f03d(0x1e8);if(this[_0x53f03d(0x917)](_0x526618))return this[_0x53f03d(0x958)][_0x526618];return this[_0x53f03d(0x958)][_0x526618]=this[_0x53f03d(0x3cb)](this[_0x53f03d(0x6ae)]()),this[_0x53f03d(0x958)][_0x526618];}else this[_0x53f03d(0x412)]=_0x28aafa;}},VisuMZ[_0x164fcd(0xb36)]['Scene_Battle_createCancelButton']=Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x4cf)],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x4cf)]=function(){const _0x3d5616=_0x164fcd;VisuMZ[_0x3d5616(0xb36)][_0x3d5616(0xb42)]['call'](this),this['battleLayoutStyle']()===_0x3d5616(0x7e6)&&this[_0x3d5616(0x175)]();},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xc1e)]=function(_0x14d37b){const _0x145f97=_0x164fcd;if(_0x14d37b)this[_0x145f97(0x919)]['x']=(Graphics[_0x145f97(0xab5)]-Graphics['boxWidth'])/0x2,this['_windowLayer']['y']=(Graphics[_0x145f97(0x5e0)]-Graphics[_0x145f97(0xa5c)])/0x2;else{if(_0x145f97(0x62d)===_0x145f97(0x62d))this[_0x145f97(0x919)]['x']=Graphics['width']*0xa,this[_0x145f97(0x919)]['y']=Graphics[_0x145f97(0x5e0)]*0xa;else return this[_0x145f97(0xcdd)]()[_0x145f97(0xa62)];}},VisuMZ[_0x164fcd(0xb36)]['Scene_Battle_selectNextCommand']=Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x84e)],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x84e)]=function(){const _0x5aa010=_0x164fcd,_0x1b94b1=BattleManager[_0x5aa010(0x6ae)]();VisuMZ['BattleCore'][_0x5aa010(0xc9d)][_0x5aa010(0xa10)](this);if(_0x1b94b1){if(_0x5aa010(0xc22)===_0x5aa010(0x42f))this[_0x5aa010(0x566)]['push'](_0x5aa010(0x233),_0xcb446c[_0x5aa010(0xc27)][_0x5aa010(0x272)](_0x273251)),this[_0x5aa010(0x566)][_0x5aa010(0x56b)](_0x5aa010(0xa9d)),_0x4ae0b6=!![];else{if(_0x1b94b1===BattleManager[_0x5aa010(0x6ae)]())return;if(_0x1b94b1===BattleManager['_subject'])return;if(_0x1b94b1[_0x5aa010(0x921)]())_0x1b94b1[_0x5aa010(0x921)]()[_0x5aa010(0x4e2)]();}}},VisuMZ['BattleCore'][_0x164fcd(0x948)]=Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x58c)],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x58c)]=function(){const _0x4bc7cb=_0x164fcd,_0xb78cab=BattleManager[_0x4bc7cb(0x6ae)]();if(_0xb78cab&&_0xb78cab[_0x4bc7cb(0x921)])_0xb78cab['battler']()[_0x4bc7cb(0x4e2)]();VisuMZ['BattleCore'][_0x4bc7cb(0x948)][_0x4bc7cb(0xa10)](this);},VisuMZ['BattleCore'][_0x164fcd(0x450)]=Scene_Battle['prototype']['logWindowRect'],Scene_Battle['prototype'][_0x164fcd(0x1e0)]=function(){const _0x3ecc7f=_0x164fcd;if(VisuMZ[_0x3ecc7f(0xb36)]['Settings']['BattleLog']['BattleLogRectJS']){if(_0x3ecc7f(0xcbb)===_0x3ecc7f(0xcbb))return VisuMZ['BattleCore'][_0x3ecc7f(0x1de)][_0x3ecc7f(0xa08)][_0x3ecc7f(0xa2a)][_0x3ecc7f(0xa10)](this);else this[_0x3ecc7f(0x54f)](_0x3ecc7f(0x322));}return VisuMZ['BattleCore'][_0x3ecc7f(0x450)][_0x3ecc7f(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)]['Scene_Battle_createPartyCommandWindow']=Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xcd8)],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xcd8)]=function(){const _0x1c8eb2=_0x164fcd;VisuMZ[_0x1c8eb2(0xb36)][_0x1c8eb2(0x5c0)]['call'](this),this[_0x1c8eb2(0x1bd)]();},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x1bd)]=function(){const _0x373fac=_0x164fcd,_0x43336c=this[_0x373fac(0x35b)];_0x43336c[_0x373fac(0x70e)](_0x373fac(0xac2),this[_0x373fac(0xb02)]['bind'](this)),_0x43336c[_0x373fac(0x70e)](_0x373fac(0x51f),this['commandOptions']['bind'](this));const _0x4f6ba5=this['battleLayoutStyle']();switch(_0x4f6ba5){case'xp':case _0x373fac(0x404):return this[_0x373fac(0x35b)]['setBackgroundType'](0x1);break;}},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xb02)]=function(){const _0x3aaf9c=_0x164fcd;BattleManager[_0x3aaf9c(0x9c8)]=!![],$gameParty[_0x3aaf9c(0xc93)](),this[_0x3aaf9c(0x84e)](),BattleManager[_0x3aaf9c(0xb52)]()&&(BattleManager[_0x3aaf9c(0x4d8)]=![]);},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x707)]=function(){const _0x2e46ae=_0x164fcd;this[_0x2e46ae(0x604)]()?'EkHit'!==_0x2e46ae(0x985)?this[_0x2e46ae(0x25b)]():(this['_callSceneOptions']=!![],this[_0x2e46ae(0x566)]['push'](_0x2e46ae(0x233),VisuMZ[_0x2e46ae(0xb36)][_0x2e46ae(0x1de)]['PartyCmd'][_0x2e46ae(0x3c0)])):this['callOptions']();},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x604)]=function(){return BattleManager['isActiveTpb']();},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x25b)]=function(){const _0x4db9d9=_0x164fcd;this['_callSceneOptions']=![],this[_0x4db9d9(0xbd6)][_0x4db9d9(0x71d)](),this[_0x4db9d9(0x919)][_0x4db9d9(0xc39)]=![];if(BattleManager['isBattleTest']())($dataSystem['battleback1Name']||$dataSystem[_0x4db9d9(0x6b3)])&&SceneManager[_0x4db9d9(0x426)]();else($gameMap['battleback1Name']()||$gameMap[_0x4db9d9(0x6b3)]())&&SceneManager['snapForBackground']();SceneManager[_0x4db9d9(0x56b)](Scene_Options);if(BattleManager[_0x4db9d9(0xb52)]()){if(_0x4db9d9(0x191)!==_0x4db9d9(0x271))BattleManager[_0x4db9d9(0x9b2)]=BattleManager['actor']();else for(const _0x598e1b of _0x281ae4[_0x4db9d9(0xa4e)]){[0x6c,0x198][_0x4db9d9(0x893)](_0x598e1b[_0x4db9d9(0x641)])&&(_0x57cf87+='\x0a',_0x4f3a03+=_0x598e1b[_0x4db9d9(0xb98)][0x0]);}}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xc0b)]=Scene_Battle['prototype'][_0x164fcd(0x6fd)],Scene_Battle[_0x164fcd(0x2bf)]['updateBattleProcess']=function(){const _0x2fce65=_0x164fcd;VisuMZ[_0x2fce65(0xb36)][_0x2fce65(0xc0b)]['call'](this);if(this[_0x2fce65(0x7ff)]&&!BattleManager[_0x2fce65(0x5a7)])this[_0x2fce65(0x25b)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x126)]=Scene_Battle[_0x164fcd(0x2bf)]['update'],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x71d)]=function(){const _0x3a545a=_0x164fcd;VisuMZ[_0x3a545a(0xb36)][_0x3a545a(0x126)]['call'](this),this['updateOnceParallelInterpreters']();},Scene_Battle['prototype'][_0x164fcd(0x83f)]=function(){const _0x2d5070=_0x164fcd,_0x3479fa=this[_0x2d5070(0x858)]();this[_0x2d5070(0x669)]=new Window_AutoBattleCancel(_0x3479fa),this[_0x2d5070(0x669)][_0x2d5070(0xad3)](),this['addChild'](this[_0x2d5070(0x669)]);},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x858)]=function(){const _0x4b4499=_0x164fcd;return VisuMZ[_0x4b4499(0xb36)]['Settings'][_0x4b4499(0x8ef)]['AutoBattleRect']['call'](this);},Scene_Battle['prototype'][_0x164fcd(0x5ab)]=function(){const _0x3ff4e4=_0x164fcd;this[_0x3ff4e4(0x3fb)]=[];},Scene_Battle[_0x164fcd(0x2bf)]['updateOnceParallelInterpreters']=function(){const _0x5a31f3=_0x164fcd;if(!this[_0x5a31f3(0x3fb)])return;for(const _0x39a29a of this[_0x5a31f3(0x3fb)]){_0x39a29a&&_0x39a29a[_0x5a31f3(0x71d)]();}},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x2d7)]=function(_0x16792a){const _0x2507e4=_0x164fcd,_0x4a1936=$dataCommonEvents[_0x16792a];if(!_0x4a1936)return;const _0x1a8eb5=new Game_BattleOnceParallelInterpreter();this[_0x2507e4(0x68e)](_0x1a8eb5),_0x1a8eb5[_0x2507e4(0xc97)](_0x16792a);},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x68e)]=function(_0x4f7b86){const _0x3f14cc=_0x164fcd;this[_0x3f14cc(0x3fb)]=this['_onceParallelInterpreters']||[],this[_0x3f14cc(0x3fb)]['push'](_0x4f7b86);},Scene_Battle[_0x164fcd(0x2bf)]['removeOnceParallelInterpreter']=function(_0x22c6e9){const _0x4bcc9a=_0x164fcd;this[_0x4bcc9a(0x3fb)]=this[_0x4bcc9a(0x3fb)]||[],this['_onceParallelInterpreters'][_0x4bcc9a(0x494)](_0x22c6e9);},Game_Troop[_0x164fcd(0x2bf)][_0x164fcd(0x73a)]=function(){const _0xef2640=_0x164fcd;for(const _0xcaffe5 of this[_0xef2640(0x69b)]()[_0xef2640(0xbca)]){if('BREjB'===_0xef2640(0x8e2))this[_0xef2640(0x3dc)]=_0x25e14d;else{if(!this[_0xef2640(0x899)](_0xcaffe5))continue;SceneManager['_scene'][_0xef2640(0x83c)](_0xcaffe5);}}},Game_Troop[_0x164fcd(0x2bf)][_0x164fcd(0x899)]=function(_0x280273){const _0x59c1f0=_0x164fcd;if(!_0x280273)return;for(const _0x4483c3 of _0x280273['list']){if(_0x59c1f0(0xb96)===_0x59c1f0(0x59d))this[_0x59c1f0(0x86a)]()&&this[_0x59c1f0(0x79c)][_0x59c1f0(0x25e)]();else{if([0x6c,0x198][_0x59c1f0(0x893)](_0x4483c3[_0x59c1f0(0x641)])){const _0x1a4f0a=_0x4483c3[_0x59c1f0(0xb98)][0x0];if(_0x1a4f0a[_0x59c1f0(0xa5d)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}return![];},Scene_Battle['prototype']['playOnceParallelTroopPage']=function(_0x8e5d7b){if(!_0x8e5d7b)return;const _0x454160=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x454160),_0x454160['setTroopPage'](_0x8e5d7b);};function Game_BattleOnceParallelInterpreter(){const _0x2e434e=_0x164fcd;this[_0x2e434e(0x1ec)](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x164fcd(0x5fc)](Game_Interpreter[_0x164fcd(0x2bf)]),Game_BattleOnceParallelInterpreter[_0x164fcd(0x2bf)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x164fcd(0x2bf)][_0x164fcd(0xc97)]=function(_0x313475){const _0x2911df=_0x164fcd,_0x3706c5=$dataCommonEvents[_0x313475];_0x3706c5?this['setup'](_0x3706c5['list'],0x0):_0x2911df(0x8d0)!==_0x2911df(0x1f8)?this[_0x2911df(0xb67)]():(this['_effectsContainer']=new _0x50c668(),this['addChild'](this[_0x2911df(0x804)]));},Game_BattleOnceParallelInterpreter[_0x164fcd(0x2bf)][_0x164fcd(0xb67)]=function(){const _0x128e34=_0x164fcd;if(!SceneManager[_0x128e34(0x53f)]())return;SceneManager[_0x128e34(0x4c8)][_0x128e34(0x32b)](this),Game_Interpreter[_0x128e34(0x2bf)]['terminate'][_0x128e34(0xa10)](this);},Game_BattleOnceParallelInterpreter[_0x164fcd(0x2bf)][_0x164fcd(0xafe)]=function(_0x2f888c){const _0x48b101=_0x164fcd;_0x2f888c?this['setup'](_0x2f888c[_0x48b101(0xa4e)],0x0):this[_0x48b101(0xb67)]();},Scene_Battle['prototype'][_0x164fcd(0x3f8)]=function(){const _0x360cba=_0x164fcd;return VisuMZ['BattleCore'][_0x360cba(0x1de)]['PartyCmd'][_0x360cba(0x34b)];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xc21)]=Scene_Battle[_0x164fcd(0x2bf)]['startPartyCommandSelection'],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x231)]=function(){const _0x5b66a6=_0x164fcd;if(this[_0x5b66a6(0x3f8)]()){if(_0x5b66a6(0x28b)!==_0x5b66a6(0x21a))this['onDisabledPartyCommandSelection']();else{if(!this[_0x5b66a6(0x7f9)])return![];if(this['_battler'][_0x5b66a6(0x31f)]())return!![];if(this[_0x5b66a6(0x7f9)][_0x5b66a6(0xc49)]())return![];if(this[_0x5b66a6(0x4c4)]<=0x0)return![];const _0x3bb579=this[_0x5b66a6(0x7f9)][_0x5b66a6(0x302)]()[_0x5b66a6(0x9ea)];if(_0x3bb579[_0x5b66a6(0xa5d)](/<SHOW HP GAUGE>/i))return!![];if(_0x3bb579[_0x5b66a6(0xa5d)](/<HIDE HP GAUGE>/i))return![];const _0x13686c=_0x512baf['BattleCore'][_0x5b66a6(0x1de)][_0x5b66a6(0x83d)];if(_0x13686c[_0x5b66a6(0x32d)]){if(_0x13686c[_0x5b66a6(0x76d)]&&_0x33b99c[_0x5b66a6(0x9b4)]())return!![];if(this[_0x5b66a6(0x7f9)][_0x5b66a6(0x813)])return![];return this[_0x5b66a6(0x7f9)]['hasBeenDefeatedBefore']();}return!![];}}else VisuMZ[_0x5b66a6(0xb36)][_0x5b66a6(0xc21)][_0x5b66a6(0xa10)](this);},Scene_Battle[_0x164fcd(0x2bf)]['onDisabledPartyCommandSelection']=function(){const _0x2105d9=_0x164fcd;if(BattleManager[_0x2105d9(0x25a)]()){if('QFvEe'!==_0x2105d9(0xcfa))this[_0x2105d9(0x84e)]();else{let _0x5b6ee2=_0x1f18b2[_0x2105d9(0x56a)];_0x5b6ee2*=_0x2eec41[_0x2105d9(0x4fe)](_0x77f87),_0x5b6ee2*=this[_0x2105d9(0x724)]()['attackStatesRate'](_0x5d6ba6),_0x5b6ee2*=this[_0x2105d9(0xc35)](_0x2b6825),_0xef4b25[_0x2105d9(0xb48)]()<_0x5b6ee2&&(_0x237712['_deathStateApplied']=!![],this[_0x2105d9(0x406)](_0x5a080d));}}else BattleManager[_0x2105d9(0xb52)]()&&VisuMZ[_0x2105d9(0xb36)][_0x2105d9(0xc21)][_0x2105d9(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xb28)]=Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x8d4)],Scene_Battle['prototype'][_0x164fcd(0x8d4)]=function(){const _0x253281=_0x164fcd;BattleManager[_0x253281(0xb52)]()?(this[_0x253281(0x826)](),this[_0x253281(0x3ff)]()):VisuMZ[_0x253281(0xb36)][_0x253281(0xb28)]['call'](this);},Scene_Battle[_0x164fcd(0x2bf)]['tpbCommandFight']=function(){const _0x30ebe8=_0x164fcd;if(!VisuMZ[_0x30ebe8(0xb36)]['TpbActiveChangeEnabled'])return;if(Imported[_0x30ebe8(0xb9e)]&&BattleManager[_0x30ebe8(0xc96)]())return;const _0x329619=$gameParty[_0x30ebe8(0x279)]()[_0x30ebe8(0x69f)](_0xdef593=>_0xdef593[_0x30ebe8(0x57c)]()&&_0xdef593[_0x30ebe8(0x189)]());BattleManager['_currentActor']=_0x329619[0x0]||null,BattleManager[_0x30ebe8(0x6b6)]&&BattleManager['_currentActor'][_0x30ebe8(0x4e9)](_0x30ebe8(0x817));},VisuMZ['BattleCore'][_0x164fcd(0x47a)]=Scene_Battle['prototype'][_0x164fcd(0x22d)],Scene_Battle['prototype'][_0x164fcd(0x22d)]=function(){const _0x42b4=_0x164fcd;VisuMZ[_0x42b4(0xb36)][_0x42b4(0x47a)]['call'](this),this[_0x42b4(0x9c7)]();},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x9c7)]=function(){const _0x455ef5=_0x164fcd,_0x597dfd=this['_actorCommandWindow'];_0x597dfd[_0x455ef5(0x70e)](_0x455ef5(0xaee),this[_0x455ef5(0xa0f)]['bind'](this)),_0x597dfd[_0x455ef5(0x70e)](_0x455ef5(0xac2),this[_0x455ef5(0x962)][_0x455ef5(0x1f7)](this)),_0x597dfd[_0x455ef5(0x70e)](_0x455ef5(0x40b),this[_0x455ef5(0x4cd)][_0x455ef5(0x1f7)](this));if(BattleManager[_0x455ef5(0xb52)]()){if(this['isPartyCommandWindowDisabled']()){if(_0x455ef5(0x372)!==_0x455ef5(0x394))delete _0x597dfd[_0x455ef5(0xa17)][_0x455ef5(0x673)];else{let _0x25d712=_0x40e3af['skillTypes'][_0x2112cb];if(!_0x25d712)return;let _0x50e2f8=_0x25d712;const _0x3bd834=this[_0x455ef5(0xb3c)]();if(_0x3bd834===_0x455ef5(0xb1d))_0x50e2f8=_0x50e2f8[_0x455ef5(0x6db)](/\x1I\[(\d+)\]/gi,''),_0x50e2f8=_0x50e2f8['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0x25d712[_0x455ef5(0xa5d)](/\\I\[(\d+)\]/i)){const _0x2814d1=_0x3e3c12[_0x455ef5(0xad2)]?_0x1b06ed[_0x455ef5(0x8fc)][_0x455ef5(0x1de)]['Skills']:_0xd8b2aa['BattleCore'][_0x455ef5(0x1de)][_0x455ef5(0x560)],_0x467d9b=_0x2c500f[_0x455ef5(0x777)][_0x455ef5(0x893)](_0x1b9be6),_0xd26a88=_0x467d9b?_0x2814d1['IconStypeMagic']:_0x2814d1[_0x455ef5(0x46e)];_0x50e2f8=_0x455ef5(0x478)['format'](_0xd26a88,_0x25d712);}}this[_0x455ef5(0x6a2)](_0x50e2f8,_0x455ef5(0x880),!![],_0x4b02e2);}}else _0x455ef5(0x187)!==_0x455ef5(0x77d)?_0x597dfd[_0x455ef5(0x70e)]('cancel',this[_0x455ef5(0x177)][_0x455ef5(0x1f7)](this)):this[_0x455ef5(0x5af)]=_0x455ef5(0x329);}},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xa0f)]=function(){const _0x2501cb=_0x164fcd;this[_0x2501cb(0x9d5)]();},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x962)]=function(){const _0x5d802e=_0x164fcd;BattleManager[_0x5d802e(0x6ae)]()[_0x5d802e(0x778)](),BattleManager[_0x5d802e(0xa6f)](),BattleManager[_0x5d802e(0x298)](),this[_0x5d802e(0xb4d)]();},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x4cd)]=function(){const _0x3de1b1=_0x164fcd,_0x406bee=BattleManager[_0x3de1b1(0x784)](),_0x410a07=this['_actorCommandWindow'][_0x3de1b1(0x96d)]();_0x406bee[_0x3de1b1(0x1bc)](_0x410a07),BattleManager['actor']()[_0x3de1b1(0x2fa)]($dataSkills[_0x410a07]),this['onSelectAction']();},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x177)]=function(){const _0x120198=_0x164fcd;this[_0x120198(0x8ca)]()?this[_0x120198(0x5b2)]():this[_0x120198(0xa51)]();},VisuMZ[_0x164fcd(0xb36)]['TpbActiveChangeEnabled']=![],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x8ca)]=function(){const _0x3f0d7f=_0x164fcd;if(Imported[_0x3f0d7f(0xb9e)]&&BattleManager[_0x3f0d7f(0xc96)]())return![];else{if(!VisuMZ[_0x3f0d7f(0xb36)][_0x3f0d7f(0x6e0)])return![];const _0x13aade=$gameParty[_0x3f0d7f(0x279)]()[_0x3f0d7f(0x69f)](_0x1c36f4=>_0x1c36f4[_0x3f0d7f(0x57c)]()&&_0x1c36f4[_0x3f0d7f(0x189)]());return _0x13aade['length']>0x0&&BattleManager[_0x3f0d7f(0x6ae)]()!==_0x13aade[_0x13aade['length']-0x1];}},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x5b2)]=function(){const _0x47eeb7=_0x164fcd,_0x459f52=BattleManager[_0x47eeb7(0x6ae)](),_0x2becbf=_0x459f52['battler']();if(_0x2becbf)_0x2becbf[_0x47eeb7(0x4e2)]();const _0x1f13b7=$gameParty[_0x47eeb7(0x279)]()[_0x47eeb7(0x69f)](_0x221fc3=>_0x221fc3[_0x47eeb7(0x57c)]()&&_0x221fc3[_0x47eeb7(0x189)]()),_0x249c6c=_0x1f13b7[_0x47eeb7(0x990)](_0x459f52),_0x3278b2=_0x1f13b7[_0x249c6c+0x1];BattleManager[_0x47eeb7(0x6b6)]=_0x3278b2||null;if(_0x3278b2)_0x3278b2['setActionState'](_0x47eeb7(0x817));_0x459f52['setActionState'](_0x47eeb7(0x47c)),this[_0x47eeb7(0xb4d)]();},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xa51)]=function(){const _0x477e21=_0x164fcd;this[_0x477e21(0x35b)][_0x477e21(0xd03)](),this['_actorCommandWindow'][_0x477e21(0x511)]();if(!VisuMZ[_0x477e21(0xb36)][_0x477e21(0x6e0)])return;if(Imported[_0x477e21(0xb9e)]&&BattleManager[_0x477e21(0xc96)]())return;if(BattleManager[_0x477e21(0x6b6)]){BattleManager['_currentActor']['setActionState'](_0x477e21(0x47c));const _0x30cbbb=BattleManager['_currentActor'][_0x477e21(0x921)]();if(_0x30cbbb)_0x30cbbb['stepBack']();}BattleManager[_0x477e21(0x6b6)]=null;},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x83a)]=Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x1e6)],Scene_Battle[_0x164fcd(0x2bf)]['createHelpWindow']=function(){const _0x17c2ed=_0x164fcd;VisuMZ[_0x17c2ed(0xb36)][_0x17c2ed(0x83a)][_0x17c2ed(0xa10)](this),this[_0x17c2ed(0x51b)]();},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x51b)]=function(){const _0x484a85=_0x164fcd;this[_0x484a85(0xc78)]['setHelpWindow'](this[_0x484a85(0x5ad)]),this[_0x484a85(0x35b)][_0x484a85(0x4bd)](this[_0x484a85(0x5ad)]);},Scene_Battle['prototype']['battleLayoutStyle']=function(){const _0x118c30=_0x164fcd;if($gameTemp[_0x118c30(0xc82)]!==undefined){if(_0x118c30(0x3b5)===_0x118c30(0x366))_0x22279b[_0x118c30(0xb36)][_0x118c30(0x938)][_0x118c30(0xa10)](this),this['callNextMethod']();else return $gameTemp[_0x118c30(0xc82)];}if(this[_0x118c30(0x313)])return this[_0x118c30(0x313)];this[_0x118c30(0x313)]=VisuMZ[_0x118c30(0xb36)]['Settings'][_0x118c30(0x9a3)][_0x118c30(0xb8c)][_0x118c30(0x790)]()[_0x118c30(0xab7)]();if(this[_0x118c30(0x313)]===_0x118c30(0xbe5)&&!Imported['VisuMZ_3_SideviewBattleUI']){if(_0x118c30(0xac7)==='tuDTX')this[_0x118c30(0x313)]='default';else{if(!_0x41363e['isSceneBattle']())return;_0x26f3a4[_0x118c30(0x48e)](_0x331776,_0x4b481b);const _0x13ca88=_0x277aa0[_0x118c30(0x287)];_0x231103[_0x118c30(0x4c8)][_0x118c30(0x2d7)](_0x13ca88);}}if(this[_0x118c30(0x313)]===_0x118c30(0x59b)&&!Imported[_0x118c30(0x8af)]){if(_0x118c30(0x49f)!==_0x118c30(0xa38))this[_0x118c30(0x313)]=_0x118c30(0x18e);else return _0x54f33c[_0x118c30(0xb36)][_0x118c30(0x1de)][_0x118c30(0x337)]['Shadow'];}return this[_0x118c30(0x313)];},VisuMZ['BattleCore'][_0x164fcd(0x7ef)]=Scene_Battle['prototype'][_0x164fcd(0x5c9)],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x5c9)]=function(){const _0x804528=_0x164fcd,_0x709466=this[_0x804528(0x4b2)]();switch(_0x709466){case _0x804528(0xa4e):return this[_0x804528(0x883)](Math[_0x804528(0xc92)](0x1,$gameParty[_0x804528(0x91c)]()),!![]);break;default:return VisuMZ[_0x804528(0xb36)][_0x804528(0x7ef)][_0x804528(0xa10)](this);break;}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x62a)]=Scene_Battle['prototype'][_0x164fcd(0x4ef)],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x4ef)]=function(){const _0x23e41a=_0x164fcd,_0x31a0e0=this['battleLayoutStyle']();switch(_0x31a0e0){case'border':return this[_0x23e41a(0x2f9)]();break;case _0x23e41a(0x18e):case _0x23e41a(0xa4e):case'xp':case _0x23e41a(0x404):default:return VisuMZ[_0x23e41a(0xb36)][_0x23e41a(0x62a)]['call'](this);break;}},Scene_Battle[_0x164fcd(0x2bf)]['statusWindowRect']=function(){const _0xda0d8a=_0x164fcd,_0x43203f=this[_0xda0d8a(0x4b2)]();switch(_0x43203f){case'xp':case _0xda0d8a(0x404):return this[_0xda0d8a(0x6e6)]();break;case'border':return this[_0xda0d8a(0xaad)]();break;case _0xda0d8a(0x18e):case _0xda0d8a(0xa4e):default:return this[_0xda0d8a(0xcee)]();break;}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x73f)]=Scene_Battle['prototype'][_0x164fcd(0x745)],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x745)]=function(){const _0x237c70=_0x164fcd,_0x58bd8e=this['battleLayoutStyle']();switch(_0x58bd8e){case'xp':case'portrait':return this[_0x237c70(0xbf4)]();break;case _0x237c70(0x7e6):return this[_0x237c70(0x92d)]();case _0x237c70(0x18e):case _0x237c70(0xa4e):default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x74f)]=function(){const _0x779a17=_0x164fcd,_0x26ed1f=VisuMZ[_0x779a17(0xb36)][_0x779a17(0x1de)]['BattleLayout'],_0x403c60=_0x26ed1f[_0x779a17(0x2c8)]||0xc0,_0x471749=this[_0x779a17(0x5c9)](),_0x3955f7=this[_0x779a17(0x594)]()?Graphics['boxWidth']-_0x403c60:0x0,_0x4bc483=Graphics[_0x779a17(0xa5c)]-_0x471749;return new Rectangle(_0x3955f7,_0x4bc483,_0x403c60,_0x471749);},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x824)]=function(){const _0x29b652=_0x164fcd;return this[_0x29b652(0x745)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x22f)]=Scene_Battle[_0x164fcd(0x2bf)]['updateStatusWindowPosition'],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x3ba)]=function(){const _0x3214e7=_0x164fcd,_0x435bc0=this['battleLayoutStyle']();switch(_0x435bc0){case'xp':case'portrait':case _0x3214e7(0x7e6):break;case _0x3214e7(0x18e):case _0x3214e7(0xa4e):default:VisuMZ[_0x3214e7(0xb36)]['Scene_Battle_updateStatusWindowPosition'][_0x3214e7(0xa10)](this);break;}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x80a)]=Scene_Battle['prototype'][_0x164fcd(0x270)],Scene_Battle[_0x164fcd(0x2bf)]['startActorSelection']=function(){const _0x3e99e3=_0x164fcd;VisuMZ[_0x3e99e3(0xb36)][_0x3e99e3(0x80a)][_0x3e99e3(0xa10)](this),this[_0x3e99e3(0x675)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x508)]=Scene_Battle[_0x164fcd(0x2bf)]['startEnemySelection'],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x70a)]=function(){const _0x50036b=_0x164fcd;VisuMZ[_0x50036b(0xb36)][_0x50036b(0x508)]['call'](this),this['_enemyWindow'][_0x50036b(0x766)](),this[_0x50036b(0x675)]();},Scene_Battle[_0x164fcd(0x2bf)]['makeTargetSelectionMoreVisible']=function(){const _0x4fc518=_0x164fcd,_0x3bfb9e=this[_0x4fc518(0x4b2)]();['xp',_0x4fc518(0x404),_0x4fc518(0x7e6)][_0x4fc518(0x893)](_0x3bfb9e)&&('tuiQj'===_0x4fc518(0x1bb)?(this[_0x4fc518(0x6a0)]=!![],_0x57f23c[_0x4fc518(0x843)]=_0x42c2c9):this[_0x4fc518(0xc78)]['close']());if(_0x3bfb9e===_0x4fc518(0x7e6)||this['isSkillItemWindowsMiddle']()){if(_0x4fc518(0x9c4)===_0x4fc518(0x9c4))this[_0x4fc518(0x2f7)][_0x4fc518(0x511)](),this[_0x4fc518(0x219)]['close']();else return _0x4745e1[_0x4fc518(0x69f)](_0x3a1383=>_0x3a1383['isAlive']()&&_0x3a1383!==_0x320b34);}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xb5e)]=Scene_Battle[_0x164fcd(0x2bf)]['onActorOk'],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x5b8)]=function(){const _0x1f75fd=_0x164fcd;VisuMZ[_0x1f75fd(0xb36)][_0x1f75fd(0xb5e)][_0x1f75fd(0xa10)](this),this[_0x1f75fd(0xcc8)]();},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x33e)]=function(){const _0x4468e7=_0x164fcd;return[_0x4468e7(0xb4e),_0x4468e7(0x7a7),_0x4468e7(0x40b)][_0x4468e7(0x893)](this[_0x4468e7(0xc78)][_0x4468e7(0xab8)]());},VisuMZ[_0x164fcd(0xb36)]['Scene_Battle_onActorCancel']=Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xc8a)],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xc8a)]=function(){const _0x234426=_0x164fcd;if(this[_0x234426(0x33e)]()){if(_0x234426(0x37e)===_0x234426(0x37e))this[_0x234426(0x8c5)][_0x234426(0xc23)](),this[_0x234426(0x91a)][_0x234426(0xad3)](),this[_0x234426(0xc78)]['activate']();else{const _0x23e7ff=this[_0x234426(0x4b2)]();if(['xp']['includes'](_0x23e7ff)&&!_0x26fa32[_0x234426(0x709)]()){this[_0x234426(0x972)](0x0,0x0,0x0,0x0);return;}_0xc94089[_0x234426(0x2bf)][_0x234426(0xad8)]['call'](this);}}else VisuMZ['BattleCore']['Scene_Battle_onActorCancel'][_0x234426(0xa10)](this);this['cancelTargetSelectionVisibility']();},VisuMZ[_0x164fcd(0xb36)]['Scene_Battle_onEnemyOk']=Scene_Battle['prototype'][_0x164fcd(0x147)],Scene_Battle[_0x164fcd(0x2bf)]['onEnemyOk']=function(){const _0x2b6484=_0x164fcd,_0x177142=BattleManager[_0x2b6484(0x784)]();_0x177142[_0x2b6484(0x11f)](this[_0x2b6484(0x95b)][_0x2b6484(0x302)]()),this[_0x2b6484(0x95b)][_0x2b6484(0x413)](),VisuMZ['BattleCore'][_0x2b6484(0xca6)][_0x2b6484(0xa10)](this),this['okTargetSelectionVisibility']();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x488)]=Scene_Battle[_0x164fcd(0x2bf)]['onEnemyCancel'],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xbbf)]=function(){const _0xe05ad7=_0x164fcd;if(this[_0xe05ad7(0x33e)]())this[_0xe05ad7(0x8c5)]['show'](),this[_0xe05ad7(0x95b)][_0xe05ad7(0xad3)](),this[_0xe05ad7(0xc78)][_0xe05ad7(0xa49)]();else{if(_0xe05ad7(0x5fe)==='yOsUW'){if(!_0x6240c4[_0xe05ad7(0xb36)]['TpbActiveChangeEnabled'])return![];const _0x1b315a=_0x5c9ae2[_0xe05ad7(0x279)]()[_0xe05ad7(0x69f)](_0xe21219=>_0xe21219[_0xe05ad7(0x57c)]()&&_0xe21219[_0xe05ad7(0x189)]());return _0x1b315a[_0xe05ad7(0xd04)]>0x0&&_0x1926c1[_0xe05ad7(0x6ae)]()!==_0x1b315a[_0x1b315a[_0xe05ad7(0xd04)]-0x1];}else VisuMZ[_0xe05ad7(0xb36)]['Scene_Battle_onEnemyCancel']['call'](this);}this['cancelTargetSelectionVisibility'](),this[_0xe05ad7(0x95b)]['closeBattleActorWindow']();},Scene_Battle[_0x164fcd(0x2bf)]['okTargetSelectionVisibility']=function(){const _0xa059e3=_0x164fcd,_0x39fd35=this['battleLayoutStyle']();if(_0x39fd35==='border'||this[_0xa059e3(0x9d8)]()){this[_0xa059e3(0x2f7)][_0xa059e3(0xad5)]();this[_0xa059e3(0x2f7)][_0xa059e3(0x533)]&&this[_0xa059e3(0x2f7)][_0xa059e3(0xc23)]();this[_0xa059e3(0x219)][_0xa059e3(0xad5)]();if(this[_0xa059e3(0x219)][_0xa059e3(0x533)]){if(_0xa059e3(0x871)!==_0xa059e3(0xca3))this[_0xa059e3(0x219)][_0xa059e3(0xc23)]();else return _0x275d90['setLastPluginCommandInterpreter'](this),_0x29bba4[_0xa059e3(0xb36)]['Game_Interpreter_PluginCommand'][_0xa059e3(0xa10)](this,_0x5882a5);}}},Scene_Battle['prototype']['cancelTargetSelectionVisibility']=function(){const _0x53a7a6=_0x164fcd,_0x3356b2=this['battleLayoutStyle']();['xp',_0x53a7a6(0x404),_0x53a7a6(0x7e6)][_0x53a7a6(0x893)](_0x3356b2)&&this[_0x53a7a6(0xc78)][_0x53a7a6(0xad5)](),this[_0x53a7a6(0xcc8)]();},Scene_Battle[_0x164fcd(0x2bf)]['statusWindowRectDefaultStyle']=function(){const _0x285471=_0x164fcd,_0x47655c=VisuMZ[_0x285471(0xb36)][_0x285471(0x1de)][_0x285471(0x9a3)],_0x1fc559=Window_BattleStatus[_0x285471(0x2bf)][_0x285471(0xccc)](),_0x515958=Graphics['boxWidth']-(_0x47655c[_0x285471(0x2c8)]||0xc0),_0x40e18c=this[_0x285471(0x5c9)]()+_0x1fc559,_0x47ddf4=this[_0x285471(0x594)]()?0x0:Graphics[_0x285471(0x273)]-_0x515958,_0x46b5a9=Graphics['boxHeight']-_0x40e18c+_0x1fc559;return new Rectangle(_0x47ddf4,_0x46b5a9,_0x515958,_0x40e18c);},Scene_Battle['prototype'][_0x164fcd(0x6e6)]=function(){const _0x3abd22=_0x164fcd,_0x224553=Window_BattleStatus['prototype'][_0x3abd22(0xccc)](),_0x5b80ca=Graphics[_0x3abd22(0x273)],_0x4eb78e=this['windowAreaHeight']()+_0x224553,_0x24eb53=0x0,_0x5615da=Graphics[_0x3abd22(0xa5c)]-_0x4eb78e+_0x224553;return new Rectangle(_0x24eb53,_0x5615da,_0x5b80ca,_0x4eb78e);},Scene_Battle[_0x164fcd(0x2bf)]['partyCommandWindowRectXPStyle']=function(){const _0x73d9b9=_0x164fcd,_0x1faa79=Graphics[_0x73d9b9(0x273)]/0x2,_0x249c30=this['calcWindowHeight'](VisuMZ['BattleCore'][_0x73d9b9(0x1de)][_0x73d9b9(0x9a3)][_0x73d9b9(0x82f)],!![]),_0x30fbde=Math['round']((Graphics['boxWidth']-_0x1faa79)/0x2),_0xa0ef3b=Graphics[_0x73d9b9(0xa5c)]-_0x249c30-this[_0x73d9b9(0x6e6)]()[_0x73d9b9(0x5e0)];return new Rectangle(_0x30fbde,_0xa0ef3b,_0x1faa79,_0x249c30);},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x2f9)]=function(){const _0x4ed262=_0x164fcd,_0x39059e=Graphics[_0x4ed262(0xab5)],_0xddfb51=Math[_0x4ed262(0xa13)]((Graphics[_0x4ed262(0x273)]-_0x39059e)/0x2),_0x2b9a31=this[_0x4ed262(0x87d)](),_0x30b65a=(Graphics[_0x4ed262(0x5e0)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0xddfb51,_0x30b65a,_0x39059e,_0x2b9a31);},Scene_Battle['prototype'][_0x164fcd(0xaad)]=function(){const _0x59ec46=_0x164fcd,_0x4ab241=Graphics[_0x59ec46(0xab5)],_0x2422f6=Math[_0x59ec46(0xa13)]((Graphics['boxWidth']-_0x4ab241)/0x2),_0x15365e=this[_0x59ec46(0x883)](0x4,!![]),_0x23d64f=Graphics[_0x59ec46(0xa5c)]-_0x15365e+(Graphics['height']-Graphics[_0x59ec46(0xa5c)])/0x2;return new Rectangle(_0x2422f6,_0x23d64f,_0x4ab241,_0x15365e);},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x92d)]=function(){const _0x126300=_0x164fcd,_0xd99c1f=Math['floor'](Graphics[_0x126300(0xab5)]/0x3),_0x525bc2=this['isRightInputMode']()?(Graphics[_0x126300(0xab5)]+Graphics[_0x126300(0x273)])/0x2-_0xd99c1f:(Graphics[_0x126300(0xab5)]-Graphics['boxWidth'])/-0x2,_0x2e4dc3=this[_0x126300(0x2f9)](),_0x5aaaa5=_0x2e4dc3['y']+_0x2e4dc3[_0x126300(0x5e0)],_0x11ac5c=this[_0x126300(0xaad)](),_0x2f3a5c=_0x11ac5c['y']-_0x5aaaa5;return new Rectangle(_0x525bc2,_0x5aaaa5,_0xd99c1f,_0x2f3a5c);},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x856)]=function(){const _0x48547c=_0x164fcd,_0x20f9ec=Math[_0x48547c(0x405)](Graphics['width']/0x3),_0x43f0dd=Math[_0x48547c(0xa13)]((Graphics[_0x48547c(0x273)]-_0x20f9ec)/0x2),_0x485033=this['partyCommandWindowRectBorderStyle'](),_0x3ed37e=_0x485033['y'],_0x32092b=_0x485033['height'];return new Rectangle(_0x43f0dd,_0x3ed37e,_0x20f9ec,_0x32092b);},Scene_Battle['prototype'][_0x164fcd(0x175)]=function(){const _0x595561=_0x164fcd;this[_0x595561(0x3ae)]['y']=this[_0x595561(0x5ad)]['y']+this[_0x595561(0x5ad)]['height'],this[_0x595561(0x594)]()?this['battleLayoutStyle']()==='border'?this[_0x595561(0x3ae)]['x']=0x8:this[_0x595561(0x3ae)]['x']=-this[_0x595561(0x3ae)]['width']-0x4:_0x595561(0x4f8)===_0x595561(0x14f)?_0x32f297=_0x27b8cb[_0x595561(0x9e3)](_0x1307ce):this[_0x595561(0x3ae)]['x']=Graphics[_0x595561(0xab5)]-(Graphics['width']-Graphics['boxWidth'])/0x2-this['_cancelButton'][_0x595561(0xab5)]-0x4;},VisuMZ['BattleCore'][_0x164fcd(0x4ea)]=Scene_Battle['prototype'][_0x164fcd(0xb6a)],Scene_Battle[_0x164fcd(0x2bf)]['skillWindowRect']=function(){const _0x38888b=_0x164fcd;if(this[_0x38888b(0x4b2)]()===_0x38888b(0x7e6))return _0x38888b(0x408)===_0x38888b(0x408)?this[_0x38888b(0x856)]():_0x5d2cf9[_0x38888b(0x851)][_0x38888b(0xa10)](this);else{if(this['isSkillItemWindowsMiddle']())return this['skillItemWindowRectMiddle']();else{if(_0x38888b(0xc00)===_0x38888b(0x9c1))this[_0x38888b(0x868)][_0x38888b(0x6de)](_0x4bc32e);else return VisuMZ[_0x38888b(0xb36)][_0x38888b(0x4ea)][_0x38888b(0xa10)](this);}}},VisuMZ[_0x164fcd(0xb36)]['Scene_Battle_itemWindowRect']=Scene_Battle[_0x164fcd(0x2bf)]['itemWindowRect'],Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x68f)]=function(){const _0x7e2cd6=_0x164fcd;if(this['battleLayoutStyle']()===_0x7e2cd6(0x7e6))return this[_0x7e2cd6(0x856)]();else return this[_0x7e2cd6(0x9d8)]()?this[_0x7e2cd6(0xbe0)]():VisuMZ[_0x7e2cd6(0xb36)][_0x7e2cd6(0xa02)][_0x7e2cd6(0xa10)](this);},Scene_Battle[_0x164fcd(0x2bf)]['isSkillItemWindowsMiddle']=function(){const _0x1a1328=_0x164fcd;return VisuMZ['BattleCore'][_0x1a1328(0x1de)][_0x1a1328(0x9a3)][_0x1a1328(0x31b)];},Scene_Battle['prototype'][_0x164fcd(0xbe0)]=function(){const _0x1ee035=_0x164fcd,_0x124a17=Sprite_Button[_0x1ee035(0x2bf)][_0x1ee035(0xc0e)]()*0x2+0x4;let _0x542e8c=Graphics[_0x1ee035(0x273)]-_0x124a17;Imported[_0x1ee035(0x818)]&&SceneManager[_0x1ee035(0x9b1)]()&&(_0x542e8c+=_0x124a17);const _0x24cd04=this[_0x1ee035(0x665)](),_0x4afac7=Graphics[_0x1ee035(0xa5c)]-_0x24cd04-this[_0x1ee035(0xb7c)]()[_0x1ee035(0x5e0)]+Window_BattleStatus[_0x1ee035(0x2bf)][_0x1ee035(0xccc)](),_0xa741fa=0x0;return new Rectangle(_0xa741fa,_0x24cd04,_0x542e8c,_0x4afac7);},Scene_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x509)]=function(){const _0x143f58=_0x164fcd;if(!VisuMZ[_0x143f58(0xb36)][_0x143f58(0x1de)][_0x143f58(0x337)][_0x143f58(0x601)])return;this['_enemyNameContainer']=new Sprite(),this[_0x143f58(0xc77)]['x']=this['_windowLayer']['x'],this['_enemyNameContainer']['y']=this[_0x143f58(0x919)]['y'];const _0x485986=this[_0x143f58(0x87f)][_0x143f58(0x990)](this[_0x143f58(0x919)]);this[_0x143f58(0x305)](this[_0x143f58(0xc77)],_0x485986);for(let _0x297663=0x0;_0x297663<0x8;_0x297663++){const _0x25ed17=new Window_EnemyName(_0x297663);this['_enemyNameContainer'][_0x143f58(0x23a)](_0x25ed17);}},Sprite_Battler[_0x164fcd(0x3aa)]=VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x1de)][_0x164fcd(0x9ef)][_0x164fcd(0x351)],VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x1c6)]=Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x1be)],Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x1be)]=function(){const _0xaf28ef=_0x164fcd;VisuMZ[_0xaf28ef(0xb36)][_0xaf28ef(0x1c6)]['call'](this),this[_0xaf28ef(0x748)]();if(this[_0xaf28ef(0xc12)]===Sprite_Enemy)this['createShadowSprite']();this[_0xaf28ef(0x84a)]();},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x748)]=function(){const _0x336cc0=_0x164fcd;this[_0x336cc0(0x6ab)]=0x0,this[_0x336cc0(0x3db)]=0x0,this[_0x336cc0(0x5fd)]=0x0,this[_0x336cc0(0xa87)]=0x0,this[_0x336cc0(0x4f1)]=0x0,this[_0x336cc0(0x575)]=0x0,this['_floatEasing']=_0x336cc0(0x28c),this['_jumpHeight']=0x0,this[_0x336cc0(0x5b6)]=0x0,this[_0x336cc0(0xbd5)]=0x0,this[_0x336cc0(0x2aa)]=0x0,this[_0x336cc0(0xb7e)]=0xff,this['_opacityDuration']=0x0,this[_0x336cc0(0x698)]=0x0,this[_0x336cc0(0x714)]='Linear',this[_0x336cc0(0x38f)]=0x0,this[_0x336cc0(0xb99)]=0x0,this[_0x336cc0(0x73c)]=0x0,this[_0x336cc0(0x77f)]=0x0,this[_0x336cc0(0xa04)]=_0x336cc0(0x28c),this[_0x336cc0(0x481)]=!![],this[_0x336cc0(0x390)]=0x0,this[_0x336cc0(0x876)]=0x0,this['_targetSkewX']=0x0,this[_0x336cc0(0x420)]=0x0,this['_skewDuration']=0x0,this['_skewWholeDuration']=0x0,this[_0x336cc0(0x9f3)]=_0x336cc0(0x28c),this[_0x336cc0(0x8aa)]=0x1,this[_0x336cc0(0x31d)]=0x1,this[_0x336cc0(0xa31)]=0x1,this[_0x336cc0(0xd02)]=0x1,this['_growDuration']=0x0,this['_growWholeDuration']=0x0,this[_0x336cc0(0x9b6)]=_0x336cc0(0x28c),this[_0x336cc0(0x561)]=0x1,this[_0x336cc0(0xb25)]=0x0,this['_targetHomeY']=0x0,this[_0x336cc0(0xbac)]=0x0,this[_0x336cc0(0x9f9)]=0x0,this[_0x336cc0(0xb19)]=_0x336cc0(0x28c),this[_0x336cc0(0x66c)]=0x0,this[_0x336cc0(0x791)]=0x0;},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xcd4)]=function(){const _0x2b3e08=_0x164fcd;this['_shadowSprite']=new Sprite(),this[_0x2b3e08(0xc04)]['bitmap']=ImageManager[_0x2b3e08(0xa99)](_0x2b3e08(0x7f2)),this[_0x2b3e08(0xc04)][_0x2b3e08(0xcf5)][_0x2b3e08(0x225)]=VisuMZ[_0x2b3e08(0xb36)][_0x2b3e08(0x1de)][_0x2b3e08(0x9ef)][_0x2b3e08(0x6d2)],this[_0x2b3e08(0xc04)][_0x2b3e08(0x70f)]['x']=0.5,this[_0x2b3e08(0xc04)][_0x2b3e08(0x70f)]['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0x2b3e08(0xc04)][_0x2b3e08(0xc39)]=![],this[_0x2b3e08(0x23a)](this[_0x2b3e08(0xc04)]);},Sprite_Battler[_0x164fcd(0x2bf)]['createDistortionSprite']=function(){const _0xc52112=_0x164fcd;this['_distortionSprite']=new Sprite(),this[_0xc52112(0x4e7)][_0xc52112(0x70f)]['x']=0.5,this[_0xc52112(0x4e7)]['anchor']['y']=0.5,this[_0xc52112(0x23a)](this['_distortionSprite']);},Sprite_Battler[_0x164fcd(0x2bf)]['attachSpritesToDistortionSprite']=function(){const _0x234904=_0x164fcd;if(!this[_0x234904(0x4e7)])return;if(this['_shadowSprite']){const _0x3e3402=this[_0x234904(0x890)](this['_distortionSprite']);this[_0x234904(0x305)](this[_0x234904(0xc04)],_0x3e3402),this['updateShadowVisibility']();}this[_0x234904(0x79c)]&&this[_0x234904(0x4e7)][_0x234904(0x23a)](this['_svBattlerSprite']);this['_weaponSprite']&&this['_distortionSprite'][_0x234904(0x23a)](this['_weaponSprite']);this[_0x234904(0x35c)]&&this[_0x234904(0x4e7)]['addChild'](this[_0x234904(0x35c)]);this['_injectAnimationSprite']&&(_0x234904(0x5ea)!==_0x234904(0x79e)?this[_0x234904(0x4e7)][_0x234904(0x23a)](this[_0x234904(0xa11)]):this[_0x234904(0x5db)]());if(this[_0x234904(0x9e6)]){if(_0x234904(0x889)===_0x234904(0x889))this[_0x234904(0x4e7)][_0x234904(0x23a)](this['_dragonbonesSpriteContainer']);else{const _0x3e8a8a=this['_commandNameWindow'];_0x3e8a8a[_0x234904(0x382)][_0x234904(0x7bf)]();const _0x21aba2=this[_0x234904(0xae7)](this[_0x234904(0xca1)]());if(_0x21aba2==='icon'&&this[_0x234904(0x768)]()>0x0){const _0x2e89a2=this['itemLineRect'](this[_0x234904(0xca1)]());let _0x3be8e6=this[_0x234904(0x42c)](this['index']());_0x3be8e6=_0x3be8e6[_0x234904(0x6db)](/\\I\[(\d+)\]/gi,''),_0x3e8a8a[_0x234904(0x599)](),this['commandNameWindowDrawBackground'](_0x3be8e6,_0x2e89a2),this[_0x234904(0x43b)](_0x3be8e6,_0x2e89a2),this[_0x234904(0x232)](_0x3be8e6,_0x2e89a2);}}}},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x699)]=function(){const _0x5849ee=_0x164fcd;if(!this[_0x5849ee(0xc04)])return;if(this[_0x5849ee(0x7f9)]&&this[_0x5849ee(0x7f9)]['svBattlerShadowVisible']()){const _0x3937b2=this[_0x5849ee(0xc04)]['bitmap'];this[_0x5849ee(0xc04)]['setFrame'](0x0,0x0,_0x3937b2['width'],_0x3937b2[_0x5849ee(0x5e0)]);}else this[_0x5849ee(0xc04)][_0x5849ee(0x522)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x664)]=function(){const _0x3372af=_0x164fcd;if(SceneManager[_0x3372af(0x53f)]()){if(_0x3372af(0xb91)!=='yDEdh')this['_distortionSprite']['addChild'](this[_0x3372af(0x65f)]);else return SceneManager['_scene'][_0x3372af(0xbd6)]['_damageContainer'];}else return'Zrhha'==='Zrhha'?this['parent']:_0xc700f1['_target'];},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x7ab)]=function(_0x40009e,_0xa53c14){const _0x561935=_0x164fcd;if(!this[_0x561935(0x7f9)][_0x561935(0x97f)]())return;if(BattleManager[_0x561935(0x361)]())return;const _0xeda13d=VisuMZ[_0x561935(0xb36)][_0x561935(0x1de)][_0x561935(0x1ce)],_0x8ce8f9=new Sprite_Damage();_0x8ce8f9['_duration']=_0xeda13d[_0x561935(0xc17)],this[_0x561935(0x9c0)](_0x8ce8f9),_0x8ce8f9[_0x561935(0x7ab)](_0x40009e,_0xa53c14),this[_0x561935(0x8a3)](_0x8ce8f9);},Sprite_Battler['prototype'][_0x164fcd(0xabd)]=function(_0x6976b2,_0xffe598,_0x207c59){const _0x12ff1e=_0x164fcd;if(!this[_0x12ff1e(0x7f9)][_0x12ff1e(0x97f)]())return;if(BattleManager[_0x12ff1e(0x361)]())return;const _0x1113d3=VisuMZ[_0x12ff1e(0xb36)]['Settings'][_0x12ff1e(0x1ce)],_0xf12b90=new Sprite_Damage();_0xf12b90['_duration']=_0x1113d3[_0x12ff1e(0xc17)],this[_0x12ff1e(0x9c0)](_0xf12b90),_0xf12b90['setupIconTextPopup'](_0x6976b2,_0xffe598,_0x207c59),this[_0x12ff1e(0x8a3)](_0xf12b90);},Sprite_Battler['prototype'][_0x164fcd(0x7a1)]=function(){const _0x44242e=_0x164fcd;if(!this[_0x44242e(0x7f9)][_0x44242e(0x551)]())return;while(this[_0x44242e(0x7f9)]['isDamagePopupRequested']()){if(_0x44242e(0x33c)!=='oqNKq'){if(this[_0x44242e(0x7f9)]['isSpriteVisible']()){if(_0x44242e(0x4c1)===_0x44242e(0x4c1))this[_0x44242e(0x1db)]();else return this[_0x44242e(0x1d2)]()&&this[_0x44242e(0x1d2)]()[_0x44242e(0x5e9)]()&&!this[_0x44242e(0x1d2)]()['isMagicSkill']();}}else _0x57005c[_0x44242e(0x78c)](_0x4072fd);}this[_0x44242e(0x7f9)]['clearDamagePopup'](),this[_0x44242e(0x7f9)][_0x44242e(0x2e7)]();},Sprite_Battler[_0x164fcd(0x2bf)]['createDamageSprite']=function(){const _0x1d62d1=_0x164fcd;if(BattleManager[_0x1d62d1(0x361)]())return;const _0x3b1785=VisuMZ[_0x1d62d1(0xb36)]['Settings'][_0x1d62d1(0x1ce)],_0xe44425=new Sprite_Damage();_0xe44425[_0x1d62d1(0x4d3)]=_0x3b1785[_0x1d62d1(0xc17)],this[_0x1d62d1(0x9c0)](_0xe44425),_0xe44425[_0x1d62d1(0xd03)](this['_battler']),_0xe44425[_0x1d62d1(0x31c)](this[_0x1d62d1(0x7f9)]),this[_0x1d62d1(0x8a3)](_0xe44425);},Sprite_Battler[_0x164fcd(0x2bf)]['addDamageSprite']=function(_0x558a36){const _0x1bf2bd=_0x164fcd;this['_damages'][_0x1bf2bd(0x56b)](_0x558a36);if(this['isShownOnBattlePortrait']()){const _0x143bd5=SceneManager[_0x1bf2bd(0x4c8)][_0x1bf2bd(0x8c5)];if(_0x143bd5)_0x143bd5[_0x1bf2bd(0x8a3)](_0x558a36,this[_0x1bf2bd(0x7f9)]);}else{if(_0x1bf2bd(0xafc)===_0x1bf2bd(0x498))_0x13df11[_0x1bf2bd(0xb36)]['Game_Action_clear'][_0x1bf2bd(0xa10)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x1bf2bd(0x410)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x1bf2bd(0x3dc)]=_0x1bf2bd(0x18e),this[_0x1bf2bd(0x138)]();else{this[_0x1bf2bd(0x664)]()[_0x1bf2bd(0x23a)](_0x558a36);if(SceneManager[_0x1bf2bd(0xbba)]())_0x558a36['scale']['x']=-0x1;}}},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x1ef)]=function(){const _0x3bd799=_0x164fcd;return!$gameSystem[_0x3bd799(0x709)]()&&this[_0x3bd799(0x7f9)]&&this[_0x3bd799(0x7f9)][_0x3bd799(0x31f)]();return!$gameSystem['isSideView']()&&this[_0x3bd799(0x7f9)]&&this[_0x3bd799(0x7f9)][_0x3bd799(0x31f)]()&&Window_BattleStatus[_0x3bd799(0x2bf)]['battleLayoutStyle']()===_0x3bd799(0x404);},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x9c0)]=function(_0x1e7a15){const _0x28253e=_0x164fcd;this[_0x28253e(0x20d)](_0x1e7a15,!![]);const _0x422e4a=VisuMZ[_0x28253e(0xb36)][_0x28253e(0x1de)][_0x28253e(0x1ce)],_0x569493=SceneManager[_0x28253e(0xbba)]()?-0x1:0x1;if(_0x422e4a[_0x28253e(0xa3a)])for(const _0x35e24a of this[_0x28253e(0x932)]){if(_0x28253e(0x6a4)!==_0x28253e(0x6a4)){_0x11fcc7[_0x28253e(0xb36)]['Scene_ItemBase_applyItem']['call'](this);if(this[_0x28253e(0x5e9)]()[_0x28253e(0x9ea)][_0x28253e(0xa5d)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this['item']()['note'][_0x28253e(0xa5d)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x28c007[_0x28253e(0x274)]=[]),_0x3930d3['checkAutoCustomActionSequenceNotetagEffect'](this['item']())&&(_0x4caccc[_0x28253e(0x274)]=[]);}else _0x35e24a['x']+=_0x422e4a[_0x28253e(0x83e)]*_0x569493,_0x35e24a['y']+=_0x422e4a[_0x28253e(0x166)];}else{const _0x56e8bd=this[_0x28253e(0x932)][this['_damages'][_0x28253e(0xd04)]-0x1];_0x56e8bd&&(_0x1e7a15['x']=_0x56e8bd['x']+_0x422e4a[_0x28253e(0x83e)]*_0x569493,_0x1e7a15['y']=_0x56e8bd['y']+_0x422e4a['PopupShiftY']);}},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x20d)]=function(_0x63923e,_0x48dc30){const _0x1774f3=_0x164fcd,_0x5d4c8b=SceneManager['isBattleFlipped']()?-0x1:0x1;let _0x21eb34=this[_0x1774f3(0x6ab)];_0x21eb34+=this[_0x1774f3(0x15d)]();let _0x2c4954=this[_0x1774f3(0x3db)];const _0x8ec48e=this[_0x1774f3(0x4e7)]['scale']['y'];_0x2c4954+=this[_0x1774f3(0xb63)]();const _0x2f12f9=SceneManager['_scene'][_0x1774f3(0x8c5)];if(_0x2f12f9&&this[_0x1774f3(0xc44)]===_0x2f12f9){if(_0x1774f3(0xcb0)!==_0x1774f3(0xcb0)){if(_0x56bd0e['isPreviousSceneBattleTransitionable']())return;if(!_0xd33b18)return;if(!_0x38f675[_0x1774f3(0xc64)]())return;_0x2409f0[_0x1774f3(0xb36)][_0x1774f3(0x8d7)][_0x1774f3(0xa10)](this);}else{_0x21eb34+=_0x2f12f9['x']-this[_0x1774f3(0x31e)]();const _0x1b3038=_0x2f12f9['lineHeight']()*0x3/0x4;_0x2c4954=_0x2f12f9['y']+_0x1b3038,_0x2c4954=Math[_0x1774f3(0x584)](_0x2c4954,_0x2f12f9['y']+this['y']-this[_0x1774f3(0x5e0)]+_0x1b3038);}}_0x63923e['x']=Math[_0x1774f3(0xa13)](_0x21eb34+this[_0x1774f3(0x31e)]()*_0x5d4c8b),_0x63923e['y']=Math[_0x1774f3(0xa13)](_0x2c4954+this['damageOffsetY']());},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x668)]=Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x31e)],Sprite_Battler['prototype'][_0x164fcd(0x31e)]=function(){const _0x565997=_0x164fcd;let _0xc160bd=VisuMZ[_0x565997(0xb36)]['Sprite_Battler_damageOffsetX'][_0x565997(0xa10)](this),_0x3c055d=VisuMZ[_0x565997(0xb36)][_0x565997(0x1de)][_0x565997(0x1ce)][_0x565997(0xcbd)]||0x0;return Math[_0x565997(0xa13)](_0xc160bd+_0x3c055d);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x819)]=Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x2cb)],Sprite_Battler['prototype'][_0x164fcd(0x2cb)]=function(){const _0x38c4a2=_0x164fcd;let _0x5e705f=VisuMZ[_0x38c4a2(0xb36)][_0x38c4a2(0x819)][_0x38c4a2(0xa10)](this);switch(VisuMZ[_0x38c4a2(0xb36)][_0x38c4a2(0x1de)][_0x38c4a2(0x1ce)][_0x38c4a2(0xa6c)]){case _0x38c4a2(0xcad):_0x5e705f-=this[_0x38c4a2(0x5e0)]*this[_0x38c4a2(0xb56)]['y'];break;case _0x38c4a2(0x37f):_0x5e705f-=this[_0x38c4a2(0x5e0)]*this[_0x38c4a2(0xb56)]['y']*0.5;break;}let _0x84325d=VisuMZ[_0x38c4a2(0xb36)][_0x38c4a2(0x1de)][_0x38c4a2(0x1ce)][_0x38c4a2(0xa5e)]||0x0;return Math['round'](_0x5e705f+_0x84325d);},Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x31e)]=function(){const _0x2a89f7=_0x164fcd;return Sprite_Battler['prototype']['damageOffsetX'][_0x2a89f7(0xa10)](this);},Sprite_Actor['prototype'][_0x164fcd(0x2cb)]=function(){const _0x32ec61=_0x164fcd;return Sprite_Battler['prototype'][_0x32ec61(0x2cb)]['call'](this);},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x63a)]=function(_0x2a9ae6){const _0x2cda02=_0x164fcd;this[_0x2cda02(0x1ef)]()?SceneManager[_0x2cda02(0x4c8)][_0x2cda02(0x8c5)][_0x2cda02(0x705)](_0x2a9ae6):(this[_0x2cda02(0x664)]()[_0x2cda02(0x6de)](_0x2a9ae6),this[_0x2cda02(0x932)][_0x2cda02(0x494)](_0x2a9ae6),_0x2a9ae6[_0x2cda02(0xba6)]());},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x167)]=Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xb87)],Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xb87)]=function(_0xa11883,_0x18ee5a){const _0x507ee1=_0x164fcd,_0x586f0f=VisuMZ['BattleCore'][_0x507ee1(0x1de)];if(this['constructor']===Sprite_Actor){if(_0x507ee1(0x3e9)===_0x507ee1(0xb26)){const _0x1a2a62=_0x927547['BattleCore']['Settings'][_0x507ee1(0x514)],_0x32bf5a=_0x1a2a62[_0x507ee1(0xb8f)];_0x32bf5a&&_0x5a626a[_0x507ee1(0xb36)][_0x507ee1(0x7dd)](_0x32bf5a)&&(this[_0x507ee1(0xa45)]=!![],_0xd6693c[_0x507ee1(0x933)](_0x1a2a62[_0x507ee1(0xb8f)]),_0x18dd8a[_0x507ee1(0xaf4)](),_0x29ec53['_interpreter'][_0x507ee1(0xc10)]=!![]),_0x1a2a62[_0x507ee1(0x1e3)]>0x0&&(this[_0x507ee1(0xc7c)]=!![]);}else _0xa11883+=_0x586f0f[_0x507ee1(0x9ef)]['OffsetX']||0x0,_0x18ee5a+=_0x586f0f[_0x507ee1(0x9ef)][_0x507ee1(0x5f1)]||0x0;}else this[_0x507ee1(0xc12)]===Sprite_Enemy&&(_0xa11883+=_0x586f0f[_0x507ee1(0x337)][_0x507ee1(0x9d3)]||0x0,_0x18ee5a+=_0x586f0f[_0x507ee1(0x337)]['OffsetY']||0x0);this['_battler']&&(_0xa11883=this[_0x507ee1(0x7f9)][_0x507ee1(0xb04)]??_0xa11883,_0x18ee5a=this[_0x507ee1(0x7f9)]['_forcedHomeY']??_0x18ee5a),VisuMZ['BattleCore'][_0x507ee1(0x167)][_0x507ee1(0xa10)](this,_0xa11883,_0x18ee5a),this[_0x507ee1(0xb25)]=this['_homeX'],this[_0x507ee1(0x41c)]=this[_0x507ee1(0xa83)],this['_homeDuration']=0x0,this[_0x507ee1(0x9f9)]=0x0,this[_0x507ee1(0xb19)]=_0x507ee1(0x28c);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x310)]=Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x71d)],Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x71d)]=function(){const _0x5465eb=_0x164fcd;VisuMZ['BattleCore'][_0x5465eb(0x310)][_0x5465eb(0xa10)](this),!this['_battler']&&this[_0x5465eb(0xd07)]&&(this[_0x5465eb(0xd07)][_0x5465eb(0xc39)]=![]);},VisuMZ[_0x164fcd(0xb36)]['Sprite_Battler_updateMain']=Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xc38)],Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xc38)]=function(){const _0x1e45e3=_0x164fcd;this['updateScale'](),this[_0x1e45e3(0xb33)](),this['updateSpin'](),this[_0x1e45e3(0x622)](),VisuMZ[_0x1e45e3(0xb36)][_0x1e45e3(0xbf7)][_0x1e45e3(0xa10)](this),this[_0x1e45e3(0x7f6)](),this['updateShakeFlinch']();if(this[_0x1e45e3(0xc12)]===Sprite_Enemy)this[_0x1e45e3(0xa9f)]();},VisuMZ['BattleCore']['Sprite_Battler_updatePosition']=Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x682)],Sprite_Battler[_0x164fcd(0x2bf)]['updatePosition']=function(){const _0x49777b=_0x164fcd;this[_0x49777b(0x21b)](),VisuMZ[_0x49777b(0xb36)]['Sprite_Battler_updatePosition'][_0x49777b(0xa10)](this),this[_0x49777b(0xcf1)](),this[_0x49777b(0xaca)]();},Sprite_Battler[_0x164fcd(0x2bf)]['updateSelectionEffect']=function(){const _0x108012=_0x164fcd,_0x2587e0=this[_0x108012(0x950)]();if(this[_0x108012(0x7f9)][_0x108012(0x956)]()){this['_selectionEffectCount']++;if(Graphics[_0x108012(0x738)]%0x1e<0xf){if(_0x108012(0x485)!==_0x108012(0x485))return this[_0x108012(0x5e0)]*this['mainSpriteScaleY']();else _0x2587e0[_0x108012(0xacc)]([0xff,0xff,0xff,0x40]);}else _0x2587e0[_0x108012(0xacc)]([0x0,0x0,0x0,0x0]);}else this['_selectionEffectCount']>0x0&&(_0x108012(0x46b)!==_0x108012(0x774)?(this['_selectionEffectCount']=0x0,_0x2587e0[_0x108012(0xacc)]([0x0,0x0,0x0,0x0])):(this[_0x108012(0x8c5)]['show'](),this[_0x108012(0x91a)][_0x108012(0xad3)](),this[_0x108012(0xc78)][_0x108012(0xa49)]()));},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x467)]=function(_0x1904ff,_0x1547c1){const _0x57c153=_0x164fcd,_0x2b4db4=_0x1904ff-this['_homeX'],_0x370ae2=_0x1547c1-this[_0x57c153(0xa83)];this['_homeX']=_0x1904ff,this[_0x57c153(0xa83)]=_0x1547c1,this[_0x57c153(0x20a)]-=_0x2b4db4,this[_0x57c153(0x4db)]-=_0x370ae2,this[_0x57c153(0x2b1)]-=_0x2b4db4,this[_0x57c153(0x4f0)]-=_0x370ae2,this['updatePosition']();},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xa66)]=function(_0x32d702,_0x2953d9,_0x4aa621,_0x47670e){const _0x10aba9=_0x164fcd;if(this[_0x10aba9(0xb25)]!==_0x32d702||this[_0x10aba9(0x41c)]!==_0x2953d9){if(_0x10aba9(0x688)===_0x10aba9(0xcae)){if(!_0x25fb3c)return![];if(!_0x4779c3[_0x10aba9(0xbbe)])return![];if(!_0x56d483['targetObjects'][0x0])return![];if(_0x28deff[_0x10aba9(0xab1)][0x0][_0x10aba9(0x31f)]&&!_0x56c376[_0x10aba9(0xab1)][0x0][_0x10aba9(0x31f)]())return![];if(_0x5bac16[_0x10aba9(0x709)]())return![];if(!this[_0x10aba9(0x92e)]())return![];if(_0x6e484a[_0x10aba9(0xc12)]===_0x1a4098){if(_0x847725[_0x10aba9(0xbbe)][_0x10aba9(0x1d0)]!==0x0)return![];}else{if(_0x11472e['constructor']===_0x5c2e20){if(_0x3564d0['_animation'][_0x10aba9(0x12f)]===0x3)return![];}}return!![];const _0xfb4761=_0xdbaf9d['prototype']['battleLayoutStyle']();return['xp',_0x10aba9(0x404)]['contains'](_0xfb4761);}else this['_targetHomeX']=_0x32d702,this[_0x10aba9(0x41c)]=_0x2953d9,this[_0x10aba9(0xbac)]=_0x4aa621,this[_0x10aba9(0x9f9)]=_0x4aa621,this[_0x10aba9(0xb19)]=_0x47670e,_0x4aa621<=0x0&&this['onHomeMoveEnd']();}},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x21b)]=function(){const _0x4fe848=_0x164fcd;if(this[_0x4fe848(0xbac)]<=0x0)return;const _0x5acd0a=this[_0x4fe848(0xbac)],_0x52ae8a=this[_0x4fe848(0x9f9)],_0x582777=this[_0x4fe848(0xb19)];Imported[_0x4fe848(0x818)]?_0x4fe848(0xc8c)==='nOcKi'?this[_0x4fe848(0x534)]=!![]:(this[_0x4fe848(0xa35)]=this[_0x4fe848(0x367)](this[_0x4fe848(0xa35)],this[_0x4fe848(0xb25)],_0x5acd0a,_0x52ae8a,_0x582777),this['_homeY']=this[_0x4fe848(0x367)](this[_0x4fe848(0xa83)],this['_targetHomeY'],_0x5acd0a,_0x52ae8a,_0x582777)):_0x4fe848(0xb7f)===_0x4fe848(0x515)?(_0x1ec244[_0x4fe848(0xb36)][_0x4fe848(0x45d)][_0x4fe848(0xa10)](this,_0x5c273f),this[_0x4fe848(0x62e)]()):(this[_0x4fe848(0xa35)]=(this[_0x4fe848(0xa35)]*(_0x5acd0a-0x1)+this['_targetHomeX'])/_0x5acd0a,this['_homeY']=(this['_homeY']*(_0x5acd0a-0x1)+this['_targetHomeY'])/_0x5acd0a);this['_homeDuration']--;if(this[_0x4fe848(0xbac)]<=0x0)this['onHomeMoveEnd']();},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xb72)]=function(){const _0x38100a=_0x164fcd;this[_0x38100a(0xa35)]=this[_0x38100a(0xb25)],this[_0x38100a(0xa83)]=this[_0x38100a(0x41c)];},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xcf1)]=function(){const _0x2ec7b8=_0x164fcd;this['_baseX']=this['x'],this['_baseY']=this['y'],this[_0x2ec7b8(0x8b0)](),this[_0x2ec7b8(0x5a5)](),this['x']+=this[_0x2ec7b8(0x15d)](),this['y']+=this[_0x2ec7b8(0xb63)](),this['y']+=this['extraPositionScaledY'](),this['x']=Math[_0x2ec7b8(0x923)](this['x']),this['y']=Math[_0x2ec7b8(0x923)](this['y']);},Sprite_Battler[_0x164fcd(0x2bf)]['extraPositionX']=function(){let _0x264deb=0x0;return _0x264deb;},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xb63)]=function(){const _0x5f091d=_0x164fcd;let _0x1698e6=0x0;return this[_0x5f091d(0x7f9)]&&!this[_0x5f091d(0x7f9)]['isBattlerGrounded']()&&(_0x1698e6-=this[_0x5f091d(0x5fd)],_0x1698e6-=this[_0x5f091d(0x85a)]),_0x1698e6;},Sprite_Battler[_0x164fcd(0x2bf)]['extraPositionScaledY']=function(){const _0x63b711=_0x164fcd;let _0x3b52a6=0x0;if(this[_0x63b711(0x4e7)]&&this['constructor']!==Sprite_SvEnemy){const _0x44763e=this[_0x63b711(0x4e7)]['scale']['y'];_0x3b52a6-=(_0x44763e-0x1)*this[_0x63b711(0x5e0)];}return _0x3b52a6;},Sprite_Battler[_0x164fcd(0x2bf)]['updateFlip']=function(){const _0x4a911b=_0x164fcd,_0x3b1dd4=this[_0x4a911b(0x7f9)]&&this['_battler']['isBattlerFlipped']();this[_0x4a911b(0x561)]=(_0x3b1dd4?-0x1:0x1)*Math[_0x4a911b(0xa69)](this[_0x4a911b(0xb56)]['x']);},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x414)]=function(_0x2d1438,_0x5db718,_0xe521cc){const _0x2d7286=_0x164fcd;if(!this[_0x2d7286(0xc64)]())return;if(this[_0x2d7286(0xa87)]===_0x2d1438)return;this[_0x2d7286(0xa87)]=_0x2d1438,this[_0x2d7286(0x4f1)]=_0x5db718,this['_floatWholeDuration']=_0x5db718,this[_0x2d7286(0x1d9)]=_0xe521cc||_0x2d7286(0x28c);if(_0x5db718<=0x0)this[_0x2d7286(0x5fd)]=_0x2d1438;},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x8b0)]=function(){const _0x216232=_0x164fcd;if(this['_floatDuration']<=0x0)return;const _0x14519a=this[_0x216232(0x4f1)],_0x13e6f2=this['_floatWholeDuration'],_0x244776=this[_0x216232(0x1d9)];Imported['VisuMZ_0_CoreEngine']?this[_0x216232(0x5fd)]=this[_0x216232(0x367)](this[_0x216232(0x5fd)],this[_0x216232(0xa87)],_0x14519a,_0x13e6f2,_0x244776):this[_0x216232(0x5fd)]=(this[_0x216232(0x5fd)]*(_0x14519a-0x1)+this[_0x216232(0xa87)])/_0x14519a;this[_0x216232(0x4f1)]--;if(this[_0x216232(0x4f1)]<=0x0)this[_0x216232(0xb59)]();},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xb59)]=function(){const _0x373c62=_0x164fcd;this[_0x373c62(0x5fd)]=this[_0x373c62(0xa87)];},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x122)]=function(){const _0x25baaa=_0x164fcd;return this[_0x25baaa(0x4f1)]>0x0;},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xb8a)]=function(_0x313bae,_0x342ae5){const _0x535a88=_0x164fcd;if(!this[_0x535a88(0xc64)]())return;if(_0x342ae5<=0x0)return;this[_0x535a88(0x5b6)]=_0x313bae,this[_0x535a88(0xbd5)]=_0x342ae5,this[_0x535a88(0x2aa)]=_0x342ae5;},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x5a5)]=function(){const _0x2f2ca5=_0x164fcd;if(this[_0x2f2ca5(0xbd5)]<=0x0)return;const _0x1bfcf9=this['_jumpWholeDuration']-this['_jumpDuration'],_0x34621a=this['_jumpWholeDuration']/0x2,_0x2cb834=this[_0x2f2ca5(0x5b6)],_0x56297b=-_0x2cb834/Math['pow'](_0x34621a,0x2);this['_jumpHeight']=_0x56297b*Math['pow'](_0x1bfcf9-_0x34621a,0x2)+_0x2cb834,this['_jumpDuration']--;if(this[_0x2f2ca5(0xbd5)]<=0x0)return this[_0x2f2ca5(0x376)]();},Sprite_Battler[_0x164fcd(0x2bf)]['onJumpEnd']=function(){const _0x1f7b6f=_0x164fcd;this[_0x1f7b6f(0x85a)]=0x0;},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x54c)]=function(){const _0x57e620=_0x164fcd;return this[_0x57e620(0xbd5)]>0x0;},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x30a)]=function(_0x59e9fe,_0x440afa,_0x1b02c4){const _0x541455=_0x164fcd;if(this[_0x541455(0xb7e)]===_0x59e9fe)return;this[_0x541455(0xb7e)]=_0x59e9fe,this[_0x541455(0x11e)]=_0x440afa,this[_0x541455(0x698)]=_0x440afa,this[_0x541455(0x714)]=_0x1b02c4||_0x541455(0x28c);if(_0x440afa<=0x0)this[_0x541455(0x4c4)]=_0x59e9fe;},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xaca)]=function(){const _0x2d1880=_0x164fcd;if(this[_0x2d1880(0xc12)]['name']===_0x2d1880(0x490))return;if(this['_opacityDuration']<=0x0)return;const _0x34d732=this[_0x2d1880(0x11e)],_0x2ee17e=this['_opacityWholeDuration'],_0x3c61aa=this['_opacityEasing'];Imported[_0x2d1880(0x818)]?this[_0x2d1880(0x4c4)]=this['applyEasing'](this['opacity'],this[_0x2d1880(0xb7e)],_0x34d732,_0x2ee17e,_0x3c61aa):this[_0x2d1880(0x4c4)]=(this[_0x2d1880(0x4c4)]*(_0x34d732-0x1)+this[_0x2d1880(0xb7e)])/_0x34d732;this[_0x2d1880(0x11e)]--;if(this[_0x2d1880(0x11e)]<=0x0)this[_0x2d1880(0x281)]();},Sprite_Battler['prototype'][_0x164fcd(0x281)]=function(){const _0x1e41b0=_0x164fcd;this['opacity']=this[_0x1e41b0(0xb7e)];},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x5de)]=function(){const _0x444a1b=_0x164fcd;return this[_0x444a1b(0x11e)]>0x0;},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xa9f)]=function(){const _0x41ab85=_0x164fcd;this[_0x41ab85(0xc04)][_0x41ab85(0xc39)]=this[_0x41ab85(0x7f9)][_0x41ab85(0x86a)](),this[_0x41ab85(0x999)]();},Sprite_Battler[_0x164fcd(0x2bf)]['updateShadowPosition']=function(){const _0x3bc685=_0x164fcd;if(!this[_0x3bc685(0xc04)])return;this['_shadowSprite']['y']=this[_0x3bc685(0x3db)]-this['y']-0x2;},Sprite_Battler['prototype'][_0x164fcd(0x133)]=function(){const _0x5c25ab=_0x164fcd;if(!this[_0x5c25ab(0x7f9)])return;this[_0x5c25ab(0x863)]=this[_0x5c25ab(0x7f9)]['battlerShadowScaleX'](),this[_0x5c25ab(0x423)]=this[_0x5c25ab(0x7f9)]['battlerShadowScaleY']();},Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0xaac)]=function(){const _0x3ed453=_0x164fcd,_0x1f951b=this['isActor']()?this['actor']():this['enemy']();if(_0x1f951b){const _0x293c29=_0x1f951b[_0x3ed453(0x9ea)];if(_0x293c29[_0x3ed453(0xa5d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return'Iyyue'===_0x3ed453(0x6cf)?Number(RegExp['$1'])*0.01:!![];else{if(_0x293c29[_0x3ed453(0xa5d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x164fcd(0x2bf)][_0x164fcd(0x53b)]=function(){const _0x59cf4e=_0x164fcd,_0x28122f=this[_0x59cf4e(0x31f)]()?this[_0x59cf4e(0x6ae)]():this['enemy']();if(_0x28122f){const _0x5049c1=_0x28122f[_0x59cf4e(0x9ea)];if(_0x5049c1[_0x59cf4e(0xa5d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x5049c1[_0x59cf4e(0xa5d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x5b7)]=function(){const _0x30c294=_0x164fcd;if(this[_0x30c294(0xc12)]===Sprite_SvEnemy)return;this[_0x30c294(0x3c9)](),this[_0x30c294(0x98c)]();},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x98c)]=function(){const _0x253c7e=_0x164fcd,_0x7cb797=this[_0x253c7e(0x4e7)];_0x7cb797&&(_0x7cb797['scale']['x']=this[_0x253c7e(0x90b)](),_0x7cb797[_0x253c7e(0xb56)]['y']=this[_0x253c7e(0x751)]());},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x90b)]=function(){const _0x4e8ab4=_0x164fcd;let _0x1a52eb=0x1;return _0x1a52eb*=this[_0x4e8ab4(0x561)],_0x1a52eb*=this[_0x4e8ab4(0x8aa)],_0x1a52eb;},Sprite_Battler[_0x164fcd(0x2bf)]['mainSpriteScaleY']=function(){return 0x1*this['_growY'];},Sprite_Battler['prototype'][_0x164fcd(0x9db)]=function(){const _0x3a72ff=_0x164fcd;return this[_0x3a72ff(0xab5)]*this['mainSpriteScaleX']();},Sprite_Battler['prototype'][_0x164fcd(0xb35)]=function(){return this['height']*this['mainSpriteScaleY']();},Sprite_Battler['prototype']['startGrow']=function(_0x3940c3,_0x54a749,_0x256434,_0x556744){const _0x1964ba=_0x164fcd;if(!this[_0x1964ba(0xc64)]())return;if(!this[_0x1964ba(0x4e7)])return;if(this[_0x1964ba(0xa31)]===_0x3940c3&&this['_targetGrowY']===_0x54a749)return;this[_0x1964ba(0xa31)]=_0x3940c3,this[_0x1964ba(0xd02)]=_0x54a749,this[_0x1964ba(0x701)]=_0x256434,this['_growWholeDuration']=_0x256434,this[_0x1964ba(0x9b6)]=_0x556744||_0x1964ba(0x28c),_0x256434<=0x0&&(this[_0x1964ba(0x8aa)]=this[_0x1964ba(0xa31)],this[_0x1964ba(0x31d)]=this[_0x1964ba(0xd02)]);},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x3c9)]=function(){const _0x49cdf3=_0x164fcd;if(this[_0x49cdf3(0x701)]<=0x0)return;if(!this[_0x49cdf3(0x4e7)])return;const _0x57e69d=this['_growDuration'],_0x3501d5=this[_0x49cdf3(0xa3c)],_0x3cc6e4=this[_0x49cdf3(0x9b6)];if(Imported[_0x49cdf3(0x818)]){if(_0x49cdf3(0x69e)!==_0x49cdf3(0x69e))return _0x49cdf3(0x821);else this[_0x49cdf3(0x8aa)]=this[_0x49cdf3(0x367)](this[_0x49cdf3(0x8aa)],this['_targetGrowX'],_0x57e69d,_0x3501d5,_0x3cc6e4),this['_growY']=this['applyEasing'](this[_0x49cdf3(0x31d)],this[_0x49cdf3(0xd02)],_0x57e69d,_0x3501d5,_0x3cc6e4);}else this[_0x49cdf3(0x8aa)]=(this['_growX']*(_0x57e69d-0x1)+this[_0x49cdf3(0xa31)])/_0x57e69d,this[_0x49cdf3(0x31d)]=(this['_growY']*(_0x57e69d-0x1)+this[_0x49cdf3(0xd02)])/_0x57e69d;this['_growDuration']--;if(this['_growDuration']<=0x0)this[_0x49cdf3(0x32c)]();},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x32c)]=function(){const _0x4e36c2=_0x164fcd;this[_0x4e36c2(0x8aa)]=this[_0x4e36c2(0xa31)],this[_0x4e36c2(0x31d)]=this[_0x4e36c2(0xd02)];},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xb0f)]=function(){const _0x587fc5=_0x164fcd;return this[_0x587fc5(0x701)]>0x0;},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x8fa)]=function(_0x4e9a39,_0x210c32,_0x2d0d19,_0x1727b7){const _0x5c2993=_0x164fcd;if(!this['canMove']())return;if(!this['_distortionSprite'])return;if(this['_targetSkewX']===_0x4e9a39&&this[_0x5c2993(0x420)]===_0x210c32)return;this[_0x5c2993(0x3ca)]=_0x4e9a39,this[_0x5c2993(0x420)]=_0x210c32,this['_skewDuration']=_0x2d0d19,this[_0x5c2993(0xa0b)]=_0x2d0d19,this['_skewEasing']=_0x1727b7||'Linear',_0x2d0d19<=0x0&&(this[_0x5c2993(0x4e7)][_0x5c2993(0x18a)]['x']=this[_0x5c2993(0x3ca)],this[_0x5c2993(0x4e7)]['skew']['y']=this[_0x5c2993(0x420)]);},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xb33)]=function(){const _0x50ab8b=_0x164fcd;if(this[_0x50ab8b(0x8a4)]<=0x0)return;if(!this[_0x50ab8b(0x4e7)])return;const _0x108c6c=this[_0x50ab8b(0x8a4)],_0x1d406a=this['_skewWholeDuration'],_0x2a4732=this[_0x50ab8b(0x9f3)],_0x49e45b=this[_0x50ab8b(0x4e7)];Imported[_0x50ab8b(0x818)]?(_0x49e45b[_0x50ab8b(0x18a)]['x']=this['applyEasing'](_0x49e45b[_0x50ab8b(0x18a)]['x'],this[_0x50ab8b(0x3ca)],_0x108c6c,_0x1d406a,_0x2a4732),_0x49e45b[_0x50ab8b(0x18a)]['y']=this[_0x50ab8b(0x367)](_0x49e45b['skew']['y'],this[_0x50ab8b(0x420)],_0x108c6c,_0x1d406a,_0x2a4732)):(_0x49e45b[_0x50ab8b(0x18a)]['x']=(_0x49e45b[_0x50ab8b(0x18a)]['x']*(_0x108c6c-0x1)+this[_0x50ab8b(0x3ca)])/_0x108c6c,_0x49e45b[_0x50ab8b(0x18a)]['y']=(_0x49e45b[_0x50ab8b(0x18a)]['y']*(_0x108c6c-0x1)+this[_0x50ab8b(0x420)])/_0x108c6c);this[_0x50ab8b(0x8a4)]--;if(this[_0x50ab8b(0x8a4)]<=0x0)this[_0x50ab8b(0xaf7)]();},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xaf7)]=function(){const _0x3c3ea4=_0x164fcd;this[_0x3c3ea4(0x4e7)][_0x3c3ea4(0x18a)]['x']=this[_0x3c3ea4(0x3ca)],this[_0x3c3ea4(0x4e7)][_0x3c3ea4(0x18a)]['y']=this[_0x3c3ea4(0x420)];},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x812)]=function(){const _0x2a0e46=_0x164fcd;return this[_0x2a0e46(0x8a4)]>0x0;},Sprite_Battler[_0x164fcd(0x2bf)]['startSpin']=function(_0x122708,_0x2c77b3,_0x11defd,_0x479ba2){const _0x5c63eb=_0x164fcd;if(!this[_0x5c63eb(0xc64)]())return;if(!this[_0x5c63eb(0x4e7)])return;if(this[_0x5c63eb(0xb99)]===_0x122708)return;this[_0x5c63eb(0xb99)]=_0x122708,this['_angleDuration']=_0x2c77b3,this[_0x5c63eb(0x77f)]=_0x2c77b3,this[_0x5c63eb(0xa04)]=_0x11defd||_0x5c63eb(0x28c),this[_0x5c63eb(0x481)]=_0x479ba2,this[_0x5c63eb(0x481)]===undefined&&(this[_0x5c63eb(0x481)]=!![]),_0x2c77b3<=0x0&&(this[_0x5c63eb(0x38f)]=_0x122708,this[_0x5c63eb(0x481)]&&(_0x5c63eb(0x878)!==_0x5c63eb(0x197)?(this[_0x5c63eb(0xb99)]=0x0,this['_currentAngle']=0x0):_0x1a6a86[_0x5c63eb(0x4d8)]=![]));},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x267)]=function(){const _0x1edb6f=_0x164fcd;this[_0x1edb6f(0x20e)](),this[_0x1edb6f(0x200)]();},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x20e)]=function(){const _0x1fd22b=_0x164fcd;if(this[_0x1fd22b(0x73c)]<=0x0)return;const _0x4e16bd=this[_0x1fd22b(0x73c)],_0x52b65e=this['_angleWholeDuration'],_0x13392c=this[_0x1fd22b(0xa04)];Imported['VisuMZ_0_CoreEngine']?this[_0x1fd22b(0x38f)]=this[_0x1fd22b(0x367)](this[_0x1fd22b(0x38f)],this[_0x1fd22b(0xb99)],_0x4e16bd,_0x52b65e,_0x13392c):this[_0x1fd22b(0x38f)]=(this[_0x1fd22b(0x38f)]*(_0x4e16bd-0x1)+this['_targetAngle'])/_0x4e16bd;this[_0x1fd22b(0x73c)]--;if(this['_angleDuration']<=0x0)this[_0x1fd22b(0x913)]();},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x913)]=function(){const _0x1e91f8=_0x164fcd;this[_0x1e91f8(0x38f)]=this['_targetAngle'],this['_angleRevertOnFinish']&&('Vhvoh'!==_0x1e91f8(0x7c0)?(this['_targetAngle']=0x0,this[_0x1e91f8(0x38f)]=0x0):this['_attackAnimationId']=_0x4f1ce0(_0x130f25['$1']));},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x852)]=function(){return this['_angleDuration']>0x0;},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x200)]=function(){const _0x553d3d=_0x164fcd;if(!this['_distortionSprite'])return;const _0x3af851=this['_currentAngle'],_0x4aec63=this['scale']['x'],_0x47b063=this[_0x553d3d(0x7f9)][_0x553d3d(0x31f)]()?-0x1:0x1;this[_0x553d3d(0x4e7)][_0x553d3d(0xbd3)]=_0x3af851*_0x4aec63*_0x47b063;const _0x56c73c=this['_distortionSprite'][_0x553d3d(0xb56)]['y'];this[_0x553d3d(0x4e7)]['y']=this[_0x553d3d(0x5e0)]*-0.5*(0x2-_0x56c73c),this[_0x553d3d(0x4e7)]['y']=Math[_0x553d3d(0x405)](this[_0x553d3d(0x4e7)]['y']);const _0x315524=[this[_0x553d3d(0x35c)],this['_svBattlerSprite'],this['_dragonbonesSpriteContainer']];for(const _0x586c05 of _0x315524){if(!_0x586c05)continue;_0x586c05['y']=this[_0x553d3d(0x5e0)]*0.5;}this[_0x553d3d(0xc04)]&&(this[_0x553d3d(0x863)]=this[_0x553d3d(0x863)]??0x1,this[_0x553d3d(0x423)]=this[_0x553d3d(0x423)]??0x1,this[_0x553d3d(0xc04)][_0x553d3d(0xb56)]['x']=this[_0x553d3d(0x4e7)]['scale']['x']*this[_0x553d3d(0x863)],this['_shadowSprite']['scale']['y']=this[_0x553d3d(0x4e7)]['scale']['y']*this[_0x553d3d(0x423)]);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xb68)]=Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x776)],Sprite_Actor[_0x164fcd(0x2bf)]['createStateSprite']=function(){const _0x211e91=_0x164fcd;VisuMZ[_0x211e91(0xb36)][_0x211e91(0xb68)][_0x211e91(0xa10)](this),VisuMZ[_0x211e91(0xb36)][_0x211e91(0x1de)][_0x211e91(0x83d)][_0x211e91(0x78d)]&&this[_0x211e91(0x762)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x4b7)]=Sprite_Enemy['prototype'][_0x164fcd(0xa37)],Sprite_Enemy[_0x164fcd(0x2bf)]['createStateIconSprite']=function(){const _0x4b18f2=_0x164fcd;if(VisuMZ['BattleCore']['Settings'][_0x4b18f2(0x83d)][_0x4b18f2(0x24c)]){if(_0x4b18f2(0x793)!==_0x4b18f2(0x793))return _0x2f7c91[_0x4b18f2(0xb36)][_0x4b18f2(0x1de)][_0x4b18f2(0x1ce)]['OverallFormulaJS'][_0x4b18f2(0xa10)](this,_0x2a3277,_0x1a9e5b);else this[_0x4b18f2(0x762)]();}VisuMZ[_0x4b18f2(0xb36)][_0x4b18f2(0x4b7)][_0x4b18f2(0xa10)](this);},Sprite_Battler['prototype'][_0x164fcd(0x762)]=function(){const _0x596f75=_0x164fcd;if(!ConfigManager[_0x596f75(0xa2c)])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x348d27=VisuMZ[_0x596f75(0xb36)]['Settings']['HpGauge'],_0x165525=new Sprite_HpGauge();_0x165525['anchor']['x']=_0x348d27['AnchorX'],_0x165525[_0x596f75(0x70f)]['y']=_0x348d27[_0x596f75(0x4e1)],_0x165525[_0x596f75(0xb56)]['x']=_0x165525['scale']['y']=_0x348d27[_0x596f75(0xceb)],this['_hpGaugeSprite']=_0x165525,this[_0x596f75(0x23a)](this[_0x596f75(0xd07)]),Spriteset_Battle[_0x596f75(0x362)]&&BattleManager[_0x596f75(0xa59)](this[_0x596f75(0xd07)]);},VisuMZ[_0x164fcd(0xb36)]['Sprite_Battler_setBattler']=Sprite_Battler['prototype'][_0x164fcd(0x7b0)],Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x7b0)]=function(_0x4491a1){const _0x203b00=_0x164fcd,_0x4168d6=this[_0x203b00(0x7f9)];VisuMZ[_0x203b00(0xb36)][_0x203b00(0x91f)][_0x203b00(0xa10)](this,_0x4491a1),this[_0x203b00(0x9b3)](_0x4491a1);if(_0x4168d6!==_0x4491a1)this[_0x203b00(0x133)]();},Sprite_Battler['prototype']['setupHpGaugeSprite']=function(_0x31a732){const _0x2eae41=_0x164fcd;if(!_0x31a732)return;if(!this[_0x2eae41(0xd07)])return;if(_0x31a732[_0x2eae41(0x31f)]()){}else{if(_0x31a732[_0x2eae41(0xa79)]()){if(this[_0x2eae41(0xc12)]===Sprite_SvEnemy&&!_0x31a732[_0x2eae41(0x86a)]())return;}}this[_0x2eae41(0xd07)]['setup'](_0x31a732,'hp');},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xc86)]=function(){const _0x308f67=_0x164fcd;return this['_battler']&&this['_battler'][_0x308f67(0xc86)]();},Sprite_Battler['prototype'][_0x164fcd(0xc6b)]=function(){const _0x10ebfe=_0x164fcd,_0x5261b7=this[_0x10ebfe(0x35c)][_0x10ebfe(0xcf5)];if(!_0x5261b7)return;const _0xb9c09d=_0x5261b7[_0x10ebfe(0xab5)];let _0x51f071=_0x5261b7[_0x10ebfe(0x5e0)];if(this[_0x10ebfe(0x7f9)][_0x10ebfe(0x468)]()){if('mDPNE'===_0x10ebfe(0x4fd)){if(this[_0x10ebfe(0xc33)])_0x51f071=Math['max'](0x0,this[_0x10ebfe(0xc33)]['height']-0x4);}else this[_0x10ebfe(0x326)][_0x10ebfe(0xc39)]=![];}this[_0x10ebfe(0x35c)][_0x10ebfe(0x522)](0x0,0x0,_0xb9c09d,_0x51f071),this[_0x10ebfe(0x522)](0x0,0x0,_0xb9c09d,_0x51f071);},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x7f6)]=function(){const _0x3b1e1e=_0x164fcd;if(!this[_0x3b1e1e(0x7f9)])return;if(!this[_0x3b1e1e(0xd07)])return;const _0x3e4db5=VisuMZ[_0x3b1e1e(0xb36)]['Settings'][_0x3b1e1e(0x83d)],_0x302d48=this[_0x3b1e1e(0xd07)];_0x302d48['visible']=this['isVisualHpGaugeDisplayed']();const _0x3ccd29=_0x3e4db5[_0x3b1e1e(0x9d3)],_0x2dc9cb=_0x3e4db5['OffsetY'];_0x302d48['x']=_0x3ccd29,_0x302d48['x']+=this[_0x3b1e1e(0x7f9)][_0x3b1e1e(0x1e8)](),_0x302d48['y']=-this[_0x3b1e1e(0x5e0)]+_0x2dc9cb,_0x302d48['y']+=this['_battler']['battleUIOffsetY'](),Spriteset_Battle[_0x3b1e1e(0x362)]&&SceneManager[_0x3b1e1e(0x4c8)][_0x3b1e1e(0xbd6)]&&(_0x302d48['x']+=this['x'],_0x302d48['y']+=this['y']);},Sprite_Battler['prototype'][_0x164fcd(0x33a)]=function(){const _0x49d4cf=_0x164fcd;if(!this[_0x49d4cf(0x7f9)])return![];if(this[_0x49d4cf(0x7f9)][_0x49d4cf(0x31f)]())return!![];if(this[_0x49d4cf(0x7f9)][_0x49d4cf(0xc49)]())return![];if(this['opacity']<=0x0)return![];const _0x478699=this[_0x49d4cf(0x7f9)][_0x49d4cf(0x302)]()[_0x49d4cf(0x9ea)];if(_0x478699[_0x49d4cf(0xa5d)](/<SHOW HP GAUGE>/i))return!![];if(_0x478699[_0x49d4cf(0xa5d)](/<HIDE HP GAUGE>/i))return![];const _0x513b85=VisuMZ['BattleCore']['Settings']['HpGauge'];if(_0x513b85[_0x49d4cf(0x32d)]){if(_0x513b85[_0x49d4cf(0x76d)]&&BattleManager[_0x49d4cf(0x9b4)]())return!![];if(this['_battler'][_0x49d4cf(0x813)])return![];return this['_battler'][_0x49d4cf(0x7f4)]();}return!![];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xa7a)]=Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xcc9)],Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xcc9)]=function(){const _0x2f7899=_0x164fcd;if(!this[_0x2f7899(0x7f9)])return![];if(this[_0x2f7899(0xbac)]>0x0)return!![];return VisuMZ[_0x2f7899(0xb36)]['Sprite_Battler_isMoving'][_0x2f7899(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xae4)]=Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xa52)],Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0xa52)]=function(_0x4c97c4,_0xfd0c02,_0x5de1d5){const _0x5bb294=_0x164fcd;this[_0x5bb294(0xc64)]()&&(_0x5bb294(0x834)===_0x5bb294(0x834)?VisuMZ[_0x5bb294(0xb36)][_0x5bb294(0xae4)][_0x5bb294(0xa10)](this,_0x4c97c4,_0xfd0c02,_0x5de1d5):this[_0x5bb294(0x987)]=![]);},Sprite_Battler['prototype'][_0x164fcd(0xc64)]=function(){const _0x153400=_0x164fcd;if(this[_0x153400(0x7f9)]&&this[_0x153400(0x7f9)][_0x153400(0x468)]())return![];if(this[_0x153400(0x7f9)]&&!this[_0x153400(0x7f9)][_0x153400(0x74c)]())return![];return $gameSystem['isSideView']();},Sprite_Battler[_0x164fcd(0x2bf)]['stepForward']=function(){},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x4e2)]=function(){const _0x56b5c9=_0x164fcd;this[_0x56b5c9(0xa52)](0x0,0x0,0xc);},Sprite_Battler[_0x164fcd(0x2bf)]['retreat']=function(){},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x16e)]=function(){const _0x572c84=_0x164fcd,_0x2de6f1=VisuMZ[_0x572c84(0xb36)][_0x572c84(0x1de)][_0x572c84(0x9ef)],_0x4cf842=this[_0x572c84(0x7f9)]&&this[_0x572c84(0x7f9)][_0x572c84(0x31f)]()?0x1:-0x1,_0x9aa283=this['_baseX']-this[_0x572c84(0xa35)]+_0x4cf842*_0x2de6f1[_0x572c84(0x355)],_0x2dd8b7=this['_baseY']-this['_homeY']+_0x4cf842*_0x2de6f1[_0x572c84(0xc05)],_0x4bc571=_0x2de6f1[_0x572c84(0xbed)];this[_0x572c84(0xa52)](_0x9aa283,_0x2dd8b7,_0x4bc571);},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x1fd)]=function(_0x3b7d6b,_0x278cc6){const _0x49bd14=_0x164fcd,_0x52184b=VisuMZ[_0x49bd14(0xb36)]['Settings'][_0x49bd14(0x9ef)];this[_0x49bd14(0x66c)]=Math[_0x49bd14(0x405)]((_0x52184b['ShakeFlinchDuration']??0x18)*_0x278cc6),this[_0x49bd14(0x791)]=Math[_0x49bd14(0xc92)](this[_0x49bd14(0x791)],_0x3b7d6b);},Sprite_Battler[_0x164fcd(0x2bf)][_0x164fcd(0x2fd)]=function(){const _0x21156a=_0x164fcd,_0xbbf546=VisuMZ[_0x21156a(0xb36)][_0x21156a(0x1de)]['Actor'];if(!(_0xbbf546['ShakeFlinch']??![]))return;if(this[_0x21156a(0x66c)]>0x0){if(_0x21156a(0x3c7)==='mxJxy'){const _0x4c6353=_0x36726f[_0x21156a(0x2bf)][_0x21156a(0xccc)](),_0x6353dd=_0x39cfc4[_0x21156a(0x273)],_0x36dfc7=this[_0x21156a(0x5c9)]()+_0x4c6353,_0x19773d=0x0,_0x554967=_0x2a13e4[_0x21156a(0xa5c)]-_0x36dfc7+_0x4c6353;return new _0x1d718d(_0x19773d,_0x554967,_0x6353dd,_0x36dfc7);}else{const _0x2f267b=this[_0x21156a(0x66c)];this[_0x21156a(0x791)]=this[_0x21156a(0x791)]*(_0x2f267b-0x1)/_0x2f267b,this[_0x21156a(0x66c)]--,this[_0x21156a(0x66c)]<=0x0&&(this[_0x21156a(0x791)]=0x0);}}this['_shakeFlinchPower']>0x0?(this[_0x21156a(0x35c)]['x']=Math[_0x21156a(0x5b9)](this[_0x21156a(0x791)])*(Math['random']()<0.5?-0x1:0x1),this[_0x21156a(0x3db)]!==this['y']&&(_0x21156a(0x289)===_0x21156a(0x289)?(this[_0x21156a(0x35c)]['y']=this[_0x21156a(0x5e0)]*0.5,this[_0x21156a(0x35c)]['y']+=Math['randomInt'](this['_shakeFlinchPower'])*(Math[_0x21156a(0xb48)]()<0.5?-0x1:0x1)):this[_0x21156a(0x23a)](this[_0x21156a(0x804)]))):(this[_0x21156a(0x35c)]['x']=0x0,this['_mainSprite']['y']=this[_0x21156a(0x5e0)]*0.5);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x8ce)]=Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x1be)],Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x1be)]=function(){const _0x2d9d13=_0x164fcd;VisuMZ[_0x2d9d13(0xb36)][_0x2d9d13(0x8ce)][_0x2d9d13(0xa10)](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x950)]=function(){const _0x2de81d=_0x164fcd;return this['_distortionSprite']||this[_0x2de81d(0x35c)]||this;},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x8d7)]=Sprite_Actor['prototype']['moveToStartPosition'],Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x646)]=function(){},Sprite_Actor[_0x164fcd(0x2bf)]['moveToStartPositionBattleCore']=function(_0x168ec9){const _0x58c3c2=_0x164fcd;if(SceneManager[_0x58c3c2(0x5aa)]())return;if(!_0x168ec9)return;if(!_0x168ec9[_0x58c3c2(0xc64)]())return;VisuMZ[_0x58c3c2(0xb36)][_0x58c3c2(0x8d7)][_0x58c3c2(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xcac)]=Sprite_Actor['prototype'][_0x164fcd(0x5c6)],Sprite_Actor['prototype'][_0x164fcd(0x5c6)]=function(_0x744a92){const _0xac4cc9=_0x164fcd;VisuMZ[_0xac4cc9(0xb36)]['Settings'][_0xac4cc9(0x9ef)]['HomePosJS']?_0xac4cc9(0x5c1)===_0xac4cc9(0xbb5)?(_0xc15913[_0xac4cc9(0xb36)][_0xac4cc9(0xcdb)][_0xac4cc9(0xa10)](this),this[_0xac4cc9(0x5ab)]()):VisuMZ['BattleCore'][_0xac4cc9(0x1de)][_0xac4cc9(0x9ef)][_0xac4cc9(0x93f)]['call'](this,_0x744a92):VisuMZ[_0xac4cc9(0xb36)][_0xac4cc9(0xcac)]['call'](this,_0x744a92);},VisuMZ['BattleCore']['Sprite_Actor_setBattler']=Sprite_Actor['prototype'][_0x164fcd(0x7b0)],Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x7b0)]=function(_0x53ceab){const _0xafab46=_0x164fcd;VisuMZ['BattleCore']['Sprite_Actor_setBattler']['call'](this,_0x53ceab),this[_0xafab46(0x2c5)](_0x53ceab);},Sprite_Actor['prototype'][_0x164fcd(0x2c5)]=function(_0x4c5ce4){const _0x5c18cf=_0x164fcd;if(!_0x4c5ce4)return;if(!this[_0x5c18cf(0x35c)])return;this[_0x5c18cf(0x35c)][_0x5c18cf(0x70f)]['x']=this[_0x5c18cf(0x41e)][_0x5c18cf(0x961)](),this['_mainSprite'][_0x5c18cf(0x70f)]['y']=this[_0x5c18cf(0x41e)][_0x5c18cf(0x16c)](),this[_0x5c18cf(0x699)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x934)]=Sprite_Actor['prototype'][_0x164fcd(0x71d)],Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x71d)]=function(){const _0x397a5e=_0x164fcd;VisuMZ[_0x397a5e(0xb36)]['Sprite_Actor_update'][_0x397a5e(0xa10)](this);if(this[_0x397a5e(0x41e)]){if('tBKnu'!==_0x397a5e(0x593)){const _0x4e4107=_0x37d0cb[_0x397a5e(0x784)](),_0x9b6cc3=this[_0x397a5e(0xc78)][_0x397a5e(0x96d)]();_0x4e4107[_0x397a5e(0x1bc)](_0x9b6cc3),_0x8131d5[_0x397a5e(0x6ae)]()[_0x397a5e(0x2fa)](_0x2bc804[_0x9b6cc3]),this[_0x397a5e(0x3e6)]();}else this[_0x397a5e(0x340)](),this[_0x397a5e(0x59c)]();}},VisuMZ[_0x164fcd(0xb36)]['Sprite_Actor_updateBitmap']=Sprite_Actor[_0x164fcd(0x2bf)]['updateBitmap'],Sprite_Actor['prototype'][_0x164fcd(0x238)]=function(){const _0x4a3f49=_0x164fcd;VisuMZ[_0x4a3f49(0xb36)][_0x4a3f49(0x14d)][_0x4a3f49(0xa10)](this);if(this[_0x4a3f49(0x35c)]&&this['_mainSprite'][_0x4a3f49(0xcf5)]&&this[_0x4a3f49(0x7f9)]){if(this[_0x4a3f49(0x35c)][_0x4a3f49(0xcf5)]['smooth']!==this['_battler']['battlerSmoothImage']()){if(_0x4a3f49(0x573)==='mFCtD')this[_0x4a3f49(0x35c)]['bitmap'][_0x4a3f49(0x225)]=this[_0x4a3f49(0x7f9)][_0x4a3f49(0xcdf)]();else{if(!this[_0x4a3f49(0x41e)])return;const _0x2544c7=this[_0x4a3f49(0x41e)][_0x4a3f49(0x44d)]();for(const _0x5e3dbe of _0x2544c7){this[_0x4a3f49(0xc28)](_0x5e3dbe[_0x4a3f49(0x7e1)]()[_0x4a3f49(0xab7)]());}}}}},VisuMZ[_0x164fcd(0xb36)]['Sprite_Actor_updateShadow']=Sprite_Actor['prototype'][_0x164fcd(0xa9f)],Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0xa9f)]=function(){const _0x59dde0=_0x164fcd;VisuMZ[_0x59dde0(0xb36)]['Sprite_Actor_updateShadow']['call'](this),this[_0x59dde0(0xc2f)]();},Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0xc2f)]=function(){const _0x6d6d49=_0x164fcd;if(!this['_mainSprite'])return;if(!this[_0x6d6d49(0xc04)])return;this['updateShadowVisibility'](),this[_0x6d6d49(0x999)]();},Sprite_Actor['prototype'][_0x164fcd(0x340)]=function(){const _0xcfd80f=_0x164fcd;this['_stateSprite']['scale']['x']=0x1/(this['scale']['x']||0.001),this[_0xcfd80f(0xc81)][_0xcfd80f(0xb56)]['y']=0x1/(this['scale']['y']||0.001);},Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x59c)]=function(){const _0x4079d3=_0x164fcd;if(!$gameSystem['isSideView']()&&this[_0x4079d3(0xc12)]===Sprite_Actor){const _0x228127=Scene_Battle[_0x4079d3(0x2bf)][_0x4079d3(0x4b2)]();[_0x4079d3(0x18e),_0x4079d3(0xa4e),_0x4079d3(0x404),_0x4079d3(0x7e6)]['includes'](_0x228127)&&(_0x4079d3(0x1d6)!==_0x4079d3(0x1d6)?this[_0x4079d3(0x26c)]['addChild'](this[_0x4079d3(0x868)]):this['opacity']=0x0);}},Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x25e)]=function(){const _0x30b80a=_0x164fcd,_0x44ef5d=this[_0x30b80a(0x41e)];if(_0x44ef5d){if(_0x30b80a(0x2b4)!==_0x30b80a(0x2b4)){const _0x1e24ff=_0x43323e(_0x1dbab1['$1'])[_0x30b80a(0x77e)](/[\r\n]+/)[_0x30b80a(0x494)](''),_0x4626ff=_0x3c4a38['processRandomizedData'](_0x1e24ff);_0x389391[_0x30b80a(0x29b)]=_0x250947['getWtypeIdWithName'](_0x4626ff);}else{const _0x10c87e=_0x44ef5d[_0x30b80a(0x5e4)]();if(_0x44ef5d[_0x30b80a(0xa42)]()||_0x44ef5d[_0x30b80a(0x951)]())this[_0x30b80a(0x493)](_0x30b80a(0x8cd));else{if(_0x10c87e===0x3)this[_0x30b80a(0x493)]('dead');else{if(_0x10c87e===0x2){if(_0x30b80a(0x149)!=='mpnqL'){this[_0x30b80a(0x2e7)]();if(_0xac1d80['VisuMZ_1_SkillsStatesCore']){const _0x216509=_0x2e062f[_0x30b80a(0x8fc)][_0x30b80a(0x1de)][_0x30b80a(0x452)];_0x216509&&_0x216509[_0x30b80a(0xcc4)]===![]&&this[_0x30b80a(0x607)](0x1);}else this[_0x30b80a(0x607)](0x1);this[_0x30b80a(0xba2)]();}else this[_0x30b80a(0x493)]('sleep');}else{if(this['forceEscapeSprite'])this[_0x30b80a(0x493)](_0x30b80a(0xaee));else{if(_0x44ef5d[_0x30b80a(0x7a8)]())this[_0x30b80a(0x493)]('wait');else{if(_0x44ef5d[_0x30b80a(0x6b4)]())this[_0x30b80a(0x493)](_0x30b80a(0x67d));else{if(_0x44ef5d[_0x30b80a(0xc99)]()||_0x44ef5d[_0x30b80a(0x542)]())this[_0x30b80a(0x493)](_0x30b80a(0x7a7));else{if(_0x10c87e===0x1)_0x30b80a(0xc5a)==='XsSQn'?(_0x381a57['BattleCore']['Sprite_Actor_createStateSprite'][_0x30b80a(0xa10)](this),_0x376bd5[_0x30b80a(0xb36)][_0x30b80a(0x1de)][_0x30b80a(0x83d)][_0x30b80a(0x78d)]&&this[_0x30b80a(0x762)]()):this[_0x30b80a(0x493)](_0x30b80a(0x84f));else{if(_0x44ef5d[_0x30b80a(0x547)]())this[_0x30b80a(0x493)](_0x30b80a(0xc3f));else{if(_0x44ef5d[_0x30b80a(0x18f)]())this[_0x30b80a(0x493)]('walk');else{if(_0x44ef5d[_0x30b80a(0x1d2)]()){if('ZfWXm'!=='ZfWXm')return _0x4dbd94[_0x30b80a(0x69f)](_0x1dcd3a=>_0x1dcd3a['isAlive']());else this[_0x30b80a(0x493)](_0x30b80a(0xa9d));}else _0x30b80a(0x864)!==_0x30b80a(0x864)?_0x225ec8[_0x30b80a(0xacc)]([0x0,0x0,0x0,0x0]):this[_0x30b80a(0x493)]('walk');}}}}}}}}}}}}},Sprite_Actor[_0x164fcd(0x2bf)]['retreat']=function(){const _0x26621e=_0x164fcd,_0x301f2b=0xa,_0x2c3f36=0x12c*_0x301f2b,_0x5a8cd9=0x1e*_0x301f2b;this[_0x26621e(0xa52)](_0x2c3f36,0x0,_0x5a8cd9);},Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x7d6)]=function(){const _0x4349c2=_0x164fcd;Sprite_Battler[_0x4349c2(0x2bf)]['onMoveEnd'][_0x4349c2(0xa10)](this);},Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0xbcd)]=function(){const _0x4baa31=_0x164fcd;return Sprite_Battler[_0x4baa31(0x3aa)];},Sprite_Weapon['prototype']['animationWait']=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Actor[_0x164fcd(0x2bf)]['setupMotion']=function(){},Sprite_Actor['prototype'][_0x164fcd(0x30f)]=function(){},Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0xaba)]=function(){const _0x13f7bb=_0x164fcd;if(this[_0x13f7bb(0x48d)]&&++this[_0x13f7bb(0x43d)]>=this['motionSpeed']()){if(_0x13f7bb(0xca0)==='RQTgb')this['push'](_0x13f7bb(0x233),this[_0x13f7bb(0xcef)](_0x36b7af));else{if(this[_0x13f7bb(0x48d)]['loop'])this[_0x13f7bb(0xb0b)]=(this[_0x13f7bb(0xb0b)]+0x1)%0x4;else this[_0x13f7bb(0xb0b)]<0x2?_0x13f7bb(0x513)===_0x13f7bb(0x513)?this[_0x13f7bb(0xb0b)]++:(_0x3d4f5f[_0x13f7bb(0xb36)][_0x13f7bb(0xa0e)][_0x13f7bb(0xa10)](this),this[_0x13f7bb(0x699)]()):this['refreshMotion']();this[_0x13f7bb(0x43d)]=0x0;}}},Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0xb05)]=function(_0x47cfad){const _0x5ef70d=_0x164fcd;if(_0x47cfad===_0x5ef70d(0x480))this[_0x5ef70d(0x749)]=!![];if(this[_0x5ef70d(0x7f9)]&&this['_battler'][_0x5ef70d(0x468)]()){this['_motion']=Sprite_Actor[_0x5ef70d(0x3fa)][_0x5ef70d(0x822)];return;}const _0x13a682=Sprite_Actor[_0x5ef70d(0x3fa)][_0x47cfad];this[_0x5ef70d(0x48d)]=_0x13a682,this['_motionCount']=0x0,this['_pattern']=0x0;},Sprite_Actor['prototype']['forceWeaponAnimation']=function(_0x4c9f47){const _0x52535b=_0x164fcd;if(this[_0x52535b(0xc86)]())return;this['adjustWeaponSpriteOffset'](),this[_0x52535b(0x65f)][_0x52535b(0xd03)](_0x4c9f47),this[_0x52535b(0x41e)][_0x52535b(0x198)]();},Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x742)]=function(){const _0xaee1ca=_0x164fcd;let _0x23fa90=-0x10,_0x2ad935=this['height']*0.5;const _0xf8f6c4=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x3fa527=this[_0xaee1ca(0x7f9)][_0xaee1ca(0x66b)]()[_0xaee1ca(0xa98)](_0xcd6871=>_0xcd6871&&_0xcd6871[_0xaee1ca(0x9ea)][_0xaee1ca(0xa5d)](_0xf8f6c4)?Number(RegExp['$1']):0x0),_0x47dda4=this[_0xaee1ca(0x7f9)][_0xaee1ca(0x66b)]()[_0xaee1ca(0xa98)](_0x28e3b4=>_0x28e3b4&&_0x28e3b4[_0xaee1ca(0x9ea)][_0xaee1ca(0xa5d)](_0xf8f6c4)?Number(RegExp['$2']):0x0);_0x23fa90=_0x3fa527[_0xaee1ca(0xb82)]((_0x33bcc4,_0x539491)=>_0x33bcc4+_0x539491,_0x23fa90),_0x2ad935=_0x47dda4['reduce']((_0x33ae2c,_0x13fa08)=>_0x33ae2c+_0x13fa08,_0x2ad935),this[_0xaee1ca(0x65f)]['x']=_0x23fa90,this[_0xaee1ca(0x65f)]['y']=_0x2ad935,this['_weaponSprite']['update']();},Sprite_Weapon[_0x164fcd(0x2bf)][_0x164fcd(0xd03)]=function(_0x47945d){const _0xe451eb=_0x164fcd;this[_0xe451eb(0x87c)]=_0x47945d,this[_0xe451eb(0x787)]=-0x1,this[_0xe451eb(0xb0b)]=0x0,this[_0xe451eb(0x228)](),this[_0xe451eb(0x75e)]();},Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x966)]=function(){},Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x275)]=function(){const _0x2e2e7c=_0x164fcd,_0x986262=VisuMZ[_0x2e2e7c(0xb36)][_0x2e2e7c(0x1de)]['ActionSequence'],_0x497c0d=_0x986262[_0x2e2e7c(0x3d8)],_0x2eb424=_0x986262[_0x2e2e7c(0x71e)],_0x39c22d=_0x986262['StepDuration'];this[_0x2e2e7c(0xa52)](-_0x497c0d,-_0x2eb424,_0x39c22d);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x3cc)]=Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x75e)],Sprite_Actor[_0x164fcd(0x2bf)]['updateFrame']=function(){const _0x2f941f=_0x164fcd;this[_0x2f941f(0xc86)]()?this[_0x2f941f(0xc6b)]():_0x2f941f(0x753)===_0x2f941f(0x753)?(this['applyFreezeMotionFrames'](),VisuMZ[_0x2f941f(0xb36)][_0x2f941f(0x3cc)][_0x2f941f(0xa10)](this)):_0x3863c3[_0x2f941f(0xcf5)]=_0x163cda[_0x2f941f(0x57d)](_0x6baa08);},Sprite_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x24b)]=function(){const _0x55cc4f=_0x164fcd;if(this[_0x55cc4f(0x7f9)]&&this[_0x55cc4f(0x7f9)][_0x55cc4f(0x8f3)]){if(_0x55cc4f(0x507)===_0x55cc4f(0x4de)){const _0x55a1b4=_0x4adcfe[_0x55cc4f(0xb85)]();_0x55a1b4<=0x0?_0x5d95e9['playEnemyAttack']():this[_0x55cc4f(0x569)](_0x1c018d,_0x55a1b4);}else{const _0x18c034=this[_0x55cc4f(0x7f9)]['_freezeMotionData'];this[_0x55cc4f(0x48d)]=Sprite_Actor[_0x55cc4f(0x3fa)][_0x18c034[_0x55cc4f(0xca9)]],this[_0x55cc4f(0xb0b)]=_0x18c034['pattern'];const _0x10f752=this[_0x55cc4f(0x65f)];_0x10f752[_0x55cc4f(0xc1f)](_0x18c034['weaponImageId'],_0x18c034[_0x55cc4f(0x681)]),this[_0x55cc4f(0x742)]();}}},Sprite_Weapon[_0x164fcd(0x2bf)][_0x164fcd(0xc1f)]=function(_0x204ac3,_0x289a66){const _0x4d14a2=_0x164fcd;this[_0x4d14a2(0x87c)]=_0x204ac3,this[_0x4d14a2(0x787)]=-Infinity,this['_pattern']=_0x289a66,this[_0x4d14a2(0x228)](),this['updateFrame']();},Sprite_Enemy['prototype'][_0x164fcd(0x1be)]=function(){const _0x5034bc=_0x164fcd;Sprite_Battler[_0x5034bc(0x2bf)]['initMembers'][_0x5034bc(0xa10)](this),this['_enemy']=null,this[_0x5034bc(0x318)]=![],this[_0x5034bc(0x849)]='',this['_battlerHue']=0x0,this[_0x5034bc(0x4a9)]=null,this[_0x5034bc(0x671)]=0x0,this[_0x5034bc(0x255)]=0x0,this[_0x5034bc(0xc41)](),this[_0x5034bc(0xa37)]();},VisuMZ['BattleCore'][_0x164fcd(0xa0e)]=Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x71d)],Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x71d)]=function(){const _0x20ad6e=_0x164fcd;VisuMZ[_0x20ad6e(0xb36)][_0x20ad6e(0xa0e)][_0x20ad6e(0xa10)](this),this[_0x20ad6e(0x699)]();},Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0xc41)]=function(){const _0x58ec1b=_0x164fcd;this[_0x58ec1b(0x35c)]=new Sprite(),this[_0x58ec1b(0x35c)][_0x58ec1b(0x70f)]['x']=0.5,this[_0x58ec1b(0x35c)]['anchor']['y']=0x1,this[_0x58ec1b(0x23a)](this['_mainSprite']),this[_0x58ec1b(0x78e)]();},Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x950)]=function(){const _0x36a82a=_0x164fcd;return this[_0x36a82a(0x4e7)]||this[_0x36a82a(0x35c)]||this;},Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x228)]=function(_0x26a3a4){const _0x595ec6=_0x164fcd;this[_0x595ec6(0xcf5)]=new Bitmap(0x1,0x1);if(this[_0x595ec6(0x86a)]()){const _0x2298dc=this[_0x595ec6(0xa44)]['svBattlerData']();this[_0x595ec6(0xcf5)]=new Bitmap(_0x2298dc[_0x595ec6(0xab5)],_0x2298dc['height']),this[_0x595ec6(0x35c)]['bitmap']=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x595ec6(0x709)]()){const _0xbc997f=ImageManager[_0x595ec6(0x7e0)](_0x26a3a4);_0xbc997f[_0x595ec6(0x250)](this['onStaticEnemyBitmapLoad'][_0x595ec6(0x1f7)](this,_0xbc997f));}else{if(_0x595ec6(0x8b6)==='LzAUA'){const _0x29b101=_0x2cba06['BattleCore'][_0x595ec6(0x1de)]['BattleLog'];_0x29b101['ActionCenteredName']&&this['push'](_0x595ec6(0x233),_0x595ec6(0x7bd)[_0x595ec6(0x272)](_0x45528e['battleDisplayText'](_0x22eb83)));if(_0x37147c[_0x595ec6(0x9bc)](_0x5d256b)){if(_0x29b101['ActionSkillMsg1'])this['displayItemMessage'](_0x48f892[_0x595ec6(0x21e)],_0x4b834b,_0x4a3b12);if(_0x29b101[_0x595ec6(0xd0a)])this[_0x595ec6(0xa53)](_0x4135a2[_0x595ec6(0xc7e)],_0x8737d5,_0x2e7c7b);}else{if(_0x29b101['ActionItemMsg'])this[_0x595ec6(0xa53)](_0x448b85[_0x595ec6(0x2b6)],_0x3c924e,_0x43d14a);}}else{const _0x44d100=ImageManager[_0x595ec6(0x2f3)](_0x26a3a4);_0x44d100['addLoadListener'](this[_0x595ec6(0x1df)]['bind'](this,_0x44d100));}}}},Sprite_Enemy[_0x164fcd(0x2bf)]['onStaticEnemyBitmapLoad']=function(_0x4e4484){const _0x5d7028=_0x164fcd;this[_0x5d7028(0x35c)][_0x5d7028(0xcf5)]=_0x4e4484,this[_0x5d7028(0xcf5)]=new Bitmap(_0x4e4484[_0x5d7028(0xab5)],_0x4e4484[_0x5d7028(0x5e0)]);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x97c)]=Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x770)],Sprite_Enemy['prototype']['setHue']=function(_0x387463){const _0x2a8026=_0x164fcd;this[_0x2a8026(0x35c)]&&this[_0x2a8026(0x35c)][_0x2a8026(0x770)](_0x387463);},VisuMZ[_0x164fcd(0xb36)]['Sprite_Enemy_initVisibility']=Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0xae6)],Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0xae6)]=function(){const _0x4e844b=_0x164fcd;if(this['allowCollapse']())_0x4e844b(0x735)!==_0x4e844b(0x735)?_0x541c3a=_0x3f4a29[_0x4e844b(0xb74)]:VisuMZ[_0x4e844b(0xb36)][_0x4e844b(0x527)]['call'](this);else{this[_0x4e844b(0x318)]=!this['_enemy'][_0x4e844b(0xc49)]();if(!this[_0x4e844b(0x318)]){if(_0x4e844b(0x29c)!=='imFDU')this[_0x4e844b(0x4c4)]=0x0;else return this[_0x4e844b(0xba8)](_0xdab18[0x0],_0x50dcee[0x1],_0x56b9df=>{const _0x52e470=_0x4e844b;!_0x56b9df['isDeathStateAffected']()&&(_0x56b9df['forceAction'](_0x1d1d04[0x2],_0x198290[0x3]),_0x4636b2[_0x52e470(0x30e)](_0x56b9df));}),!![];}}},VisuMZ[_0x164fcd(0xb36)]['Sprite_Enemy_updateCollapse']=Sprite_Enemy['prototype'][_0x164fcd(0xa8c)],Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0xa8c)]=function(){const _0x3e2279=_0x164fcd;if(this[_0x3e2279(0x600)]())VisuMZ['BattleCore'][_0x3e2279(0x291)][_0x3e2279(0xa10)](this);},Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x75e)]=function(){const _0x88f1b9=_0x164fcd;Sprite_Battler[_0x88f1b9(0x2bf)][_0x88f1b9(0x75e)]['call'](this);const _0x12a318=this[_0x88f1b9(0x950)]()||this;if(!_0x12a318)return;!_0x12a318['bitmap']&&(_0x88f1b9(0x3e2)==='lybki'?(this[_0x88f1b9(0x958)]={},_0x5906d0[_0x88f1b9(0xb36)][_0x88f1b9(0x5ce)][_0x88f1b9(0xa10)](this)):_0x12a318['bitmap']=new Bitmap(this[_0x88f1b9(0xab5)],this['height'])),this[_0x88f1b9(0x4a9)]===_0x88f1b9(0x5f7)?this['_mainSprite'][_0x88f1b9(0x522)](0x0,0x0,this[_0x88f1b9(0x35c)]['width'],this[_0x88f1b9(0x671)]):_0x12a318[_0x88f1b9(0x522)](0x0,0x0,_0x12a318[_0x88f1b9(0xcf5)][_0x88f1b9(0xab5)],this['bitmap'][_0x88f1b9(0x5e0)]);},VisuMZ['BattleCore'][_0x164fcd(0x9ed)]=Sprite_Enemy['prototype'][_0x164fcd(0xa81)],Sprite_Enemy[_0x164fcd(0x2bf)]['updateBossCollapse']=function(){const _0x16d9d6=_0x164fcd;if(this[_0x16d9d6(0x600)]())VisuMZ['BattleCore'][_0x16d9d6(0x9ed)][_0x16d9d6(0xa10)](this);},Sprite_Enemy['prototype'][_0x164fcd(0xcc9)]=function(){const _0x31700b=_0x164fcd;return Sprite_Battler[_0x31700b(0x2bf)][_0x31700b(0xcc9)][_0x31700b(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xacd)]=Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x340)],Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x340)]=function(){const _0x5df920=_0x164fcd;VisuMZ['BattleCore'][_0x5df920(0xacd)][_0x5df920(0xa10)](this),this[_0x5df920(0xab3)]();},Sprite_Enemy['prototype'][_0x164fcd(0xab3)]=function(){const _0x424c8e=_0x164fcd,_0x142dd5=VisuMZ[_0x424c8e(0xb36)]['Settings']['Enemy'];if(_0x142dd5[_0x424c8e(0xb16)]&&!_0x142dd5[_0x424c8e(0x601)]){this[_0x424c8e(0x820)][_0x424c8e(0x4c4)]=0x0;return;}this[_0x424c8e(0x820)]['x']=0x0,this[_0x424c8e(0x820)]['x']+=this['_battler']['battleUIOffsetX'](),this[_0x424c8e(0x820)]['y']=-this['bitmap'][_0x424c8e(0x5e0)]-this[_0x424c8e(0x820)][_0x424c8e(0x5e0)]-0x4,this[_0x424c8e(0x820)]['y']+=this['_battler'][_0x424c8e(0x5bd)](),this[_0x424c8e(0x820)]['scale']['x']=0x1/(this[_0x424c8e(0xb56)]['x']||0.001),this[_0x424c8e(0x820)][_0x424c8e(0xb56)]['y']=0x1/(this[_0x424c8e(0xb56)]['y']||0.001),this[_0x424c8e(0x86a)]()&&(this[_0x424c8e(0x79c)][_0x424c8e(0xc81)][_0x424c8e(0xb56)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x424c8e(0x79c)][_0x424c8e(0xc81)][_0x424c8e(0xb56)]['y']=0x1/(this[_0x424c8e(0xb56)]['y']||0.001));},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xa25)]=Sprite_Enemy[_0x164fcd(0x2bf)]['setBattler'],Sprite_Enemy['prototype'][_0x164fcd(0x7b0)]=function(_0x27a9d6){const _0x586b46=_0x164fcd;VisuMZ['BattleCore']['Sprite_Enemy_setBattler']['call'](this,_0x27a9d6),this[_0x586b46(0xb40)](_0x27a9d6);},Sprite_Enemy['prototype'][_0x164fcd(0xb40)]=function(_0x57bae3){const _0x3fcebb=_0x164fcd;!this[_0x3fcebb(0x79c)]&&(this[_0x3fcebb(0x79c)]=new Sprite_SvEnemy(_0x57bae3),this[_0x3fcebb(0x78e)]()),this[_0x3fcebb(0x79c)]['setBattler'](_0x57bae3);},Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x86a)]=function(){const _0x1146bf=_0x164fcd;return this['_enemy']&&this['_enemy'][_0x1146bf(0x86a)]();},Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x600)]=function(){const _0x218dc8=_0x164fcd;if(this['hasSvBattler']())return this[_0x218dc8(0xa44)][_0x218dc8(0x600)]();else{if(_0x218dc8(0x943)!==_0x218dc8(0xaa8))return!![];else this[_0x218dc8(0xa23)]();}},Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0x25e)]=function(){const _0x130af3=_0x164fcd;if(this[_0x130af3(0x86a)]()){if(_0x130af3(0x7ea)===_0x130af3(0x7ea))this[_0x130af3(0x79c)]['refreshMotion']();else return _0x2e4d60['prototype'][_0x130af3(0x2cb)][_0x130af3(0xa10)](this);}},Sprite_Enemy[_0x164fcd(0x2bf)][_0x164fcd(0xb05)]=function(_0x1811be){const _0xdbdce1=_0x164fcd;if(this[_0xdbdce1(0x86a)]())this[_0xdbdce1(0x79c)][_0xdbdce1(0xb05)](_0x1811be);},Sprite_Enemy[_0x164fcd(0x2bf)]['forceWeaponAnimation']=function(_0x423140){const _0x5921d5=_0x164fcd;if(this[_0x5921d5(0x86a)]())this[_0x5921d5(0x79c)][_0x5921d5(0xaeb)](_0x423140);},Sprite_Enemy['prototype'][_0x164fcd(0x275)]=function(){const _0x5d143e=_0x164fcd,_0x105697=VisuMZ[_0x5d143e(0xb36)][_0x5d143e(0x1de)][_0x5d143e(0x8b1)],_0x205e59=_0x105697['StepDistanceX'],_0x94fb5b=_0x105697[_0x5d143e(0x71e)],_0x399542=_0x105697[_0x5d143e(0xbf0)];this[_0x5d143e(0xa52)](_0x205e59,_0x94fb5b,_0x399542);};function _0x4741(){const _0x38760e=['parent','Setting','_motionType','NameFontSize','VisuMZ_2_WeaponSwapSystem','isHidden','achrX','_iconIndex','SwitchMissEvade','VqMHn','Parse_Notetags_TraitObjects','Game_Action_applyGlobal','ActSeq_Motion_ClearFreezeFrame','getConfigValue','QCWtV','_armorPenetration','_immortal','CopyCombatLog','TpGaugeOffsetY','extendTroopMembers','tnWHX','jwbhX','BSYqQ','padding','attackAnimationIdSlot','addTextToCombatLog','createActors','displayFailure','_createCursorSprite','Window_BattleEnemy_show','XMDWv','Window_BattleLog_popupDamage','canMove','isAutoBattleCommandEnabled','Window_BattleLog_displayMpDamage','axrIZ','Game_Battler_regenerateAll','selectAllEnemies','rxwMR','updateStaticSvBattlerFrames','isDeathStateAffected','ActSeq_Mechanics_RemoveState','_preemptive','VsmgM','ConvertActionSequenceTarget','wIFbu','dead\x20opponents','Game_Temp_requestAnimation','CmdIconOptions','playEnemyAttack','8635608ImqEba','_enemyNameContainer','_actorCommandWindow','weaponTypes','SceneManager_isSceneChanging','wRZSd','_canLose','waitCount','message2','Game_Interpreter_command301','CtZRv','_stateSprite','_forcedBattleLayout','actions','svAnchorX','evalDamageFormulaBattleCore','hasStaticSvBattler','ActSeqImpact','uPLfb','hpDamage','onActorCancel','ParseStateNotetags','mlPgB','WaitForFloat','MwlCu','_waitCount','Dfdds','MyoUy','max','makeActions','CJVsB','_lastEnemy','isCTB','setCommonEvent','vODSB','isGuard','getSkillTypes','uonAq','+%1','Scene_Battle_selectNextCommand','result','battleCommandName','FNcqs','index','updateVisibility','NIsFo','TpbGaugeOffsetY','visualCutinPortraitFilename','Scene_Battle_onEnemyOk','%1Event','uRJxr','motionType','optDisplayTp','pauseInjectAnimation','Sprite_Actor_setActorHome','head','Jsoxe','not\x20focus','gZJVr','rDXRf','symbol','_activeWeaponSlot','MAT','_dimmerSprite','hFvIp','performFlinch','performActionEndMembers','ActSeq_Mechanics_WaitForEffect','updateCommandNameWindow','huySz','dimColor2','PopupOffsetX','current\x20target','ALL_ACTORS','getWtypeIdWithName','rzOhC','xMzZi','clearBattleCoreData','ActionEndUpdate','createSeparateDamagePopups','MpGaugeOffsetY','startBattle','okTargetSelectionVisibility','isMoving','PartyCmd','startTpbTurn','extraHeight','naiim','Turns','YdKQl','innerHeight','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','fnordRemovedStates','ActSeq_Impact_TimeStop','createShadowSprite','Direction','isPartyTpbInputtable','mSxUt','createPartyCommandWindow','command119','onAllActionsEnd','Scene_Battle_initialize','Armor-%1-%2','svBattlerData','updateAttachedSprites','battlerSmoothImage','ZnNqd','BievS','oJiPu','_linkedSprite','zaChZ','mAHlp','addedStateObjects','ArRedRate','checkShowHideSwitchNotetags','VgOpM','ForceExploited','Scale','Scene_Options','Game_Troop_expTotal','statusWindowRectDefaultStyle','makeHpDamageText','compatibilityVisible','updatePositionBattleCore','GIImq','cwCIp','hidden','bitmap','createUIContainer','weatherType','isBattlerFlipped','NameOffsetX','kSIeM','GzOsD','process_VisuMZ_BattleCore_BaseTroops','battleback1Name','pMJTf','createMiss','_lastHpDamage','launchBattle','_targetGrowY','setup','length','switchToWeaponType','ActSeq_Mechanics_StbExploit','_hpGaugeSprite','hardDamageCap','kPXub','ActionSkillMsg2','lastCommandSymbol','TextColor','performEvasion','applySoftDamageCap','virtualClick','evade','isOTB','UQTwd','targetBattlerContainerOpacity','isBreakStunned','_updateCursorArea','izGSB','_createClientArea','MpGaugeOffsetX','VisuMZ_3_BoostAction','isLearnedSkill','tGGWB','itemLineRect','ActSeq_Movement_HomeMoveToPoint','moveBattlerDistance','Game_BattlerBase_eraseState','some','VisuMZ_4_BreakShields','STYPES','setupRgbSplitImpactFilter','addState','_opacityDuration','setTargetBattlerKey','applyBattleCoreJS','statusText','isFloating','qhRCx','pagedown','OffsetAdjust','Scene_Battle_update','Sprite_Battleback_adjustPosition','attackStatesRate','UMReh','rQZUL','removeAnimation','PostEndActionJS','onRegeneratePlayStateAnimation','isOnCurrentMap','position','isIncludedInEnemyWindow','SVbgY','StartName','updateShadowScale','eraseState','lpKLB','gaWrR','_tempActor','clearTargetBattlerKey','AutoNotetag','XPSpriteYLocation','AllowRandomSpeed','Game_Interpreter_terminate','yDCbj','floatBattler','ActSeq_Impact_ZoomBlurPoint','ShowTpDmg','BKzvN','Window_PartyCommand_initialize','PrioritySortActive','parse','ZIpXv','_uiContainer','onEnemyOk','trueRandomTarget','mpnqL','mpDamage','createDigits','updateKeyboardKeys','Sprite_Actor_updateBitmap','pxddR','EgejK','animationNextDelay','KMsgL','getBattlePortraitFilename','_baseLineStack','ActSeq_Impact_Negative','isAutoBattleCommandAdded','ActSeq_Impact_BlueRedInvert','updateBattlebackBitmap','226128ZABwkg','QObTE','HP_Flat','aVkma','XHOBJ','extraPositionX','#%1','turnCount','KNCuW','ShowHide','processTouch','createTargetsJS','maxCommands','RmKVO','PopupShiftY','Sprite_Battler_setHome','klPaq','createKeyJS','kyZHx','ActorOffsetY','svBattlerAnchorY','name','stepFlinch','Immortal','WlYsh','CommandVisible','setCustomDamageFormula','MOhCM','BattleDefeatJS','repositionCancelButtonBorderStyle','zFwUT','actorCommandCancelTPB','updateBattlebackBitmap2','oaXBG','ActSeq_Mechanics_FtbAction','createBattleFieldBattleCore','setupMotionBlurImpactFilter','rmcHu','_createEffectsContainer','BoostPoints','EnableDamageCap','BattleManager_endAction','Game_Action_makeDamageValueDisperse','ActionEnd','cutinExit','State-%1-%2','KKSOe','rvDmQ','Game_Interpreter_updateWaitMode','canInput','skew','Targets1','getSpecificBattlerKeyTarget','log','default','isUndecided','UzbCj','TSafi','agvNY','isForAnyoneFocusOpponents','BattleAI','updateEventMain','ActSeq_Mechanics_EtbAction','qMRyP','clearWeaponAnimation','WABTx','UVUEG','ExtraSettings','ykFHU','hue','isDisplayEmergedEnemies','processAbort','WwbnD','top','Scene_Map_updateCallMenu','VisuMZ_2_BattleGridSystem','ActSeq_Movement_WaitForMovement','ActSeq_Impact_MotionTrailCreate','ActSeq_Mechanics_CustomDmgFormula','STB','resetBreakShield','all\x20targets','ReflectAnimation','endBattle','updateCustomActionSequence','YDcoH','selectNextCommandTpb','DXcbX','_commonEventKey','processPostBattleCommonEvents','kZmrg','DefaultDamageStyle','addAutoBattleCommand','_forcedBattlers','isOptionsCommandEnabled','changeAtbCastTime','isAnimationShownOnBattlePortrait','alphabetic','DWbXU','TjMtS','setSkill','createPartyCommandWindowBattleCore','initMembers','ptmas','svShadow','HelpAutoBattle','performCastAnimation','alive\x20friends','ShowAddedBuff','visualCutinPortraitType','Sprite_Battler_initMembers','performJump','tHWsN','ActSeq_Inject_AnimationPauseResume','pushBaseLine','bVDbF','slices','_buttonKey','Damage','SkillItemStandardCols','displayType','TpbGaugeOffsetX','currentAction','SwitchCritical','ScaleY','resizeWindowXPStyle','eqFqk','mKWiC','oVrzO','_floatEasing','getLastPluginCommandInterpreter','createDamageSprite','ActSeq_Set_SetupAction','TBcVH','Settings','onStaticEnemyBitmapLoad','logWindowRect','bgType','NdLUJ','DefeatEvent','getItemDamageAmountLabelBattleCore','isAnyoneSpinning','createHelpWindow','MP_Flat','battleUIOffsetX','applyImmortal','processEscape','JS\x20%1END\x20TURN','initialize','NCZMK','performSTBExploiter','isShownOnBattlePortrait','requestMotionRefresh','_targets','qzEtt','VisuMZ_2_BattleSystemSTB','Game_Map_encounterList','shouldDisperseDamage','customDamageFormula','bind','SKnnu','srMvz','SKILLS','itemRect','battleAnimation','startShakeFlinch','bCKBo','PortraitScale','applyAngleChange','StatusWindowAttachmentFront','_interpreter','BOBMV','_wtypeIDs','Scene_Party','autoBattleUseSkills','moveBattlerHomeToPoint','wMCfp','ActSeq_BattleLog_PopBaseLine','_offsetX','cameraClamp','addBattleCoreAutoBattleStartupCommand','alignBattleCoreDamageSprite','updateAngleCalculations','parallaxScrollYinvertEnemy','return\x200','deadMembers','removeImmortal','ActSeq_Animation_AttackAnimation2','applyHardDamageCap','WOHoK','Game_Action_setItem','%1Damage%2JS','_enemyID','_itemWindow','ZuftN','updateHomeMove','NLDAv','XnhlU','message1','WaitForMovement','DigitGroupingDamageSprites','battlerKey','displayChangedBuffs','BuAWU','adjustPosition_1for1','smooth','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','callNextMethod','loadBitmap','nREEz','xThPn','makeActionListAutoAttack','AS\x20TARGET','createActorCommandWindow','Exploited','Scene_Battle_updateStatusWindowPosition','refreshStatusWindow','startPartyCommandSelection','commandNameWindowCenter','addText','battlerSprites','CreateCutinSettings','addSingleSkillCommands','PerformAction','updateBitmap','basicGaugesY','addChild','MotionFrameWait','ONZvm','showPortraits','Game_Actor_equips','alive\x20friends\x20not\x20target','isBattleSys','rRgdn','svActorHorzCells','XHlqY','qWNUc','hitRate','BattleManager_initMembers','Cfcry','ActSeq_Set_FinishAction','setupFont','PNuyH','applyFreezeMotionFrames','ShowEnemyGauge','setupBattleback','VariableHeal','gXgOK','addLoadListener','PreEndActionJS','StatusWindowSelectableBackHide','PostDamageJS','%1EndTurnJS','_shake','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','xkWyn','bLrWp','isClicked','isDTB','callOptions','isBattleCoreTargetScope','collapse','refreshMotion','ActSeq_Impact_ShockwavePoint','portraitType','Mmeuo','repeatTargets','ShowCurrentState','waitForEffect','_borderPortraitSprite','Game_BattlerBase_addNewState','updateSpin','removeBuff','ztuWV','ActSeq_Mechanics_ActionEffect','Window_Options_addGeneralOptions','_battleField','bzhHn','oqMto','BPfak','startActorSelection','XFrLZ','format','boxWidth','_commonEventQueue','stepForward','expRate','gUhkn','bqCsh','aliveMembers','refreshRequest','updateRefresh','action','obFEf','MAXMP','AnimationID','addMeleeReturnActionSet','onOpacityEnd','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','fGkWb','setupZoomBlurImpactFilter','skben','ActSeq_Mechanics_CtbSpeed','CommonEventID','Window_BattleLog_displayMiss','OzMsd','UNTITLED','stIOY','Linear','createLowerLayer','CmdTextAlign','asSag','dtPel','Sprite_Enemy_updateCollapse','CheckVisibleSwitchNotetags','changeBattlebacks','jQZNB','setBattlerFlip','mhp','PqIWZ','selectNextActor','KxKJe','Game_Action_itemEffectAddNormalState','wtypeId','fRxpc','WPbsX','right','RyKOn','Rate','setValue','Height','XLHrZ','faceRect','rzFOr','Sprite_Animation_targetSpritePosition','dragonbonesData','ActSeq_Movement_WaitForScale','Actions','_jumpWholeDuration','VVRcv','formula','tGSXj','performMoveToTargets','wLtFq','_performActionEnd','_targetOffsetX','isAlwaysVisible','_targetIndex','AcSYV','weaponImageId','useItem','swapEnemyIDs','Enable','isActionSelectionValid','jznSL','DvMzg','hpDamageFmt','itemEffectRecoverMp','Item-%1-%2','prototype','performAttack','performMoveToPoint','Game_Battler_makeSpeed','VisuMZ_2_BattleSystemFTB','isBorderStylePortraitShown','setBattlerBattleCore','tbEfX','bDGwg','CommandWidth','string','ActSeq_Movement_MoveToTarget','damageOffsetY','allBattleMembers','LastSelected','_frontAttachmentSprite','isMeleeSingleTargetAction','MiEho','wholeActionSet','Game_BattlerBase_canGuard','VisuMZ_3_ActSeqCamera','ActSeq_Impact_ZoomBlurTargetCenter','skills','tfFal','playOnceParallelInterpreter','QmvOE','BattleManager_cancelActorInput','isOpponent','faceWidth','isDuringNonLoopingMotion','XuDVx','UcqAj','EscapeFail','mpHealingFmt','findSymbolExt','initBattleCore','TpGaugeOffsetX','BgType','FollowTurn','1:1','clearResult','WaitForEntrance','ActSeq_Mechanics_ArmorPenetration','mpDamageFmt','filterArea','Class-%1-%2','clearActiveWeaponSet','softDamageCapRate','ScaleX','clearDamagePopup','motionIdle','Game_Battler_onTurnEnd','loadEnemy','removeActor','ActSeq_Camera_WaitForCamera','KIyFf','_skillWindow','freezeTime','helpWindowRectBorderStyle','setLastBattleSkill','registerDefeatedEnemy','kqNmK','updateShakeFlinch','Shadow','CmdIconEscape','gJGam','Window_BattleLog_displayActionResults','enemy','isBuffAffected','qbIIN','addChildAt','PreEndTurnJS','charged','lXfLk','jZsxO','startOpacity','ueRlI','revertTpbCachedActor','FaceDirection','forceAction','setupWeaponAnimation','Sprite_Battler_update','AttachStateOffsetY','setupOversaturateImpactFilter','_battleLayoutStyle','SBkSl','PwbMf','start','isForAnyone','_appeared','Strength','Debuffs','SkillItemMiddleLayout','setupBattleCore','_growY','damageOffsetX','isActor','isAtbChargingState','isAnyoneGrowing','PreRegenerateJS','bitmapHeight','ActSeq_Camera_Clamp','oktEz','_cursorArea','JSON','jkBHB','turn','WaitForAnimation','removeOnceParallelInterpreter','onGrowEnd','RequiresDefeat','windowskin','EnemyOffsetX','_actorSprites','GYBju','azLNB','Game_Action_makeTargets','BattleEndEvent','Mirror','_makeCursorAlpha','Enemy','MnpEO','NTzfH','isVisualHpGaugeDisplayed','vdwGX','ckeXD','isMagical','isNonSubmenuCancel','lineRect','updateStateSprite','UKuCC','DisplayAction','Game_Map_setupBattleback','battleEnd','Intensity','members','YjHyk','applyGlobalCommonEventNotetags','becomeSTBExploited','displayTpDamage','DisablePartyCmd','isForOne','FullActions','isHiddenSkill','NsXpc','SmqXB','MotionSpeed','ActSeq_Horror_NoiseRemove','ActSeq_Skew_Reset','CombatLogIcon','FlinchDistanceX','lXBeQ','STwVN','canSingleOrMultipleSelect','isAttack','checkShowHideSkillNotetags','_partyCommandWindow','_mainSprite','itemTextAlign','bupyg','parallaxHueEnemyModifier','sUSog','shouldHideBattleEndPopups','ANTI_TINT_UI','Game_Action_setGuard','BCjhC','qVmHf','BeilO','applyEasing','getCommonEventIdWithName','command301','alive\x20actors','loadSvActor','BattleManager_onEncounter','suQPK','FUlOg','uiMenuStyle','createBorderStylePortraitSprite','linkSprite','XjJQg','PortraitScaleBorderStyle','ActSeq_Element_NullElements','updateUiContainerPosition','onJumpEnd','measureTextWidth','setupShockwaveImpactFilter','StatusWindowSkinFilename','ActSeq_Animation_WaitForAnimation','battleOpacity','ueRVT','displayEvasion','FojTm','center','playReflection','createEffectActionSet','contents','Opacity','TljDB','ActSeq_Mechanics_EnemyEscape','WaitCount','isItemCommandEnabled','jHVfY','ActSeq_Mechanics_BreakShieldChange','SdfMf','Window_BattleLog_displayCritical','VnnYC','qsQFv','drawItemBackground','_currentAngle','_skewX','jARvH','UgNmL','AlphaFilter','YnyRh','concat','GaEfh','makeSpeed','all\x20enemies','AnchorX','_tpbNeedsPartyCommand','flashDuration','needsActorInputCancel','missile','ITEM','Targets2','SkipPartyCmd','OLpWQ','setWaitMode','isTickBased','makeCommandList','ARRAYNUM','iwYDj','EasingType','Scene_Map_launchBattle','drawEnemyName','_motionSpeed','Window_BattleLog_displayEvasion','rowSpacing','eFJAE','_cancelButton','jsOneForOne','wbZRh','hnAVr','ArRedFlat','criticalDmgFlat','EFFECT_COMMON_EVENT','mMQka','JS\x20BATTLE\x20DEFEAT','effect','SvBattlerSolo-%1-%2','CmdStyle','updateStatusWindowPosition','MTINa','blt','VisuMZ_3_VisualCutinEffect','_damagePopupArray','ActSeq_Movement_Scale','ActiveTpbOptionsMessage','BattleManager_startInput','VSceC','displayReflection','canEscape','isFightCommandEnabled','SvBattlerMass-%1-%2','WUGes','CriticalHitMultiplier','updateGrow','_targetSkewX','createBattleUIOffsetX','Sprite_Actor_updateFrame','_battleCoreNoElement','isBorderPortraitSpriteVisible','NUAlc','ActSeq_Movement_Skew','_emptyBitmap','command339','spinBattler','PreApplyAsTargetJS','ojcEK','COMBATLOG','NUM','StepDistanceX','-%1','oNEfO','_baseY','_customDamageFormula','Game_Action_apply','isBattlerGrounded','_borderPortraitDuration','icon','PostDamageAsTargetJS','CRTPj','QaLXe','Game_Action_clear','addFightCommand','onSelectAction','uSQWu','tPVqq','LjhcJ','setHelpWindowItem','getNextSubjectFromPool','1742120FYnmHv','bitmapWidth','invokeAction','onBattleEndBattleCore','_lines','animation','ActSeq_Element_AddElements','ParseClassNotetags','battleInjectAni','CheckVisibleSkillNotetags','nkKHY','tHwyU','isPartyCommandWindowDisabled','autoSelectPriority','MOTIONS','_onceParallelInterpreters','StartTurnWait','WaitComplete','230BXMHrE','startActorCommandSelection','clone','makeTargetsBattleCoreJS','arPenFlat','battleInjectPrep','portrait','ceil','makeSuccess','power','FqGvN','VisuMZ_3_ActiveChainSkills','Spriteset_Battle_update','singleSkill','SgInY','Game_Action_setAttack','isImmortal','updateAttachmentSprites','_multipliers','getEnemyIdWithName','_enemyMultiTargetWindow','closeBattleActorWindow','startFloat','ACZdV','windowPadding','processDefeat','ActSeq_Impact_TimeScale','DmQCC','Ygxht','_namesCount','_targetHomeY','command3011','_actor','waitForMovement','_targetSkewY','targetActionSet','createBattleUIOffsetY','_shadowScaleY','cancelActorInput','processRefresh','snapForBackground','ulxFb','SceneManager_push','addAttackCommand','displayActionResults','initElementStatusCore','commandName','_commonEventIDs','performDamage','gbPOm','QmRDr','drawIcon','drawItem','ActSeq_BattleLog_WaitForNewLine','flipVisualCutinHorz','Game_Battler_performDamage','pgQaQ','Game_Action_isForOpponent','Sprite_AnimationMV_updatePosition','stop','wHrgd','commandNameWindowDrawText','cutinEnter','_motionCount','TextFmt','_actionBattlers','mYhWX','createEnemies','GwUYQ','isOpen','gVHtW','setFullActionsPTB','Cngkn','qJqbo','NtXJl','ActSeq_Target_PrevTarget','isPlaytest','HVoCn','XeuUW','battleCommands','BARE\x20HANDS','displayCurrentState','Scene_Battle_logWindowRect','_text','States','EndBattlePopups','PjIgS','_drawTextOutline','Victory','executeDamage','processExtendTroopMembers','collapseType','textSizeEx','aYqcC','PostApplyAsTargetJS','Game_Actor_setup','ActSeq_Projectile_Icon','gaugeX','addShowHpGaugeCommand','applyArmorModifiers','expTotal','IPKFP','GKvOG','createCommandNameWindow','_enemies','silentHomeMove','isDead','Exploiter','NnhDI','MAgpy','getDamageStyle','_lastActor','IconStypeNorm','itemEffectRecoverHp','Window_BattleStatus_initialize','changeCtbCastTime','ATK','endAction','addNewState','_enemySprites','addAnimationSpriteToContainer','ShowCounter','\x5cI[%1]%2','%1EndBattleJS','Scene_Battle_createActorCommandWindow','ShowRemovedState','undecided','ActSeq_Camera_Reset','ArPenFlat','isMagicSkill','victory','_angleRevertOnFinish','Scene_Boot_onDatabaseLoaded','isBTB','softDamageCap','FMBAN','isBattleMember','clamp','Scene_Battle_onEnemyCancel','removeHorrorEffect','All\x20Allies','CreateCommonEventKeys','DaMbu','_motion','ConvertParams','PostApply%1JS','Sprite_SvEnemy','VisuMZ_3_BattleAI','Game_Action_setSkill','startMotion','remove','PreStartActionJS','rBVvG','createMultiTargetWindows','LJdrU','oOkqp','_target','ActSeq_Angle_WaitForAngle','_actionInputIndex','ActorOffsetX','StatusWindowAttachmentBack','QWjBA','JS\x20ESCAPE\x20SUCCESS','Game_Interpreter_command283','isForAll','battleCoreTpbMainPhase','mViiL','pointX','Spriteset_Battle_updateActors','_borderPortraitTargetX','_tpbState','_effectType','displayMpDamage','ext','NdyIR','stbGainInstant','removeAnimationFromContainer','Window_BattleStatus_drawItemImage','BattleSystemCTB','obUGr','battleLayoutStyle','ACTOR_OFFSET_X','LXwFK','criticalHitFlat','addWindow','Sprite_Enemy_createStateIconSprite','DamageStyles','setBattlerFacePoint','Uzjxh','drawTextTopAligned','Post','setHelpWindow','IvQED','surprise','HitFlat','iBCct','TextAlign','ctusG','opacity','applyResultSwitches','applyItem','onBattleEnd','_scene','autoMeleeMultiTargetActionSet','WaitForEffect','Skill-%1-%2','StatusWindowSkinHide','actorCommandSingleSkill','TargetLocation','createCancelButton','ActSeq_Projectile_Picture','enemyNames','makeData','_duration','WtOpJ','ActionAnimation','rec','drawItemImageListStyle','_inputting','setBattlePortrait','ARRAYSTR','_offsetY','#ffffff','HJflL','dNYNi','WxshV','_methods','AnchorY','stepBack','YHHin','ActSeq_Camera_FocusTarget','drawItemStatusXPStyle','ZABPt','_distortionSprite','noise','setActionState','Scene_Battle_skillWindowRect','_defeatedEnemies','loadWindowskin','yJQeQ','updateWeather','helpWindowRect','_targetOffsetY','_floatDuration','PgnBn','process_VisuMZ_BattleCore_CommonEventKeys','debuffAdd','svBattlerName','alive\x20enemies\x20not\x20target','_lastAction','BwjMa','parallaxHue','intjf','NextTurn','YqEVP','mDPNE','stateRate','battleMembers','iAWTi','BvNfE','LyyVl','process_VisuMZ_BattleCore_PluginParams','_ptbActionCost','battleStatusSprite','fight','QRykS','Scene_Battle_startEnemySelection','createEnemyNameContainer','endAnimation','isATB','JS\x20%1END\x20ACTION','VaCMG','vgner','GJIsl','isPhysical','close','onBattleStart','DIwyv','Mechanics','BfeQB','prev\x20target','BZKYn','setBackgroundType','nMPQR','commandNameWindowDrawBackground','createHelpWindowBattleCore','isFriendly','attackSkillId','startInput','options','getBattlerKeyTargetReplacement','noSimilarSTypes','setFrame','EnableSoftCap','placeTimeGauge','Enemy-%1-%2','getMenuImage','Sprite_Enemy_initVisibility','isAppeared','WaitCount1','animationId','JS\x20ESCAPE\x20FAILURE','Game_BattlerBase_die','VmUrJ','Window_BattleLog_performActionEnd','RihQg','battleDisplayText','setupChild','tXkjB','active','_requestRefresh','MaxLines','vaSEj','arRedFlat','OnaVM','UrjFf','MotionType','battlerShadowScaleY','casting','WKYui','oKxwe','isSceneBattle','Window_BattleLog_performReflection','front\x20base','isGuardWaiting','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','PreStartBattleJS','tZiXZ','BattleManager_onEscapeSuccess','isDying','ActSeq_Mechanics_DeathBreak','Slot','FsoIo','WeaponTypeID','isJumping','zUSCG','updateBorderStyle','processBattleCoreJS','isCommonEventReserved','isDamagePopupRequested','Evwij','ActSeq_Mechanics_VariablePopup','wtMMC','battleFloat','wEAUR','isSkipPartyCommandWindow','_tempBattler','zTZZs','BattleManager_processDefeat','Wave','preparePartyRefresh','Window_BattleLog_refresh','toUseBoostPoints','transform','ActorCmd','_flipScaleX','vNPdC','battlelog','makeTargetSprites','ActSeq_BattleLog_AddText','_logWindow','isPTB','inBattle','showNormalAnimation','value1','push','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','2006560lNeYAu','PostStartBattleJS','CPaNH','VyoUk','gainCurrentActionsFTB','createAnimationContainer','mFCtD','ActSeq_Horror_GlitchRemove','_floatWholeDuration','isTpbMainPhase','onEncounterBattleCore','ShowReflect','ParseEnemyNotetags','setHorrorEffectSettings','IYKiV','isTpbCharged','loadPicture','setActiveWeaponSlot','isAnyoneMoving','isMeleeMultiTargetAction','knAht','nameY','drawSkillCost','min','RevertAngle','updatePadding','OstVP','setupBattleCoreData','showAnimation','CommandAddOptions','ScaleToFit','selectPreviousCommand','RegExp','drawBackgroundRect','sOMgb','cancelButtonText','BaseTroopIDs','TjNmP','tBKnu','isRightInputMode','hKone','isAnyProjectilePresent','damage','BKIfG','resetFontSettings','JS\x20%1START\x20TURN','frontview_ui','updateStyleOpacity','oRrPC','_deathStateApplied','textWidth','_index','TimeScale','waitForOpacity','addWeaponSwapCommand','eyqyp','updateJump','equips','_subject','ShowCritical','HelpOptions','isPreviousSceneBattleTransitionable','clearOnceParallelInterpreters','battleCorePreBattleCommonEvent','_helpWindow','updatePhase','_phase','battleEffect','Formula','performTpbActiveCheckSwitch','_allTargets','Game_Battler_clearMotion','ActSeq_DB_DragonbonesMotionAni','_jumpMaxHeight','updateScale','onActorOk','randomInt','EsNda','okButtonText','uxgxi','battleUIOffsetY','MUNme','nDWuo','Scene_Battle_createPartyCommandWindow','LDPDX','shadow','battleSpin','_enemyWindowMode','isCustomBattleScope','setActorHome','ConvertCount','CommandAddAutoBattle','windowAreaHeight','_createCursorArea','sPyfI','ZKCLG','CriticalHitFlat','Game_BattlerBase_refresh','performCounter','actionEffect','portraitFlipHorz','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','selectAll','spriteId','Window_BattleLog_pushBaseLine','ALEAf','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','jtHAq','find','equipSlots','drawGauge','mLjdj','CheckSkillCommandShowSwitches','isChangingOpacity','StyleOFF','height','HSrBt','VisuMZ_2_BattleSystemATB','Ysqbz','stateMotionIndex','notFocusValid','resize','setupActionSet','addSingleSkillCommand','item','DIxwR','finishActionSet','enemyId','CriticalDuration','visibilityState','addBuff','HelpEscape','OffsetY','makeTargetsBattleCore','NameAlwaysHidden','AAwdj','base','Game_Actor_makeActionList','bossCollapse','DXkoc','effects','ShowButton','LvXKr','create','_floatHeight','AQVIA','isTurnBased','allowCollapse','NameLegacy','addExtendedTroopMembers','_isBattlerFlipped','isQueueOptionsMenu','adjustPosition','redraw','removeStatesAuto','counterAttack','placeGauge','float','dimColor1','PUVtv','Game_Map_battleback2Name','_battleCoreForcedElements','SkillItemBorderCols','ButtonAssist','Window_BattleEnemy_initialize','drawActorFace','ShakeFlinch','gainMp','ShowPopup','FGAuL','OEcTg','battleCamera','battleProjectiles','mSEbR','resetTextColor','CmdTextAutoBattle','cXAtC','clearRect','deactivate','FlashColor','lrcuh','updateFlip','Yiezo','IspVJ','drawTextEx','BattleManager_startBattle','cameraOffsetDuration','filters','performWeaponAnimation','Scene_Battle_helpWindowRect','reverse','addSkillCommands','eGJuT','initBattlePortrait','makeTargets','IconStypeMagic','updateCallMenu','AutoBattleRect','ActSeq_Animation_ShowAnimation','cmykJ','checkTpbInputClose','battleGrow','ShowMissEvasion','gainHp','UbYJO','destroyDamageSprite','izlcK','+%1\x20MP','resizeWindowBorderStyle','flipVisualCutinVert','PostEndBattleJS','setBattleCameraPoint','code','MFqZr','_lastRegenFrameCount','Window_BattleLog_performEvasion','rHJOb','moveToStartPosition','oTFjJ','adjustPosition_ScaleDown','lRklx','ActSeq_Skew_WaitForSkew','tsecx','HUKtC','IidLW','makeActionList','ActSeq_ChangeSkew','JumpToLabel','CjAeu','clearFreezeMotionForWeapons','setBattleZoom','svActorVertCells','description','Game_Battler_onBattleEnd','chantStyle','addItemCommand','Window_BattleLog_performRecovery','isForAliveFriend','currentClass','startTurn','Destination','ActSeq_Mechanics_BoostPointsChange','_weaponSprite','isAnyoneInjectAnimating','isBypassDamageCap','HelpFight','Scene_Options_maxCommands','damageContainer','helpAreaBottom','jumpBattler','recoverAll','Sprite_Battler_damageOffsetX','_autoBattleWindow','skdnQ','traitObjects','_shakeFlinchDuration','iconHeight','tsOKD','sortEnemies','DualWield','_effectDuration','VisuMZ_3_ActSeqProjectiles','cancel','%1StartBattleJS','makeTargetSelectionMoreVisible','IbOIG','ActSeq_Impact_ShockwaveEachTargets','popupDamage','mAIIf','createCommandVisibleJS','_lineHeight','targetsForOpponents','chant','OMAVL','VlYCf','_regionBattleback1','pattern','updatePosition','oESDQ','centerFrontViewSprite','Amp','CoreEngine','NnFNq','qGzfU','BattleSystemBTB','registerCommand','RcmYR','scope','ParseItemNotetags','addOnceParallelInterpreter','itemWindowRect','fllSl','missed','CidEQ','selectLast','DBjrn','setBattleSkew','UtunE','BindCommonEventKeysForObj','_opacityWholeDuration','updateShadowVisibility','Filename','troop','AdjustRect','55fUlSnM','AsmsI','filter','_active','ALL\x20SKILLS','addCommand','IFeOh','OvZLS','_attackAnimationId','jump','ActSeq_Impact_MotionBlurScreen','JS\x20%1START\x20BATTLE','command301_PreBattleEvent','Window_ItemList_maxCols','_baseX','BattleVictoryJS','BravePoints','actor','CriticalDmgRate','vmRnE','time','isPreviousScene','battleback2Name','isChanting','criticalDmgRate','_currentActor','bottom','hasSkill','drawItemImagePortraitStyle','statusTextAutoBattleStyle','Game_Action_isForAll','getAttackWeaponAnimationId','Window_Options_statusText','value2','DefaultHardCap','ihAnc','gainCurrentActionsETB','clearAllVisualCutins','PRE-','setMoveEasingType','DigitGrouping','performCollapse','disperseDamage','%1Apply%2JS','getBattlerKeyTargets','UEjAl','regenerateAll','_stypeIDs','HtHIQ','fQTcX','Iyyue','FocusY','mFQvC','SmoothImage','_item','ltIAY','jsScaleToFit','wrAfl','setupNegativeImpactFilter','TEVpr','%1StartActionJS','Width','replace','GUARD','displayAction','removeChild','DistanceY','TpbActiveChangeEnabled','_targetBattlerKey','isNextSceneBattleTransitionable','svBattlerShadowVisible','battleCameraData','ActSeq_Impact_MotionBlurTarget','statusWindowRectXPStyle','CastCertain','GDjcK','getHardDamageCap','lastFilename','encounterList','Scene_Battle_start','hJdDs','_damageContainer','occasion','OhwBF','XEXfF','_weather','setImmortal','getNextSubject','addPartyCommand','updateEffectsContainer','iFfbF','vUcng','TrXvp','ActSeq_Horror_TVRemove','ActSeq_Angle_Reset','uiInputPosition','updateBattleProcess','ActSeq_Animation_ChangeBattlePortrait','isSTB','FrontViewSelect','_growDuration','Window_BattleLog_performMagicEvasion','offsetX','iDtuK','removeDamageSprite','swing','commandOptions','nRmHd','isSideView','startEnemySelection','gySbS','meetsSelectFrontviewActorConditions','displayCounter','setHandler','anchor','addBattleCoreAutoBattleStyleCommand','ActSeq_Zoom_Reset','LYbKN','ClearBattleLog','_opacityEasing','isFlipped','Game_Action_isForRandom','VisuMZ_2_BattleSystemETB','zoomDuration','globalAlpha','select','dNUOE','hitFlat','update','StepDistanceY','canUse','isCommandEnabled','DamageStyleList','ActSeq_Mechanics_AddBuffDebuff','HsUxA','subject','slice','ecgke','jxXDm','addSkillTypeCommand','_totalValue','CmdIconFight','offsetY','waitForAnimation','refresh','process_VisuMZ_BattleCore_CreateRegExp','_list','pdnZE','CastMagical','DamageDisplay','openBattleActorWindow','StateIconOffsetX','SuGzz','Scene_Map_initialize','SejRr','frameCount','drawSingleSkillCost','onBattleStartOnceParallels','YagDQ','_angleDuration','FsZvG','Window_BattleActor_show','Scene_Battle_partyCommandWindowRect','itemHeight','SAORU','adjustWeaponSpriteOffset','WaitForCamera','ecdKW','partyCommandWindowRect','BTB','drawItemImageXPStyle','initMembersBattleCore','_checkOn','_padding','ShowHpDmg','canBattlerMove','ShowFacesListStyle','isAffectedByBreakShield','partyCommandWindowRectDefaultStyle','BreakShields','mainSpriteScaleY','isForRandom','FFTvI','displayBattleCoreTransitionErrorMsg','updateBattlebackBitmap1','auto','front\x20center','ActSeq_Animation_ActionAnimation','getDualWieldTimes','ARMQb','MNxur','Parse_Notetags_Targets','Game_Battler_performMiss','updateFrame','addCustomCommands','unchanged','itemEffectAddNormalState','createHpGaugeSprite','Scene_Battle_stop','performSubstitute','battleCoreResumeLaunchBattle','autoSelect','alive\x20friends\x20not\x20user','maxItems','isCertainHit','Game_Enemy_transform','ActionEffect','pEpHy','BTestBypass','_flinched','okQtQ','setHue','ActSeq_Mechanics_PtbAlterCost','yCwXS','uUfcg','BDqyo','Sprite_Gauge_smoothness','createStateSprite','magicSkills','makeAutoBattleActions','djLFK','actor%1-portrait','PreApplyJS','sggFC','pQReE','split','_angleWholeDuration','isAlwaysHidden','addActor','Sprite_Weapon_loadBitmap','scuKr','inputtingAction','AutoMeleeAoE','_executedValue','_animationCount','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','dead\x20friends','DokLU','ActSeq_Mechanics_BoostPointsStoreData','changeAtbChargeTime','ShowActorGauge','attachSpritesToDistortionSprite','performAction','toLowerCase','_shakeFlinchPower','ActSeq_Horror_TVCreate','PAREK','makeEscapeRatio','WaitForScale','lastBattleSkill','DistanceAdjust','isForAliveFriendBattleCore','ActSeq_BattleLog_WaitForBattleLog','isStateResist','tIFPw','_svBattlerSprite','Frame','xXCXD','ConfigManager_applyData','retreat','setupDamagePopup','substitute','_back1Sprite','removedStateObjects','getBattlePortraitOffsetY','YiIxN','guard','isCharging','sRYEy','_back2Sprite','setupTextPopup','setAttack','MANUAL','_flashDuration','gainHalfActionsPTB','setBattler','startDamagePopup','selectSymbol','alive\x20opponents\x20not\x20target','UuEWL','pageup','battleSpriteSkew','rnTfT','iconWidth','sliceMin','performAttackSlot','portraitFilename','_cacheTextWidth','<CENTER>%1','GiVNr','clear','iHcBm','evalDamageFormula','ToArb','ZhMDF','createBattleFieldContainer','auGoS','clearHorrorEffects','ActSeq_Projectile_Animation','magicReflection','xvQty','turnOrderChangeOTB','jTBdZ','Targets','Buffs','priority','displayAffectedStatus','ElementStatusCore','PARTY','text\x20target','gainBravePoints','XPActorDefaultHeight','alive\x20opponents','onMoveEnd','cameraDuration','eVkxv','nVQJz','BattleManager_startAction','ParseWeaponNotetags','MultiTarget','CheckMapBattleEventValid','updateActors','JRGXW','loadSvEnemy','toUpperCase','ActSeq_Inject_WaitForInjectAni','pITPY','DWGPR','adjustFlippedBattlefield','border','cIoBF','jUxcJ','Game_Battler_startTpbTurn','zfZnq','AllEnemiesText','isForOpponent','messageSpeed','fnordAddedStates','Scene_Battle_windowAreaHeight','save','ResetFocus','Shadow2','actionBattleCoreJS','hasBeenDefeatedBefore','CmdIconItem','updateHpGaugePosition','exit','BattleManager_onEscapeFailure','_battler','MDF','ARRAYFUNC','Game_BattlerBase_isStateResist','wqfDF','updateBorderSprite','_callSceneOptions','kNaGl','getAttackMotion','addEscapeCommand','SkewX','_effectsContainer','getBattlePortrait','QcWBG','_actorMultiTargetWindow','Scene_Battle_createAllWindows','IjfwC','Scene_Battle_startActorSelection','ActSeq_Zoom_WaitForZoom','_commandNameWindow','kjWGa','PmwxV','CqNgr','AggroControlSystem','battleZoom','isSkewing','_visualHpGauge_JustDied','iaQwv','performActionEnd','CTB','inputting','VisuMZ_0_CoreEngine','Sprite_Battler_damageOffsetY','StateIconOffsetY','ppVNA','wMeDV','PostStartActionJS','svActor','XjxzZ','_stateIconSprite','iconText','dead','pha','actorCommandWindowRect','qJUOw','tpbCommandFight','isBattleRefreshRequested','createContents','fillRect','XQaBp','ActionStart','lineHeight','zBkCN','eOceh','XPActorCommandLines','processBorderActor','drawItemStatus','getHalfActionsPTB','_battleCoreAddedElements','QYuJq','makeDeepCopy','Game_System_initialize','NDqnq','QZdpw','Game_Action_numRepeats','Scene_Battle_createHelpWindow','canAttackBattleCore','playOnceParallelTroopPage','HpGauge','PopupShiftX','createAutoBattleWindow','Angle','_endingBattle','findIndex','_battleCoreBattleResumeAfter','popBaseLine','lYEoP','YwjkU','battleAngle','Window_BattleLog_performAction','_battlerName','createDistortionSprite','Window_BattleActor_hide','ShakeFlinchPower','addChildToBack','selectNextCommand','abnormal','EAAmY','jsScaleDown','isSpinning','changeBattlerOpacity','ArPenRate','ShowAddedState','skillItemWindowRectBorderStyle','MWiTp','autoBattleWindowRect','getNextDamagePopup','_jumpHeight','LLmUi','gaugeLineHeight','message4','Game_Troop_setup','mvOwj','WaitForZoom','THeww','Game_Action_needsSelection','_shadowScaleX','aEpUj','applyTargetFilters','CpeCY','requestFauxAnimation','_animationContainer','ApplyImmortal','hasSvBattler','Game_Action_executeDamage','waitForNewLine','_tempEquipCheck','ActSeq_Horror_NoiseCreate','isSubjectValidForAnyoneSelect','jNboA','NHhfv','Window_BattleActor_processTouch','AYfgt','rlFIQ','BattleManager_startTurn','_skewY','Skills','ZfJib','WIDTH','isAnyoneFloating','animationBaseDelay','_weaponImageId','helpAreaHeight','ReTnK','children','skill','ActSeq_Movement_FaceDirection','zEBgV','calcWindowHeight','WaitForExit','WxvTp','isForFriendBattleCore','moveBattlerToPoint','updateWaitMode','RKBJU','targetSpritePosition','pKrxN','createAllWindows','ActSeq_Target_RandTarget','isItem','jcPFa','getChildIndex','parallaxScrollXinvertEnemy','Game_Action_isForFriend','includes','Scene_Map_initializeAfter','compareBattlerSprites','BsTQh','ShowPortraits','rFNRQ','doesPageHaveOnceParallelStart','StatusWindowAttachmentFrontOffsetY','_battlePortrait','WindowWidth','addedBuffs','_doubleTouch','MeEjK','alive\x20enemies\x20not\x20user','performRecovery','UCMcC','addDamageSprite','_skewDuration','isBusy','AsUser','value','ActSeq_Cutin_AddVisualCutinEffect','getItemDamageAmountTextBattleCore','_growX','xviHe','getBattlerFromKey','Game_BattlerBase_initMembers','ZNOZO','VisuMZ_3_FrontviewBattleUI','updateFloat','ActionSequence','isEffecting','_regionBattleback2','HpGaugeOffsetY','ActSeq_Element_ForceElements','CeCmA','AWcob','actionSplicePoint','ActSeq_Movement_WaitForJump','itemCri','forActor','moveBattlerHomeDistance','mmp','shouldPopupDamage','isAnyoneSkewing','TYBOL','oVEGD','ddFhv','JS\x20%1START\x20ACTION','applyForcedGameTroopSettingsBattleCore','_statusWindow','processVictory','_makeFontNameText','ActSeq_Mechanics_Immortal','AGI','tpbActorSwitchConditionsMet','%1EndActionJS','onBattleStartBattleCore','walk','Sprite_Actor_initMembers','BMOZC','Lfdsx','setupDesaturateImpactFilter','ActSeq_Impact_ColorBreak','POST-','commandFight','Window_BattleLog_displayCurrentState','removeState','Sprite_Actor_moveToStartPosition','onEncounter','CalcEscapeRaiseJS','bwVwy','itemHit','AUTO\x20BATTLE','startInjectAnimation','drawItemStyleIconText','dGvCu','CastAnimation','Window_BattleLog_performSubstitute','BdtEN','_backAttachmentSprite','clearBattlerMotionTrailData','MirDc','setActiveWeaponSet','FaceAway','canAlterActionCostPTB','ActSeq_Movement_HomeMoveToTarget','siqoI','deathStateId','vFnUi','PreDamageAsUserJS','EnemyOffsetY','AutoBattle','requestMotion','commandSymbol','targetDistortionSpritePosition','_freezeMotionData','performActionMotions','UwUii','GNkeV','isOptionsCommandAdded','Window_SkillList_maxCols','missle','startSkew','Override','SkillsStatesCore','Pzizc','ActSeq_Mechanics_CtbOrder','Jzeks','ikRKa','autoSelectLastSelected','process_VisuMZ_BattleCore_jsFunctions','_statusType','WaitForSkew','StatusWindowAttachmentFrontOffsetX','43722QcPjaJ','STRUCT','Duration','PrioritySortActors','shift','mainSpriteScaleX','setBattleCameraTargets','ScaleDown','NBjAR','Point','KWgvZ','PostStartTurnJS','VariableDmg','onAngleEnd','PLsIB','FUNC','ZvJrw','checkCacheKey','_drawTextBody','_windowLayer','_actorWindow','AllowCollapse','maxBattleMembers','EmergeText','performMiss','Sprite_Battler_setBattler','ActSeq_Movement_HomeMoveBy','battler','_enemyId','floor','ActSeq_Camera_Offset','selectAllActors','SWBIh','addOptionsCommand','isAtbCastingState','drawItemStyleIcon','BattleManager_endBattle','euquJ','glitch','partyCommandWindowRectBorderStyle','battleStatusWindowAnimationContainer','FyEfc','stopInjectAnimation','createChildSprite','_damages','reserveCommonEvent','Sprite_Actor_update','itemEffectAddAttackState','ajypM','_indent','Window_BattleLog_clear','MIN_SAFE_INTEGER','KVmsz','regionId','Bfokj','createBattleField','BattleManager_isTpbMainPhase','HomePosJS','updateLink','isCustomActionSequence','Radius','czhBn','ConfigManager_makeData','JS\x20%1REGENERATE','regenerateAllBattleCore','isAnyoneChangingOpacity','Scene_Battle_selectPreviousCommand','isAlive','isForRandomBattleCore','ParseActorNotetags','_fauxAnimationSprites','HmPcr','makeUniqueNames','validTargets','mainSprite','isActing','MessageWait','LfJIM','lfZKS','alive\x20enemies','isSelected','removedBuffs','_cache','hTnfp','msZfy','_enemyWindow','createAnimationSprite','PreEndBattleJS','JjSYY','startGrow','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','svBattlerAnchorX','actorCommandAutoBattle','backColor','ActSeq_Movement_HomeReset','Defeat','updateTargetPosition','tVEqT','prepareCustomActionSequence','CmdIconAutoBattle','wcXMh','Window_BattleLog_update','ActSeq_Movement_Opacity','currentExt','innerWidth','isTeamBased','updateBattlerContainer','JvFjk','setCursorRect','izadx','canAddSkillCommand','SkewY','ActSeq_Mechanics_AnalyzeWeakness','<CUSTOM\x20ACTION\x20SEQUENCE>','clearElementChanges','XYYkR','canUseItemCommand','rgXhn','Sprite_Enemy_setHue','_updateClientArea','_baseTexture','isSpriteVisible','ActSeq_Animation_CastAnimation','BattleManager_inputtingAction','allowRandomSpeed','ChargeRate','startWeaponAnimation','EkHit','getInputButtonString','autoBattleAtStart','changeTurnOrderByCTB','onEscapeFailure','_createDamageContainer','AniDuration','finalizeScale','iQdnM','displayAddedStates','contains','indexOf','ICzef','changePaintOpacity','CfKdU','VisuMZ_2_BattleSystemBTB','waitForJump','Window_BattleLog_performDamage','bmPiY','performActionStart','updateShadowPosition','startAction','weapons','adjustPosition_ScaleToFit','All\x20Enemies','deselect','charging','ActSeq_Mechanics_HpMpTp','Game_Action_itemHit','jqJer','BattleLayout','updateCancel','Actor-%1-%2','CurrentTurn','clearBattleRefreshRequest','splice','RvZwL','4oNuPJU','repeats','createInnerPortrait','jTtzy','skillId','kSVRh','status','isSideButtonLayout','_tpbSceneChangeCacheActor','setupHpGaugeSprite','isBattleTest','isForFriend','_growEasing','processOk','cpINm','process_VisuMZ_BattleCore_PreBattleCommonEvent','onDatabaseLoaded','SvWeaponMass-%1-%2','isSkill','WTnRB','FIdhv','StyleON','sortDamageSprites','ksuWp','_svBattlerData','createEnemyWindow','ECmrH','JS\x20%1APPLY\x20%2','setBattleCameraOffset','createActorCommandWindowBattleCore','_autoBattle','clearForcedGameTroopSettingsBattleCore','isForAnyoneFocusFriends','resetResultSwitches','BattleManager_processAbort','LtPZj','_forActor','XHYVn','CalcEscapeRatioJS','PreApplyAsUserJS','processEnemyModeTouchBattleCore','OffsetX','HfyZy','commandEscape','ActSeq_Mechanics_TextPopup','sort','isSkillItemWindowsMiddle','EscapeFailureJS','VarianceFormulaJS','mainSpriteWidth','processRandomizedData','bWuHZ','ijhqG','Window_BattleLog_displayTpDamage','SGfvI','maxCols','Scene_Battle_startActorCommandSelection','GroupDigits','hpAffected','ActSeq_Motion_WaitMotionFrame','_dragonbonesSpriteContainer','stypeId','numRepeats','DEF','note','requestAnimation','Sprite_StateIcon_updateFrame','Sprite_Enemy_updateBossCollapse','createWeather','Actor','DefaultSoftScaler','DrfhH','CriticalColor','_skewEasing','angleDuration','StartTurnMsg','rQcNt','isWaiting','ActSeq_Target_NextTarget','_homeWholeDuration','autoBattleStyle','inHomePosition','kbcqZ','getDefeatedEnemies','StatusWindowAttachmentBackOffsetX','HelpItem','ActSeq_Mechanics_StbRemoveExcessActions','VisuMZ_3_ActSeqImpact','Scene_Battle_itemWindowRect','DTB','_angleEasing','commandRemember','BackColor','updatePointAnimations','BattleLog','Scene_ItemBase_applyItem','animationShouldMirror','_skewWholeDuration','autoMeleeSingleTargetActionSet','dead\x20enemies','Sprite_Enemy_update','actorCommandEscape','call','_injectAnimationSprite','iPjDy','round','process_VisuMZ_BattleCore_Failsafes','_speed','performReflection','_handlers','Game_Map_battleback1Name','atbInterrupt','createDamageContainer','sliceMax','SvMotionIdleSolo-%1-%2','ActSeq_BattleLog_Clear','VisuMZ_2_HorrorEffects','unshift','_buttonText','zQLpV','pop','die','svAnchorY','Sprite_Enemy_setBattler','BattleManager_makeActionOrders','loop','djZJH','RqQOk','BattleLogRectJS','ActSeq_Cutin_EndVisualCutinEffectType','visualHpGauge','loadBattleback1','_flashColor','isActiveTpb','ParseAllNotetags','_targetGrowX','ActSeq_Inject_AnimationStart','pApnK','HJyMs','_homeX','useDigitGrouping','createStateIconSprite','LHyFb','prepareBorderActor','NewPopupBottom','HpGaugeOffsetX','_growWholeDuration','jsScaleUp','alive\x20battlers','AsTarget','checkExtendTroopCompatibility','WaitForProjectile','isInputting','LUK','_enemy','_battleCoreBattleStartEvent','checkSubstitute','XbqrG','MwCWU','activate','ShowSubstitute','createString','displayMiss','all\x20actors','list','battleSys','AwiZN','processActorCommandCancelTPB','startMove','displayItemMessage','Game_Action_evalDamageFormula','ShowFailure','dvXrU','gZXxp','UDpTt','addChildToUiContainer','Window_BattleLog_popBaseLine','TPB','boxHeight','match','PopupOffsetY','Game_Enemy_setup','CheckVisibleBattleNotetags','AUDqn','anchorX','showHelpWindow','ShuffleArray','EscapeSuccessJS','startHomeMove','drawItemImage','multiTargetWindowRect','abs','left','ActSeq_Mechanics_ActiveChainInputDisable','PopupPosition','isFTB','ACTOR_OFFSET_Y','finishActorInput','ActSeq_Mechanics_BreakShieldReset','command283','GATvn','wOzmE','isForDeadFriend','ActSeq_Target_CurrentIndex','ActSeq_Motion_MotionType','flashColor','rABtg','isEnemy','Sprite_Battler_isMoving','ShowRemovedBuff','ALL_ENEMIES','ActSeq_BattleLog_PushBaseLine','forceSelect','isCancelled','kgmWk','updateBossCollapse','PreApply%1JS','_homeY','setSubject','battleJump','RQBIw','_targetFloatHeight','_waitMode','Window_ActorCommand_initialize','param','Elements','updateCollapse','BattleManager_setup','placeStateIcon','getItemDamageAmountLabelOriginal','FlashDuration','ActSeq_Mechanics_BtbGain','pqOrw','isForOneBattleCore','createTroopNote','displayBuffs','addImmortal','NbevB','map','loadSystem','_actions','cEriE','setItem','wait','_colorType','updateShadow','checkSceneBattleTransitionable','displayStartMessages','mrWVa','type','SzSeS','drawText','isAnyoneJumping','WaitForSpin','LGLRY','Window_BattleLog_displayFailure','qINmD','ckwUU','battlerShadowScaleX','statusWindowRectBorderStyle','EVAL','BattleManager_selectNextCommand','isConfused','targetObjects','portraitFlipVert','updateStateSpriteBattleCore','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','width','Window_BattleLog_performCounter','trim','currentSymbol','dJCBJ','updateMotionCount','getStypeIdWithName','setGuard','setupIconTextPopup','gjygC','ActSeq_Horror_Clear','clearMotion','VisuMZ_1_ElementStatusCore','autoBattle','createActionSequenceProjectile','-%1\x20MP','VisuMZ_2_BattleSystemPTB','_enemyIDs','tuDTX','egSPq','RvSZu','updateOpacity','_updateCursorFilterArea','setBlendColor','Sprite_Enemy_updateStateSprite','OJBal','731715DjiEMQ','isAnimationPlaying','startVisualCutin','VisuMZ_1_SkillsStatesCore','hide','DPKGZ','open','ActionCount','OreJj','refreshCursor','gainTp','231yCeCDw','clearActiveWeaponSlot','currentValue','_reflectionTarget','worldTransform','JS\x20BATTLE\x20VICTORY','setSTBExploited','ActSeq_Movement_Float','vertCells','Variable','Sprite_Battler_startMove','BattleSystemSTB','initVisibility','commandStyleCheck','_animationSprites','_surprise','XgVJY','forceWeaponAnimation','opacityStart','Parse_Notetags_Action','escape','ovmpP','requestDragonbonesAnimation','hitIndex','getColor','UofOH','updateInterpreter','drawLineText','join','onSkewEnd','endVisualCutin','process_VisuMZ_BattleCore_TraitObject_Notetags','canAttack','JgicQ','XbDiY','skewBattler','setTroopPage','OverallFormulaJS','RRVyM','lKHXt','commandAutoBattle','skewDuration','_forcedHomeX','forceMotion','%1StartTurnJS','otune','ENEMY_OFFSET_Y','btDkb','ActSeq_Inject_AnimationEnd','_pattern','attackMotions','displayRemovedStates','setupCriticalEffect','isGrowing','findTargetSprite','ActSeq_Mechanics_OnceParallel','Window_BattleEnemy_hide','QoL','getBattlePortraitOffsetX','refreshActorPortrait','NameAttachStateIcon','checkBattleEnd','applyGlobal','_homeEasing','ChantStyle','zuDnU','Spriteset_Battle_createBattleField','text','Game_Battler_onBattleStart','AttackAnimation','weDnh','isEscapeCommandEnabled','Window_BattleLog_performCollapse','MjTaz','OPAJt','_targetHomeX','gzKzq','arRedRate','Scene_Battle_commandFight','DefaultSoftCap','refreshBattlerMotions','isTriggered','dghVQ','EscapeSuccess','isAutoBattle','iSSld','isSceneChanging','user','setupBattlebackBattleCore','updateSkew','changeCtbChargeTime','mainSpriteHeight','BattleCore','_escapeRatio','PIBmm','Game_Battler_clearDamagePopup','mQxXx','NameOffsetY','commandStyle','createJS','BattleManager_checkSubstitute','jtsMY','setSvBattlerSprite','QvsiI','Scene_Battle_createCancelButton','anchorY','HelpSkillType','FocusX','isMVAnimation','ActSeq_Motion_FreezeMotionFrame','random','PostApplyAsUserJS','ShowAddedDebuff','updateForceAction','battleSkew','changeInputWindow','attack','opponentsUnit','createEnemyNames','battleCommandIcon','isTpb','NjqBz','KiJeQ','command357','scale','process_VisuMZ_BattleCore_Notetags','needsSelection','onFloatEnd','isForOpponentBattleCore','BattlebackScale','version','ANtCl','Scene_Battle_onActorOk','PreDamage%1JS','move','smTsI','CreateActionSequenceTargets','extraPositionY','xwHgK','alive\x20battlers\x20not\x20target','_forcing','terminate','Sprite_Actor_createStateSprite','getSkillIdWithName','skillWindowRect','VisuMZ_2_DragonbonesUnion','contentsOpacity','updateAction','alterActionCostPTB','_eventId','skillTypes','isAnyoneInjectAniPrepping','onHomeMoveEnd','addGuardCommand','CastPhysical','process_VisuMZ_BattleCore_Action_Notetags','getAttackMotionSlot','StatusWindowAttachmentBackOffsetY','AddOption','mainFontSize','dOWwd','VisuMZ_1_MainMenuCore','statusWindowRect','applyVariance','_targetOpacity','RkPeW','Game_Party_removeActor','StyleName','reduce','parallaxScrollY','NameAlwaysSelectOnly','attackAnimationId1','BindCommonEventKeysForGroup','setHome','Name','PPIRc','startJump','checkTpbInputOpen','Style','battleMove','_action','BattleStartEvent','gradientFillRect','yDEdh','_battlerContainer','_endBattle','compareEnemySprite','alterChange','gWsux','pXiHY','parameters','_targetAngle','setEnemyWindowMode','Mute','ActSeq_Movement_BattleStep','duration','VisuMZ_2_BattleSystemCTB','Luqbw','fhzjP','checkAutoCustomActionSequenceNotetagEffect','removeBuffsAuto','SvMotionIdleMass-%1-%2','Window_BattleLog_performMiss','apply','destroy','AutoBattleMsg','iterateBattler','fvJAy','ActSeq_Mechanics_StbExtraAction','zOVqE','_homeDuration','adjustPosition_ScaleUp','callUpdateHelp','ForceExploiter','QVMfm','portraitHue','YfGOw','Game_Action_isForAliveFriend','performMagicEvasion','IzVht','canGuard','checkShowHideBattleNotetags','mXgsE','679253KHLxRH','isBattleFlipped','PostApplyJS','LHLEh','_displayBattleCoreTransitionErrorMsg','_animation','onEnemyCancel','ParseSkillNotetags','thrust','XGMYi','Window_ActorCommand_setup','alterCost','_skillIDs','callOkHandler','Oshrd','Game_BattlerBase_canAttack','processForcedAction','pages','ActSeq_Weapon_SetActiveWeapon','origin','motionSpeed','GTCtk','movement','ResetOffset','smoothness','ActSeq_Motion_RefreshMotion','angle','ENEMY_OFFSET_X','_jumpDuration','_spriteset','getItemDamageAmountTextOriginal','makeDamageValue','isCurrentItemEnabled','zFOEP','SvWeaponSolo-%1-%2','RHhek','CriticalDmgFlat','CriticalHitRateJS','custom','skillItemWindowRectMiddle','fittingHeight','ShowWeapon','VDOeG','ActSeq_ChangeAngle','sideview_ui','friendsUnit','actorId','ARRAYSTRUCT','_battlerKeyCache','GRID\x20MOVE','nextActiveWeaponSlot','evaded','FlinchDuration','jlqjF','clearFreezeMotion','StepDuration','MAXHP','parseForcedGameTroopSettingsBattleCore','Scene_Battle_terminate','partyCommandWindowRectXPStyle','WaitForAngle','critical','Sprite_Battler_updateMain','textColor','autoBattleStart','MotionIdle','_updateFilterArea','HzSVR','abFEl','isETB','ActSeq_Movement_FaceTarget','eFhZs','ActSeq_Movement_FacePoint','EFRrP','ByRet','_shadowSprite','FlinchDistanceY','YrqHk','randomTargets','ParseArmorNotetags','invokeMagicReflection','HkVMF','Scene_Battle_updateBattleProcess','createAttachmentSprites','displayCritical','blockWidth','addGeneralOptions','_preBattleCommonEvent','special','constructor','ZbjWB','alterBreakShield','guardSkillId','Text','PopupDuration','fontSize','_forcedHomeY','addAutoBattleCommands','GetActionSequenceSpecialTarget','setBattleImpactTimeScale','ShowPortraitsBorderStyle','setVisibleUI','freezeFrame','BG_TYPE','Scene_Battle_startPartyCommandSelection','KPPFZ','show','iconIndex','ActSeq_Mechanics_PtbConvert','gwQhR','emerge','makeBattleCommand','Uqigj','setText','kfbql','asQFs','BgWEv','onTurnEnd','updateShadowBattleCore','Scene_Battle_createEnemyWindow','AIeGU','applyDamageCaps','_frame','font','lukEffectRate','ZfdJg','KpBHj','updateMain','visible','Reveal','attackTimesAdd','spell','buffRemove','putActiveBattlerOnTop','dying','PostEndTurnJS','createMainSprite','createMultiTargetWindow','XZXxU'];_0x4741=function(){return _0x38760e;};return _0x4741();}function Sprite_SvEnemy(){const _0x74dd4=_0x164fcd;this[_0x74dd4(0x1ec)](...arguments);}function _0x341e(_0x567e66,_0x13fd86){const _0x4741c4=_0x4741();return _0x341e=function(_0x341e67,_0x226dc0){_0x341e67=_0x341e67-0x118;let _0x2ccdfc=_0x4741c4[_0x341e67];return _0x2ccdfc;},_0x341e(_0x567e66,_0x13fd86);}Sprite_SvEnemy[_0x164fcd(0x2bf)]=Object[_0x164fcd(0x5fc)](Sprite_Actor[_0x164fcd(0x2bf)]),Sprite_SvEnemy[_0x164fcd(0x2bf)][_0x164fcd(0xc12)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype'][_0x164fcd(0x1ec)]=function(_0x3ff8d9){const _0x487084=_0x164fcd;Sprite_Actor[_0x487084(0x2bf)]['initialize'][_0x487084(0xa10)](this,_0x3ff8d9),this[_0x487084(0xb56)]['x']=-0x1,this[_0x487084(0xc81)][_0x487084(0xb56)]['x']=-0x1;},Sprite_SvEnemy[_0x164fcd(0x2bf)][_0x164fcd(0xcd4)]=function(){},Sprite_SvEnemy[_0x164fcd(0x2bf)]['moveToStartPosition']=function(){},Sprite_SvEnemy[_0x164fcd(0x2bf)]['setActorHome']=function(_0x395051){},Sprite_SvEnemy[_0x164fcd(0x2bf)][_0x164fcd(0xa9f)]=function(){},Sprite_SvEnemy[_0x164fcd(0x2bf)][_0x164fcd(0x999)]=function(){},Sprite_SvEnemy[_0x164fcd(0x2bf)][_0x164fcd(0x340)]=function(){const _0xaa7b87=_0x164fcd;this[_0xaa7b87(0xc81)][_0xaa7b87(0xc39)]=![];},Sprite_SvEnemy[_0x164fcd(0x2bf)][_0x164fcd(0x238)]=function(){const _0x33858b=_0x164fcd;Sprite_Battler[_0x33858b(0x2bf)][_0x33858b(0x238)][_0x33858b(0xa10)](this);const _0x40bd74=this['_actor'][_0x33858b(0x4f5)]();this[_0x33858b(0x849)]!==_0x40bd74&&(_0x33858b(0xb54)==='DTvXk'?_0x303c6d['hide']():(this[_0x33858b(0x849)]=_0x40bd74,this['_mainSprite'][_0x33858b(0xcf5)]=ImageManager[_0x33858b(0x36b)](_0x40bd74))),this[_0x33858b(0x35c)]&&this[_0x33858b(0x35c)][_0x33858b(0xcf5)]&&this[_0x33858b(0x7f9)]&&(this[_0x33858b(0x35c)]['bitmap'][_0x33858b(0x225)]!==this[_0x33858b(0x7f9)][_0x33858b(0xcdf)]()&&(this[_0x33858b(0x35c)]['bitmap'][_0x33858b(0x225)]=this[_0x33858b(0x7f9)][_0x33858b(0xcdf)]()));},Sprite_SvEnemy[_0x164fcd(0x2bf)][_0x164fcd(0x7a0)]=function(){},Sprite_SvEnemy[_0x164fcd(0x2bf)][_0x164fcd(0xa52)]=function(_0x3fc0a6,_0x54faa2,_0x40d268){const _0x276f25=_0x164fcd;if(this[_0x276f25(0xc44)])this[_0x276f25(0xc44)][_0x276f25(0xa52)](_0x3fc0a6,_0x54faa2,_0x40d268);},Sprite_SvEnemy[_0x164fcd(0x2bf)]['refreshMotion']=function(){const _0x50a0ae=_0x164fcd,_0xe50973=this['_actor'];if(_0xe50973){if(_0x50a0ae(0x243)!=='UbDCC'){const _0x33957d=_0xe50973[_0x50a0ae(0x5e4)]();if(_0xe50973[_0x50a0ae(0xa42)]()||_0xe50973[_0x50a0ae(0x951)]())_0x50a0ae(0xce0)===_0x50a0ae(0x436)?(_0x5c0729[_0x50a0ae(0xb36)][_0x50a0ae(0x540)][_0x50a0ae(0xa10)](this,_0x53b653),this[_0x50a0ae(0x227)]()):this[_0x50a0ae(0x493)](_0x50a0ae(0x8cd));else{if(_0x33957d===0x3)_0x50a0ae(0x727)!=='jxXDm'?this[_0x50a0ae(0x958)][_0x50a0ae(0xa24)]=_0x491180[_0x50a0ae(0x2bf)][_0x50a0ae(0x16c)]['call'](this):this['startMotion'](_0x50a0ae(0x822));else{if(_0x33957d===0x2)'UbYJO'===_0x50a0ae(0x639)?this['startMotion']('sleep'):(_0x283661['prototype']['resetFontSettings'][_0x50a0ae(0xa10)](this),this[_0x50a0ae(0x382)][_0x50a0ae(0xc18)]=_0x598d34[_0x50a0ae(0xb36)]['Settings'][_0x50a0ae(0x337)][_0x50a0ae(0xc47)]);else{if(_0xe50973[_0x50a0ae(0x6b4)]())this['startMotion'](_0x50a0ae(0x67d));else{if(_0xe50973['isGuard']()||_0xe50973['isGuardWaiting']())this['startMotion'](_0x50a0ae(0x7a7));else{if(_0x33957d===0x1){if(_0x50a0ae(0x6c0)===_0x50a0ae(0x6c0))this[_0x50a0ae(0x493)](_0x50a0ae(0x84f));else{if(this[_0x50a0ae(0x1f5)]()){let _0x1fd1df=_0x3a3343[_0x50a0ae(0x1f1)];_0x5c3fa2/=_0x1fd1df['length'],this[_0x50a0ae(0x359)]()&&(_0x3b25a5*=this[_0x50a0ae(0x724)]()[_0x50a0ae(0xc3b)]()+0x1),_0x6d981d=_0x5d89c1>0x0?_0x96d590['ceil'](_0xf549b2):_0x4a5df1[_0x50a0ae(0x923)](_0x16457e);}return _0x310601;}}else{if(_0xe50973[_0x50a0ae(0x547)]()){if('GIuYO'===_0x50a0ae(0x1ed)){if(!_0x38bcc1[_0x50a0ae(0x709)]())return;const _0x15c89d=this[_0x50a0ae(0x921)]();if(!_0x15c89d)return;_0x279c3c=_0x458190||0x0;if(_0x5652b9>0x0){if(_0x15c89d['_baseX']>_0x2c1e8f)_0x56ee7d+=_0x15c89d[_0x50a0ae(0xab5)]/0x2+_0x18d085;if(_0x15c89d['_baseX']<_0x19d7a0)_0x508617-=_0x15c89d[_0x50a0ae(0xab5)]/0x2+_0x353ccc;}if(_0x1447aa)this[_0x50a0ae(0x4b9)](_0x45a3b3,_0x597893,![]);_0x15c89d[_0x50a0ae(0xa66)](_0x27aba5,_0x5a0b8c,_0x3fc0d6,_0x1c725b),this[_0x50a0ae(0xb04)]=_0x45e1d2,this[_0x50a0ae(0xc19)]=_0xbbe7d7;}else this[_0x50a0ae(0x493)](_0x50a0ae(0xc3f));}else _0xe50973[_0x50a0ae(0x18f)]()?this[_0x50a0ae(0x493)](_0x50a0ae(0x8cd)):this[_0x50a0ae(0x493)](_0xe50973[_0x50a0ae(0xcdd)]()['motionIdle']||_0x50a0ae(0x8cd));}}}}}}}else _0xed2da8?(this[_0x50a0ae(0x919)]['x']=(_0x1d9976[_0x50a0ae(0xab5)]-_0x299722[_0x50a0ae(0x273)])/0x2,this[_0x50a0ae(0x919)]['y']=(_0x2dfe87[_0x50a0ae(0x5e0)]-_0x4076a3[_0x50a0ae(0xa5c)])/0x2):(this[_0x50a0ae(0x919)]['x']=_0x5a460a[_0x50a0ae(0xab5)]*0xa,this[_0x50a0ae(0x919)]['y']=_0x2dc111[_0x50a0ae(0x5e0)]*0xa);}},Sprite_SvEnemy[_0x164fcd(0x2bf)][_0x164fcd(0x9fb)]=function(){const _0xc9684a=_0x164fcd;if(this[_0xc9684a(0xc44)])return this[_0xc9684a(0xc44)][_0xc9684a(0x20a)]===0x0&&this[_0xc9684a(0xc44)][_0xc9684a(0x4db)]===0x0;else{if(_0xc9684a(0x85f)!==_0xc9684a(0x85f))this[_0xc9684a(0x412)]=_0x2e1a5b;else return!![];}},Sprite_SvEnemy['prototype'][_0x164fcd(0x622)]=function(){},VisuMZ[_0x164fcd(0xb36)]['Sprite_Animation_targetSpritePosition']=Sprite_Animation[_0x164fcd(0x2bf)][_0x164fcd(0x88a)],Sprite_Animation[_0x164fcd(0x2bf)][_0x164fcd(0x88a)]=function(_0x56c60f){const _0x3557c4=_0x164fcd;return _0x56c60f[_0x3557c4(0x4e7)]?this[_0x3557c4(0x8f2)](_0x56c60f):VisuMZ[_0x3557c4(0xb36)][_0x3557c4(0x2a6)]['call'](this,_0x56c60f);},Sprite_Animation[_0x164fcd(0x2bf)]['targetDistortionSpritePosition']=function(_0x392b44){const _0x2835a0=_0x164fcd;let _0x18b9e3=_0x392b44['x'],_0x326ca4=_0x392b44['y'],_0xe2945d=_0x392b44[_0x2835a0(0x5e0)],_0x232960=_0x392b44[_0x2835a0(0x4e7)][_0x2835a0(0xb56)]['y'];_0x392b44['x']=_0x392b44['_baseX']+_0x392b44['extraPositionX'](),_0x392b44['y']=_0x392b44[_0x2835a0(0x3db)]+_0x392b44[_0x2835a0(0xb63)](),_0x392b44[_0x2835a0(0x5e0)]*=_0x232960;let _0x20f350=VisuMZ[_0x2835a0(0xb36)]['Sprite_Animation_targetSpritePosition'][_0x2835a0(0xa10)](this,_0x392b44);return _0x392b44['x']=_0x18b9e3,_0x392b44['y']=_0x326ca4,_0x392b44[_0x2835a0(0x5e0)]=_0xe2945d,_0x20f350;},VisuMZ[_0x164fcd(0xb36)]['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV[_0x164fcd(0x2bf)][_0x164fcd(0x682)],Sprite_AnimationMV[_0x164fcd(0x2bf)][_0x164fcd(0x682)]=function(){const _0xaad6ad=_0x164fcd;VisuMZ[_0xaad6ad(0xb36)][_0xaad6ad(0x438)][_0xaad6ad(0xa10)](this);if(!SceneManager[_0xaad6ad(0x53f)]())return;if(this[_0xaad6ad(0xbbe)][_0xaad6ad(0x12f)]===0x3){if(_0xaad6ad(0x68b)===_0xaad6ad(0x2af))for(const _0x36f5dd of _0x5e125e){const _0x2467ae=_0x3d5ede[0x0]['format'](_0x36f5dd[0x0]),_0x301b1f=_0x49feff[0x1][_0xaad6ad(0x272)](_0x36f5dd[0x1]),_0x37b3ed=new _0x554e9f(_0x3425c4[_0xaad6ad(0x272)](_0x301b1f),'i');_0x261fb9[_0x2467ae]=_0x37b3ed;}else this['x']=Math[_0xaad6ad(0xa13)](Graphics[_0xaad6ad(0x273)]/0x2),this['y']=Math['round'](Graphics[_0xaad6ad(0xa5c)]/0x2);}else{if(this['battleStatusSprite'])return;}},Sprite_Damage['prototype'][_0x164fcd(0x31c)]=function(_0x262bc1){const _0x5a5653=_0x164fcd,_0xd08b05=_0x262bc1[_0x5a5653(0x859)]()||_0x262bc1[_0x5a5653(0xc9e)]();if(_0xd08b05[_0x5a5653(0x691)]||_0xd08b05[_0x5a5653(0xbec)])this[_0x5a5653(0xa9e)]=0x0,this[_0x5a5653(0xcff)]();else{if(_0xd08b05['hpAffected']){if(_0x5a5653(0x50f)!=='GJIsl'){if(_0x226100['isTpb']()&&this['_tpbState']===_0x5a5653(0x53c))return this['chantStyle']()?this[_0x5a5653(0x1d2)]()&&this['currentAction']()[_0x5a5653(0x5e9)]()&&!this[_0x5a5653(0x1d2)]()[_0x5a5653(0x33d)]():this['currentAction']()&&this['currentAction']()[_0x5a5653(0x5e9)]()&&!this[_0x5a5653(0x1d2)]()[_0x5a5653(0x47f)]();return![];}else this[_0x5a5653(0xa9e)]=_0xd08b05[_0x5a5653(0xc89)]>=0x0?0x0:0x1,this[_0x5a5653(0x14b)](_0xd08b05[_0x5a5653(0xc89)]);}else _0x262bc1[_0x5a5653(0x949)]()&&_0xd08b05['mpDamage']!==0x0&&(_0x5a5653(0x26e)==='BjJmM'?_0x31a483['actionBattleCoreJS'](_0x5a5653(0x495)):(this[_0x5a5653(0xa9e)]=_0xd08b05[_0x5a5653(0x14a)]>=0x0?0x2:0x3,this['createDigits'](_0xd08b05[_0x5a5653(0x14a)])));}_0xd08b05[_0x5a5653(0xbf6)]&&this['setupCriticalEffect']();},Sprite_Damage[_0x164fcd(0x2bf)][_0x164fcd(0xd03)]=function(_0x2d62c8){},Sprite_Damage['prototype'][_0x164fcd(0x14b)]=function(_0x5552e0){const _0x3c7af4=_0x164fcd;let _0x545fd7=this['createString'](_0x5552e0);const _0x31cd22=this[_0x3c7af4(0xc18)](),_0x5ac475=Math[_0x3c7af4(0x923)](_0x31cd22*0.75);for(let _0x3d413e=0x0;_0x3d413e<_0x545fd7[_0x3c7af4(0xd04)];_0x3d413e++){if(_0x3c7af4(0x3a1)!==_0x3c7af4(0x3a1))_0x251885['snapForBackground']();else{const _0x357ace=this['createChildSprite'](_0x5ac475,_0x31cd22);_0x357ace[_0x3c7af4(0xcf5)][_0x3c7af4(0xaa5)](_0x545fd7[_0x3d413e],0x0,0x0,_0x5ac475,_0x31cd22,_0x3c7af4(0x37f)),_0x357ace['x']=(_0x3d413e-(_0x545fd7[_0x3c7af4(0xd04)]-0x1)/0x2)*_0x5ac475,_0x357ace['dy']=-_0x3d413e;}}},Sprite_Damage[_0x164fcd(0x2bf)][_0x164fcd(0xa4b)]=function(_0x5546c6){const _0x54467e=_0x164fcd;let _0x2351d9=Math['abs'](_0x5546c6)['toString']();this[_0x54467e(0xa36)]()&&('gwPTC'===_0x54467e(0x94d)?(_0x3b34da[_0x54467e(0xb36)]['Window_Options_addGeneralOptions'][_0x54467e(0xa10)](this),this[_0x54467e(0xc1a)](),this[_0x54467e(0x460)]()):_0x2351d9=VisuMZ['GroupDigits'](_0x2351d9));const _0x86534c=VisuMZ[_0x54467e(0xb36)][_0x54467e(0x1de)][_0x54467e(0x1ce)];let _0x9ea1bb='',_0x5dfbdd='';switch(this[_0x54467e(0xa9e)]){case 0x0:_0x9ea1bb=_0x86534c[_0x54467e(0x2bc)]||_0x54467e(0x3d9),_0x5dfbdd=TextManager['hp'];if(_0x5546c6===0x0)_0x9ea1bb='%1';break;case 0x1:_0x9ea1bb=_0x86534c['hpHealingFmt']||_0x54467e(0xc9c),_0x5dfbdd=TextManager['hp'];break;case 0x2:_0x9ea1bb=_0x86534c[_0x54467e(0x2ea)]||_0x54467e(0xac4),_0x5dfbdd=TextManager['mp'];break;case 0x3:_0x9ea1bb=_0x86534c[_0x54467e(0x2e0)]||_0x54467e(0x63c),_0x5dfbdd=TextManager['mp'];break;}return _0x9ea1bb['format'](_0x2351d9,_0x5dfbdd)[_0x54467e(0xab7)]();},Sprite_Damage[_0x164fcd(0x2bf)]['useDigitGrouping']=function(){const _0x2f1e03=_0x164fcd;if(Imported[_0x2f1e03(0x818)])return VisuMZ[_0x2f1e03(0x686)][_0x2f1e03(0x1de)][_0x2f1e03(0xb13)][_0x2f1e03(0x220)];else{if('lXfLk'===_0x2f1e03(0x308))return![];else{const _0x1d1fc6=_0x55e232(_0x360b9f['$1']);this['addSkillTypeCommand'](_0x1d1fc6);}}},Sprite_Damage[_0x164fcd(0x2bf)][_0x164fcd(0xb0e)]=function(){const _0x4fc49b=_0x164fcd,_0x24141b=VisuMZ['BattleCore'][_0x4fc49b(0x1de)]['Damage'];this[_0x4fc49b(0xa2e)]=_0x24141b[_0x4fc49b(0x9f2)][_0x4fc49b(0x725)](0x0),this[_0x4fc49b(0x7ae)]=_0x24141b[_0x4fc49b(0x5ed)];},Sprite_Damage[_0x164fcd(0x2bf)][_0x164fcd(0x7ab)]=function(_0x1dd9fe,_0x48e987){const _0x4746d8=_0x164fcd;this['_flashColor']=_0x48e987[_0x4746d8(0xa77)]||[0x0,0x0,0x0,0x0],this[_0x4746d8(0xa2e)]=JsonEx[_0x4746d8(0x835)](this[_0x4746d8(0xa2e)]),this['_flashDuration']=_0x48e987[_0x4746d8(0x39b)]||0x0;const _0x11105f=this[_0x4746d8(0xc18)](),_0x4aa831=Math[_0x4746d8(0x923)](_0x11105f*0x1e),_0x4f99c7=this[_0x4746d8(0x931)](_0x4aa831,_0x11105f);_0x4f99c7[_0x4746d8(0xcf5)]['textColor']=ColorManager[_0x4746d8(0xaf2)](_0x48e987[_0x4746d8(0xbf8)]),_0x4f99c7[_0x4746d8(0xcf5)][_0x4746d8(0xaa5)](_0x1dd9fe,0x0,0x0,_0x4aa831,_0x11105f,_0x4746d8(0x37f)),_0x4f99c7['dy']=0x0;},Sprite_Damage[_0x164fcd(0x2bf)][_0x164fcd(0xabd)]=function(_0x42ff6e,_0x383525,_0x1e881c){const _0x667f6b=_0x164fcd,_0x56f379=Math[_0x667f6b(0xc92)](this[_0x667f6b(0xc18)](),ImageManager[_0x667f6b(0x66d)]),_0x5e2135=Math[_0x667f6b(0x923)](_0x56f379*0x1e),_0x1138ce=this[_0x667f6b(0x931)](_0x5e2135,_0x56f379),_0x4a712f=ImageManager[_0x667f6b(0x7b8)]/0x2,_0x1deff3=_0x1138ce[_0x667f6b(0xcf5)][_0x667f6b(0x377)](_0x383525+'\x20');_0x1138ce[_0x667f6b(0xcf5)]['textColor']=ColorManager[_0x667f6b(0xaf2)](_0x1e881c[_0x667f6b(0xbf8)]),_0x1138ce[_0x667f6b(0xcf5)][_0x667f6b(0xaa5)](_0x383525,_0x4a712f,0x0,_0x5e2135-_0x4a712f,_0x56f379,_0x667f6b(0x37f));const _0x997fab=Math[_0x667f6b(0xa13)]((_0x56f379-ImageManager[_0x667f6b(0x66d)])/0x2),_0x48138b=_0x5e2135/0x2-ImageManager[_0x667f6b(0x7b8)]-_0x1deff3/0x2+_0x4a712f/0x2,_0x258fa4=ImageManager['loadSystem']('IconSet'),_0x282eaf=ImageManager[_0x667f6b(0x7b8)],_0x8202ff=ImageManager[_0x667f6b(0x66d)],_0x3d733b=_0x42ff6e%0x10*_0x282eaf,_0x74f77b=Math['floor'](_0x42ff6e/0x10)*_0x8202ff;_0x1138ce[_0x667f6b(0xcf5)][_0x667f6b(0x3bc)](_0x258fa4,_0x3d733b,_0x74f77b,_0x282eaf,_0x8202ff,_0x48138b,_0x997fab),this[_0x667f6b(0xa2e)]=_0x1e881c[_0x667f6b(0xa77)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x667f6b(0x835)](this[_0x667f6b(0xa2e)]),this[_0x667f6b(0x7ae)]=_0x1e881c[_0x667f6b(0x39b)]||0x0,_0x1138ce['dy']=0x0;},VisuMZ[_0x164fcd(0xb36)]['Sprite_Damage_createChildSprite']=Sprite_Damage[_0x164fcd(0x2bf)][_0x164fcd(0x931)],Sprite_Damage['prototype'][_0x164fcd(0x931)]=function(_0x2b367b,_0x252544){const _0x5a8a2f=_0x164fcd;return _0x252544=Math['round'](_0x252544*1.2),VisuMZ['BattleCore']['Sprite_Damage_createChildSprite'][_0x5a8a2f(0xa10)](this,_0x2b367b,_0x252544);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x9ec)]=Sprite_StateIcon[_0x164fcd(0x2bf)]['updateFrame'],Sprite_StateIcon[_0x164fcd(0x2bf)][_0x164fcd(0x75e)]=function(){const _0x2a1bc4=_0x164fcd;VisuMZ[_0x2a1bc4(0xb36)][_0x2a1bc4(0x9ec)][_0x2a1bc4(0xa10)](this),this['opacity']=this[_0x2a1bc4(0xc4b)]>0x0?0xff:0x0;},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x782)]=Sprite_Weapon[_0x164fcd(0x2bf)][_0x164fcd(0x228)],Sprite_Weapon[_0x164fcd(0x2bf)]['loadBitmap']=function(){const _0x22ff83=_0x164fcd;VisuMZ[_0x22ff83(0xb36)][_0x22ff83(0x782)][_0x22ff83(0xa10)](this),this[_0x22ff83(0xcf5)]&&(this['bitmap']['smooth']=VisuMZ['BattleCore'][_0x22ff83(0x1de)][_0x22ff83(0x9ef)][_0x22ff83(0x6d2)]);},VisuMZ['BattleCore'][_0x164fcd(0x775)]=Sprite_Gauge['prototype']['smoothness'],Sprite_Gauge[_0x164fcd(0x2bf)][_0x164fcd(0xbd1)]=function(){const _0x146701=_0x164fcd;if(this[_0x146701(0x903)]!==_0x146701(0x6b1))return VisuMZ[_0x146701(0xb36)]['Settings'][_0x146701(0x83d)][_0x146701(0x98b)]??0x14;else{if(_0x146701(0x595)!==_0x146701(0x160))return VisuMZ[_0x146701(0xb36)][_0x146701(0x775)][_0x146701(0xa10)](this);else this[_0x146701(0xc54)]=![];}};function Sprite_HpGauge(){const _0x28d0ed=_0x164fcd;this[_0x28d0ed(0x1ec)](...arguments);}Sprite_HpGauge[_0x164fcd(0x2bf)]=Object[_0x164fcd(0x5fc)](Sprite_Gauge[_0x164fcd(0x2bf)]),Sprite_HpGauge[_0x164fcd(0x2bf)]['constructor']=Sprite_HpGauge,Sprite_HpGauge[_0x164fcd(0x2bf)][_0x164fcd(0x1ec)]=function(){const _0x10a667=_0x164fcd;Sprite_Gauge[_0x10a667(0x2bf)][_0x10a667(0x1ec)][_0x10a667(0xa10)](this);},Sprite_HpGauge[_0x164fcd(0x2bf)][_0x164fcd(0x45f)]=function(){return 0x0;},Sprite_HpGauge[_0x164fcd(0x2bf)]['redraw']=function(){const _0x7995bc=_0x164fcd;this[_0x7995bc(0xcf5)][_0x7995bc(0x7bf)]();const _0x59b58c=this[_0x7995bc(0xadc)]();!isNaN(_0x59b58c)&&(_0x7995bc(0x35e)!==_0x7995bc(0x35e)?this[_0x7995bc(0xa15)]=_0x2d9df0[_0x7995bc(0x939)]:this[_0x7995bc(0x5db)]());};function Sprite_EnemyName(){const _0x35236a=_0x164fcd;this[_0x35236a(0x1ec)](...arguments);}Sprite_EnemyName['prototype']=Object[_0x164fcd(0x5fc)](Sprite_Name[_0x164fcd(0x2bf)]),Sprite_EnemyName[_0x164fcd(0x2bf)]['constructor']=Sprite_EnemyName,Sprite_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x1ec)]=function(){const _0x5458e5=_0x164fcd;Sprite_Name[_0x5458e5(0x2bf)]['initialize']['call'](this),this['createAttachedSprites']();},Sprite_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x1be)]=function(){const _0x3b32d0=_0x164fcd;Sprite_Name[_0x3b32d0(0x2bf)][_0x3b32d0(0x1be)][_0x3b32d0(0xa10)](this),this[_0x3b32d0(0x4c4)]=0x0,this[_0x3b32d0(0xce3)]=null,this[_0x3b32d0(0x70f)]['x']=0.5,this[_0x3b32d0(0x70f)]['y']=0x0;},Sprite_EnemyName['prototype']['createAttachedSprites']=function(){const _0x4957f9=_0x164fcd;if(VisuMZ[_0x4957f9(0xb36)]['Settings'][_0x4957f9(0x337)]['NameAttachStateIcon']){if(_0x4957f9(0x229)!==_0x4957f9(0x229)){if(this[_0x4957f9(0x15f)]()<=0x0)return;}else this[_0x4957f9(0x820)]=new Sprite_StateIcon(),this[_0x4957f9(0x23a)](this[_0x4957f9(0x820)]);}},Sprite_EnemyName['prototype'][_0x164fcd(0x3ed)]=function(){return Graphics['boxWidth'];},Sprite_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x323)]=function(){const _0x3609bc=_0x164fcd;return this[_0x3609bc(0x67b)]=this[_0x3609bc(0x67b)]||Window_Base[_0x3609bc(0x2bf)]['lineHeight']()||0x24,this[_0x3609bc(0x67b)]*0x4;},Sprite_EnemyName[_0x164fcd(0x2bf)]['fontSize']=function(){const _0xac5f51=_0x164fcd;return VisuMZ[_0xac5f51(0xb36)][_0xac5f51(0x1de)][_0xac5f51(0x337)][_0xac5f51(0xc47)]||$gameSystem[_0xac5f51(0xb79)]();},Sprite_EnemyName['prototype']['linkSprite']=function(_0x4de2e8){const _0x56fee1=_0x164fcd;this[_0x56fee1(0xce3)]=_0x4de2e8;},Sprite_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x71d)]=function(){const _0x3a527b=_0x164fcd;Sprite_Name[_0x3a527b(0x2bf)][_0x3a527b(0x71d)][_0x3a527b(0xa10)](this),this[_0x3a527b(0x940)](),this[_0x3a527b(0x682)](),this[_0x3a527b(0xcde)](),this[_0x3a527b(0xaca)]();},Sprite_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x606)]=function(){const _0x1b24ed=_0x164fcd;this[_0x1b24ed(0x7bc)]=undefined;const _0x32f73e=this['name'](),_0x4e20a6=this[_0x1b24ed(0x3ed)](),_0x2aad61=Window_Base[_0x1b24ed(0x2bf)]['lineHeight']();this['setupFont'](),this[_0x1b24ed(0xcf5)][_0x1b24ed(0x7bf)](),this[_0x1b24ed(0xcf5)][_0x1b24ed(0xaa5)](_0x32f73e,0x0,0x0,_0x4e20a6,_0x2aad61,_0x1b24ed(0x37f));},Sprite_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x940)]=function(){const _0x53a01a=_0x164fcd;if(!this['_linkedSprite'])return;this[_0x53a01a(0x7f9)]!==this['_linkedSprite'][_0x53a01a(0x7f9)]&&this[_0x53a01a(0xd03)](this[_0x53a01a(0xce3)][_0x53a01a(0x7f9)]);},Sprite_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x682)]=function(){const _0x2f0d63=_0x164fcd;if(!this[_0x2f0d63(0xce3)])return;this[_0x2f0d63(0x67b)]=this[_0x2f0d63(0x67b)]||Window_Base[_0x2f0d63(0x2bf)][_0x2f0d63(0x82c)](),this['x']=Math[_0x2f0d63(0xa13)](this[_0x2f0d63(0xce3)][_0x2f0d63(0x6ab)]),this['y']=Math[_0x2f0d63(0xa13)](this[_0x2f0d63(0xce3)][_0x2f0d63(0x3db)]-this['_lineHeight']*0.5);const _0x4c3f44=VisuMZ[_0x2f0d63(0xb36)]['Settings'][_0x2f0d63(0x337)];this['x']+=Math[_0x2f0d63(0xa13)](_0x4c3f44[_0x2f0d63(0xcf9)]||0x0),this['y']+=Math[_0x2f0d63(0xa13)](_0x4c3f44[_0x2f0d63(0xb3b)]||0x0);},Sprite_EnemyName['prototype'][_0x164fcd(0xcde)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x164fcd(0x2bf)]['updateStateIconSprite']=function(){const _0x134202=_0x164fcd;if(!this['_stateIconSprite'])return;if(this[_0x134202(0x7f9)]!==this['_stateIconSprite'][_0x134202(0x7f9)]){if(_0x134202(0xc59)!==_0x134202(0xc59)){const _0x45ae52=_0x480582(_0x440b63['$1']);_0x3590f2[_0x134202(0x867)]([this],_0x45ae52,![],![]);}else this['_stateIconSprite'][_0x134202(0xd03)](this[_0x134202(0x7f9)]);}const _0x496225=this[_0x134202(0x59f)]();this['_lineHeight']=this[_0x134202(0x67b)]||Window_Base[_0x134202(0x2bf)][_0x134202(0x82c)](),this[_0x134202(0x820)]['x']=Math[_0x134202(0xa13)]((_0x496225+ImageManager[_0x134202(0x7b8)])/0x2)+0x8,this['_stateIconSprite']['y']=this[_0x134202(0x67b)]/0x2;const _0x14008c=VisuMZ[_0x134202(0xb36)][_0x134202(0x1de)][_0x134202(0x337)];this[_0x134202(0x820)]['x']+=_0x14008c['AttachStateOffsetX']||0x0,this[_0x134202(0x820)]['y']+=_0x14008c[_0x134202(0x311)]||0x0;},Sprite_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0xaca)]=function(){const _0x4bfaa1=_0x164fcd,_0x335ef3=this['visibilityState']();if(_0x335ef3&&this[_0x4bfaa1(0x4c4)]<0xff)this[_0x4bfaa1(0x4c4)]+=0x10;else!_0x335ef3&&this[_0x4bfaa1(0x4c4)]>0x0&&(this[_0x4bfaa1(0x4c4)]-=0x10);},Sprite_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x5ee)]=function(){const _0x9945ca=_0x164fcd;if(this[_0x9945ca(0x780)]()){if(_0x9945ca(0x517)!=='BZKYn'){var _0x2679f0,_0x19f465,_0x500979;for(_0x500979=_0x3ba3a1['length']-0x1;_0x500979>0x0;_0x500979--){_0x2679f0=_0xdf9dee[_0x9945ca(0x923)](_0x56bde1['random']()*(_0x500979+0x1)),_0x19f465=_0x501518[_0x500979],_0x306fe3[_0x500979]=_0x33ef45[_0x2679f0],_0x276ce9[_0x2679f0]=_0x19f465;}return _0x5e2bbb;}else return![];}else{if(!this[_0x9945ca(0x7f9)]){if('woRNm'!=='woRNm'){const _0x482517=_0x44e4b5[_0x9945ca(0x4c8)]['_actorWindow'];_0x482517['show'](),_0x482517[_0x9945ca(0xb9a)](!![]),_0x482517['refresh'](),_0x482517[_0x9945ca(0x99e)]();const _0x116528=_0x34ddf5[_0x9945ca(0x4c8)][_0x9945ca(0x4b2)](),_0x5bf1aa=['xp','portrait',_0x9945ca(0x7e6)];if(_0x5bf1aa[_0x9945ca(0x893)](_0x116528)){const _0x47f5bc=_0x551365[_0x9945ca(0x4c8)]['_statusWindow'];_0x47f5bc[_0x9945ca(0xb56)]['y']=0x0;}}else return![];}else{if(this[_0x9945ca(0x7f9)]['isDead']()){if(_0x9945ca(0x8df)===_0x9945ca(0xba0))this['battler']()&&this[_0x9945ca(0x921)]()[_0x9945ca(0x25e)]();else return![];}else{if(!this[_0x9945ca(0x7f9)]['isAppeared']()){if('tkfEr'!==_0x9945ca(0x1f2))return![];else{const _0x7c2ad9={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x5bac5d=_0x1ce920['list']['pop']();_0x3582bc[_0x9945ca(0xa4e)][_0x9945ca(0xa1f)](_0x7c2ad9),_0x5bec05[_0x9945ca(0xa4e)][_0x9945ca(0xa1f)](_0x5bac5d);}}else{if(this[_0x9945ca(0xcf0)]()){if(_0x9945ca(0x427)!=='ulxFb'){const _0x19e899=_0xc9894f(_0x48c8c2['$1'])[_0x9945ca(0x77e)](/[\r\n]+/)[_0x9945ca(0xa98)](_0x41a3df=>_0x3a44c7(_0x41a3df)[_0x9945ca(0x7e1)]()['trim']());_0x43a8fa=_0xb533f8[_0x9945ca(0x395)](_0x19e899);!_0x2af1a7[_0x9945ca(0x9ea)][_0x9945ca(0xa5d)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x4d2408[_0x9945ca(0x9ea)]+=_0x9945ca(0x977));;}else return!![];}else{if(this[_0x9945ca(0x2b2)]()){if('udGdb'===_0x9945ca(0xb23)){const _0x135a0b=_0x10e8c7[_0x9945ca(0x923)](_0x5d0d1a['width']/0x3),_0x549d1b=this[_0x9945ca(0x594)]()?(_0x32efad[_0x9945ca(0xab5)]+_0x4dc14f['boxWidth'])/0x2-_0x135a0b:(_0x21eb68[_0x9945ca(0xab5)]-_0x5291ea[_0x9945ca(0x273)])/-0x2,_0x281bc4=this[_0x9945ca(0x2f9)](),_0x6246a=_0x281bc4['y']+_0x281bc4[_0x9945ca(0x5e0)],_0x2d201c=this['statusWindowRectBorderStyle'](),_0x443cab=_0x2d201c['y']-_0x6246a;return new _0x57a66e(_0x549d1b,_0x6246a,_0x135a0b,_0x443cab);}else return!![];}else{if(this[_0x9945ca(0x130)]()){if(_0x9945ca(0x67e)===_0x9945ca(0x67e))return!![];else{if(!_0x21d2b9[_0x9945ca(0x8fc)][_0x9945ca(0xa60)](this[_0x9945ca(0x41e)],_0x273ade))return!![];if(!_0x295f84['SkillsStatesCore'][_0x9945ca(0x292)](this[_0x9945ca(0x41e)],_0xeb38ae))return!![];if(!_0x2be3bd[_0x9945ca(0x8fc)][_0x9945ca(0x3f5)](this[_0x9945ca(0x41e)],_0x5c8cf8))return!![];}}else{if(this[_0x9945ca(0x4c4)]>0x0){if(_0x9945ca(0x647)!=='Aqzij')return![];else{this[_0x9945ca(0x972)](0x0,0x0,0x0,0x0);return;}}}}}}}}}},Sprite_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x780)]=function(){const _0x4a9bcb=_0x164fcd;return VisuMZ['BattleCore']['Settings'][_0x4a9bcb(0x337)][_0x4a9bcb(0x5f3)];},Sprite_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0xcf0)]=function(){return![];},Sprite_EnemyName['prototype'][_0x164fcd(0x2b2)]=function(){const _0x54284a=_0x164fcd;return VisuMZ[_0x54284a(0xb36)][_0x54284a(0x1de)][_0x54284a(0x337)]['NameAlwaysVisible'];},Sprite_EnemyName[_0x164fcd(0x2bf)]['isIncludedInEnemyWindow']=function(){const _0x33dac9=_0x164fcd;if(VisuMZ['BattleCore']['Settings'][_0x33dac9(0x337)][_0x33dac9(0xb84)])return this[_0x33dac9(0x7f9)][_0x33dac9(0x956)]();else{if('LoGky'!==_0x33dac9(0x3e8))return SceneManager[_0x33dac9(0x4c8)]['_enemyWindow']&&SceneManager[_0x33dac9(0x4c8)][_0x33dac9(0x95b)][_0x33dac9(0x533)]&&SceneManager[_0x33dac9(0x4c8)][_0x33dac9(0x95b)]['_enemies'][_0x33dac9(0x893)](this[_0x33dac9(0x7f9)]);else{if(_0x3e160b[_0x33dac9(0x36f)]&&_0x3e2d60[_0x33dac9(0x6fc)]!==_0x10bd13)return _0x21d0c0[_0x33dac9(0x6fc)];else{if(this['battleLayoutStyle']()===_0x33dac9(0x7e6))return![];else{return _0x250f02[_0x33dac9(0x2bf)][_0x33dac9(0x594)]['call'](this);;}}}}},Sprite_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x59f)]=function(){const _0x49e536=_0x164fcd;if(!this[_0x49e536(0x7f9)])return 0x0;if(this['_cacheTextWidth'])return this[_0x49e536(0x7bc)];const _0xfe7efc=this['name']();return this[_0x49e536(0x249)](),this[_0x49e536(0x7bc)]=this[_0x49e536(0xcf5)][_0x49e536(0x377)](_0xfe7efc)||0x1,this[_0x49e536(0x7bc)];},VisuMZ['BattleCore'][_0x164fcd(0x127)]=Sprite_Battleback['prototype'][_0x164fcd(0x605)],Sprite_Battleback['prototype']['adjustPosition']=function(){const _0x142587=_0x164fcd,_0x2989b1=VisuMZ[_0x142587(0xb36)][_0x142587(0x1de)][_0x142587(0xb5b)];if(!_0x2989b1)return VisuMZ[_0x142587(0xb36)]['Sprite_Battleback_adjustPosition'][_0x142587(0xa10)](this);const _0x592ab2=String(_0x2989b1['DefaultStyle'])||'MZ';switch(_0x592ab2){case'MZ':VisuMZ[_0x142587(0xb36)][_0x142587(0x127)][_0x142587(0xa10)](this);break;case _0x142587(0x2e6):this[_0x142587(0x224)]();break;case _0x142587(0x58b):this[_0x142587(0x99c)]();break;case _0x142587(0x90d):this[_0x142587(0x648)]();break;case'ScaleUp':this[_0x142587(0xbad)]();break;}},Sprite_Battleback[_0x164fcd(0x2bf)][_0x164fcd(0x224)]=function(){const _0x36cc19=_0x164fcd,_0x34e5d7=VisuMZ[_0x36cc19(0xb36)][_0x36cc19(0x1de)][_0x36cc19(0xb5b)];if(_0x34e5d7&&_0x34e5d7[_0x36cc19(0x3af)])return _0x34e5d7[_0x36cc19(0x3af)][_0x36cc19(0xa10)](this);this['width']=Graphics['width'],this[_0x36cc19(0x5e0)]=Graphics[_0x36cc19(0x5e0)];const _0xbb87fc=0x1;this[_0x36cc19(0xb56)]['x']=_0xbb87fc,this[_0x36cc19(0xb56)]['y']=_0xbb87fc,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x164fcd(0x99c)]=function(){const _0x424de7=_0x164fcd,_0x117931=VisuMZ[_0x424de7(0xb36)][_0x424de7(0x1de)][_0x424de7(0xb5b)];if(_0x117931&&_0x117931[_0x424de7(0x6d5)])return _0x117931['jsScaleToFit']['call'](this);this['width']=Graphics[_0x424de7(0xab5)],this[_0x424de7(0x5e0)]=Graphics[_0x424de7(0x5e0)];const _0x4bd379=this[_0x424de7(0xab5)]/this[_0x424de7(0xcf5)][_0x424de7(0xab5)],_0x15f7e9=this[_0x424de7(0x5e0)]/this[_0x424de7(0xcf5)][_0x424de7(0x5e0)],_0x31d11d=Math[_0x424de7(0xc92)](_0x4bd379,_0x15f7e9);this[_0x424de7(0xb56)]['x']=_0x31d11d,this[_0x424de7(0xb56)]['y']=_0x31d11d,this['x']=(Graphics['width']-this[_0x424de7(0xab5)])/0x2,this['y']=Graphics['height']-this[_0x424de7(0x5e0)];},Sprite_Battleback[_0x164fcd(0x2bf)][_0x164fcd(0x648)]=function(){const _0x449e79=_0x164fcd,_0x534509=VisuMZ[_0x449e79(0xb36)][_0x449e79(0x1de)][_0x449e79(0xb5b)];if(_0x534509&&_0x534509[_0x449e79(0x851)])return _0x534509[_0x449e79(0x851)][_0x449e79(0xa10)](this);this[_0x449e79(0xab5)]=Graphics[_0x449e79(0xab5)],this[_0x449e79(0x5e0)]=Graphics[_0x449e79(0x5e0)];const _0x78d77d=Math[_0x449e79(0x584)](0x1,this[_0x449e79(0xab5)]/this['bitmap'][_0x449e79(0xab5)]),_0x229878=Math[_0x449e79(0x584)](0x1,this['height']/this['bitmap'][_0x449e79(0x5e0)]),_0x242c68=Math['max'](_0x78d77d,_0x229878);this['scale']['x']=_0x242c68,this['scale']['y']=_0x242c68,this['x']=(Graphics[_0x449e79(0xab5)]-this[_0x449e79(0xab5)])/0x2,this['y']=Graphics[_0x449e79(0x5e0)]-this[_0x449e79(0x5e0)];},Sprite_Battleback[_0x164fcd(0x2bf)][_0x164fcd(0xbad)]=function(){const _0x301c8a=_0x164fcd,_0x587a23=VisuMZ[_0x301c8a(0xb36)][_0x301c8a(0x1de)][_0x301c8a(0xb5b)];if(_0x587a23&&_0x587a23[_0x301c8a(0xa3d)]){if(_0x301c8a(0x328)==='jkBHB')return _0x587a23[_0x301c8a(0xa3d)][_0x301c8a(0xa10)](this);else _0x5d28ae=_0x394585>=_0x3d7bb6?_0x1ba360:_0xfa7e6e;}this[_0x301c8a(0xab5)]=Graphics[_0x301c8a(0xab5)],this[_0x301c8a(0x5e0)]=Graphics[_0x301c8a(0x5e0)];const _0x56d467=Math[_0x301c8a(0xc92)](0x1,this[_0x301c8a(0xab5)]/this[_0x301c8a(0xcf5)][_0x301c8a(0xab5)]),_0x5f2b95=Math[_0x301c8a(0xc92)](0x1,this[_0x301c8a(0x5e0)]/this[_0x301c8a(0xcf5)][_0x301c8a(0x5e0)]),_0x3e0284=Math[_0x301c8a(0xc92)](_0x56d467,_0x5f2b95);this[_0x301c8a(0xb56)]['x']=_0x3e0284,this['scale']['y']=_0x3e0284,this['x']=(Graphics[_0x301c8a(0xab5)]-this[_0x301c8a(0xab5)])/0x2,this['y']=Graphics[_0x301c8a(0x5e0)]-this['height'];},Spriteset_Battle[_0x164fcd(0x362)]=![],Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x715)]=function(){const _0x530c83=_0x164fcd;if(!$gameSystem[_0x530c83(0x709)]())return![];return![];},Spriteset_Battle['prototype'][_0x164fcd(0x87b)]=function(){return 0x0;},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x150)]=function(){return 0x0;},VisuMZ[_0x164fcd(0xb36)]['Spriteset_Battle_createLowerLayer']=Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x28d)],Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x28d)]=function(){const _0x4f6138=_0x164fcd;VisuMZ[_0x4f6138(0xb36)]['Spriteset_Battle_createLowerLayer'][_0x4f6138(0xa10)](this),this[_0x4f6138(0x9ee)](),this[_0x4f6138(0xb50)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x40a)]=Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x71d)],Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x71d)]=function(){const _0x2ab3da=_0x164fcd;VisuMZ[_0x2ab3da(0xb36)]['Spriteset_Battle_update'][_0x2ab3da(0xa10)](this),this['updateBattlerContainer'](),this[_0x2ab3da(0x375)](),this['updateWeather']();},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x9ee)]=function(){const _0x1ad23b=_0x164fcd;this[_0x1ad23b(0x6f2)]=new Weather(),this['_battleField'][_0x1ad23b(0x23a)](this[_0x1ad23b(0x6f2)]);},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x4ee)]=function(){const _0x14f4e4=_0x164fcd;this[_0x14f4e4(0x6f2)][_0x14f4e4(0xaa3)]=$gameScreen[_0x14f4e4(0xcf7)](),this[_0x14f4e4(0x6f2)][_0x14f4e4(0x407)]=$gameScreen['weatherPower']();},Game_Interpreter['prototype']['command236']=function(_0x43f560){const _0x203ce2=_0x164fcd;$gameScreen['changeWeather'](_0x43f560[0x0],_0x43f560[0x1],_0x43f560[0x2]);if(_0x43f560[0x3])this[_0x203ce2(0xa9d)](_0x43f560[0x2]);return!![];},VisuMZ['BattleCore'][_0x164fcd(0x4a1)]=Game_Interpreter['prototype'][_0x164fcd(0xa71)],Game_Interpreter[_0x164fcd(0x2bf)][_0x164fcd(0xa71)]=function(_0x4bc4a2){const _0x371259=_0x164fcd;if(SceneManager['isSceneBattle']()){if(_0x371259(0x882)!=='zEBgV'){if(!_0x4906b3[_0x371259(0x709)]())return;const _0x351dc8=this[_0x371259(0x921)]();if(!_0x351dc8)return;if(_0xf615f3===_0x351dc8['_baseX'])return;let _0x4e66be=![];if(this[_0x371259(0x31f)]()){if(_0x505e4d>_0x351dc8[_0x371259(0x6ab)])_0x4e66be=!![];if(_0x17fa2a<_0x351dc8['_baseX'])_0x4e66be=![];}else{if(this[_0x371259(0xa79)]()){if(_0x4198b0>_0x351dc8['_baseX'])_0x4e66be=![];if(_0xcef7d6<_0x351dc8[_0x371259(0x6ab)])_0x4e66be=!![];}};this[_0x371259(0x295)](_0x455717?!_0x4e66be:_0x4e66be),_0x351dc8[_0x371259(0x622)]();}else return SceneManager[_0x371259(0x4c8)][_0x371259(0xbd6)][_0x371259(0x293)](_0x4bc4a2[0x0],_0x4bc4a2[0x1]),!![];}else return VisuMZ['BattleCore'][_0x371259(0x4a1)][_0x371259(0xa10)](this,_0x4bc4a2);},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x157)]=function(_0x8a3b4c,_0x303e76){const _0x54b9b6=_0x164fcd;_0x8a3b4c[_0x54b9b6(0xcf5)]=_0x303e76;},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x293)]=function(_0x5ad06c,_0x29d96f){const _0x4ceb89=_0x164fcd;_0x5ad06c=_0x5ad06c||'',_0x29d96f=_0x29d96f||'';_0x5ad06c===''&&_0x29d96f===''&&(_0x5ad06c=this[_0x4ceb89(0x7a3)][_0x4ceb89(0xcfd)](),_0x29d96f=this[_0x4ceb89(0x7aa)][_0x4ceb89(0x6b3)]());const _0x4f1973=ImageManager[_0x4ceb89(0xa2d)](_0x5ad06c),_0x271c7a=ImageManager['loadBattleback2'](_0x29d96f);_0x4f1973[_0x4ceb89(0x250)](this[_0x4ceb89(0x755)][_0x4ceb89(0x1f7)](this,this['_back1Sprite'],this['_back2Sprite'],_0x4f1973,_0x271c7a));},Spriteset_Battle['prototype']['updateBattlebackBitmap1']=function(_0x8c6269,_0x5cf832,_0x57924a,_0x1e78bb){const _0x49034c=_0x164fcd;_0x1e78bb[_0x49034c(0x250)](this[_0x49034c(0x178)][_0x49034c(0x1f7)](this,_0x8c6269,_0x5cf832,_0x57924a,_0x1e78bb));},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x178)]=function(_0x2c71c9,_0x3ccb3b,_0x31b363,_0x3ef2b0){const _0x5b6929=_0x164fcd;_0x2c71c9[_0x5b6929(0xcf5)]=_0x31b363,_0x3ccb3b[_0x5b6929(0xcf5)]=_0x3ef2b0,_0x2c71c9[_0x5b6929(0x605)](),_0x3ccb3b['adjustPosition']();},VisuMZ['BattleCore'][_0x164fcd(0xb1c)]=Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x93d)],Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x93d)]=function(){const _0xfa7911=_0x164fcd;VisuMZ[_0xfa7911(0xb36)][_0xfa7911(0xb1c)][_0xfa7911(0xa10)](this),this[_0xfa7911(0x17b)]();},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x17b)]=function(){const _0x3a1616=_0x164fcd;this['createBattleFieldContainer'](),this[_0x3a1616(0xcf6)](),this[_0x3a1616(0x572)](),this[_0x3a1616(0xa1a)](),this[_0x3a1616(0x7e5)]();},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x7c4)]=function(){const _0x487619=_0x164fcd;this['_battlerContainer']=new Sprite(),this[_0x487619(0x26c)][_0x487619(0x23a)](this[_0x487619(0xb92)]);},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x572)]=function(){const _0x2ac8ba=_0x164fcd;this['_animationContainer']=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x2ac8ba(0x23a)](this[_0x2ac8ba(0x868)]):this['_battleField'][_0x2ac8ba(0x23a)](this['_animationContainer']);},Spriteset_Battle[_0x164fcd(0x2bf)]['createDamageContainer']=function(){const _0x3c35d8=_0x164fcd;this[_0x3c35d8(0x6ee)]=new Sprite(),this['_damageContainer']['x']=this['_battleField']['x'],this[_0x3c35d8(0x6ee)]['y']=this[_0x3c35d8(0x26c)]['y'],this['addChild'](this['_damageContainer']);},Spriteset_Battle[_0x164fcd(0x2bf)]['adjustFlippedBattlefield']=function(){const _0x785cf2=_0x164fcd;if(!this['isFlipped']())return;this[_0x785cf2(0xb92)]['scale']['x']=-0x1,this[_0x785cf2(0xb92)]['x']=this[_0x785cf2(0x26c)][_0x785cf2(0xab5)],this[_0x785cf2(0x146)][_0x785cf2(0xb56)]['x']=-0x1,this['_uiContainer']['x']=this[_0x785cf2(0x26c)]['width'],this[_0x785cf2(0x868)][_0x785cf2(0xb56)]['x']=-0x1,this[_0x785cf2(0x868)]['x']=this[_0x785cf2(0x26c)][_0x785cf2(0xab5)],this[_0x785cf2(0x6ee)][_0x785cf2(0xb56)]['x']=-0x1,this[_0x785cf2(0x6ee)]['x']=this['_battleField']['x']+this[_0x785cf2(0x26c)][_0x785cf2(0xab5)];},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x441)]=function(){const _0x440363=_0x164fcd;Imported[_0x440363(0x818)]&&this['coreEngineRepositionEnemies']()&&(_0x440363(0x388)===_0x440363(0x170)?(this['_windowLayer']['x']=_0x405653[_0x440363(0xab5)]*0xa,this[_0x440363(0x919)]['y']=_0x52d5b1['height']*0xa):this['repositionEnemiesByResolution']());const _0x306563=$gameTroop['members'](),_0x500c08=[];for(const _0x21c9c5 of _0x306563){_0x500c08['push'](new Sprite_Enemy(_0x21c9c5));}_0x500c08['sort'](this[_0x440363(0xb94)][_0x440363(0x1f7)](this));for(const _0x3a1c99 of _0x500c08){_0x440363(0x900)!=='ikRKa'?this[_0x440363(0x5af)]=_0x440363(0x329):this[_0x440363(0xb92)]['addChild'](_0x3a1c99);}this['_enemySprites']=_0x500c08;},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xc5e)]=function(){const _0x43b774=_0x164fcd;this[_0x43b774(0x330)]=[];for(let _0x26ec5c=0x0;_0x26ec5c<$gameParty[_0x43b774(0x91c)]();_0x26ec5c++){const _0x3799c4=$gameParty[_0x43b774(0x4ff)]()[_0x26ec5c],_0x4eb691=new Sprite_Actor();_0x4eb691['moveToStartPositionBattleCore'](_0x3799c4),_0x4eb691[_0x43b774(0x7b0)](_0x3799c4),_0x4eb691[_0x43b774(0x71d)](),this[_0x43b774(0x330)][_0x43b774(0x56b)](_0x4eb691),this['_battlerContainer'][_0x43b774(0x23a)](_0x4eb691);}},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x95c)]=function(_0x58c697,_0x5ed072,_0x4755aa,_0x45087f){const _0x1f8c6c=_0x164fcd,_0x50c894=this[_0x1f8c6c(0xb46)](_0x5ed072),_0x1133e0=new(_0x50c894?Sprite_AnimationMV:Sprite_Animation)(),_0x25566c=this[_0x1f8c6c(0x564)](_0x58c697);this[_0x1f8c6c(0xa0a)](_0x58c697[0x0])&&(_0x4755aa=!_0x4755aa),_0x1133e0[_0x1f8c6c(0xab1)]=_0x58c697,_0x1133e0[_0x1f8c6c(0xd03)](_0x25566c,_0x5ed072,_0x4755aa,_0x45087f),this[_0x1f8c6c(0x476)](_0x1133e0);},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x476)]=function(_0x38d848){const _0xafe4b0=_0x164fcd;this['isAnimationShownOnBattlePortrait'](_0x38d848)?(this[_0xafe4b0(0x92e)]()['addChild'](_0x38d848),_0x38d848[_0xafe4b0(0x505)]=!![]):(this[_0xafe4b0(0x868)][_0xafe4b0(0x23a)](_0x38d848),Spriteset_Battle['ANTI_TINT_UI']&&(this[_0xafe4b0(0x868)]['x']=this[_0xafe4b0(0x804)]['x'],this[_0xafe4b0(0x868)]['y']=this[_0xafe4b0(0x804)]['y'])),this[_0xafe4b0(0xae8)][_0xafe4b0(0x56b)](_0x38d848);},Spriteset_Battle['prototype'][_0x164fcd(0x1b8)]=function(_0x1861ab){const _0x261dd8=_0x164fcd;if(!_0x1861ab)return![];if(!_0x1861ab['_animation'])return![];if(!_0x1861ab[_0x261dd8(0xab1)][0x0])return![];if(_0x1861ab[_0x261dd8(0xab1)][0x0]['isActor']&&!_0x1861ab[_0x261dd8(0xab1)][0x0][_0x261dd8(0x31f)]())return![];if($gameSystem[_0x261dd8(0x709)]())return![];if(!this[_0x261dd8(0x92e)]())return![];if(_0x1861ab[_0x261dd8(0xc12)]===Sprite_Animation){if(_0x1861ab['_animation'][_0x261dd8(0x1d0)]!==0x0)return![];}else{if(_0x1861ab[_0x261dd8(0xc12)]===Sprite_AnimationMV){if(_0x1861ab[_0x261dd8(0xbbe)][_0x261dd8(0x12f)]===0x3)return![];}}return!![];const _0x2b43a2=Window_BattleStatus[_0x261dd8(0x2bf)][_0x261dd8(0x4b2)]();return['xp','portrait'][_0x261dd8(0x98f)](_0x2b43a2);},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x92e)]=function(){const _0x5226d7=_0x164fcd;if(!SceneManager[_0x5226d7(0x4c8)])return null;if(!SceneManager['_scene']['_statusWindow'])return null;if(!SceneManager[_0x5226d7(0x4c8)]['_statusWindow'][_0x5226d7(0x804)])return null;return SceneManager[_0x5226d7(0x4c8)]['_statusWindow'][_0x5226d7(0x804)];},Spriteset_Battle['prototype'][_0x164fcd(0x12b)]=function(_0x20f77a){const _0x42bd61=_0x164fcd;this[_0x42bd61(0x4ae)](_0x20f77a);for(const _0x2b5e3e of _0x20f77a[_0x42bd61(0xab1)]){if(_0x2b5e3e['endAnimation']){if(_0x42bd61(0x241)===_0x42bd61(0x241))_0x2b5e3e[_0x42bd61(0x50a)]();else return this[_0x42bd61(0xa2f)]();}}_0x20f77a['destroy']();},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x4ae)]=function(_0x5f382d){const _0x4c19f7=_0x164fcd;this[_0x4c19f7(0x1b8)](_0x5f382d)?_0x4c19f7(0x392)!=='UgNmL'?_0x1ed3c7['BattleCore'][_0x4c19f7(0xb3d)](_0x26af00,_0x3c573e):this['battleStatusWindowAnimationContainer']()[_0x4c19f7(0x6de)](_0x5f382d):this[_0x4c19f7(0x868)][_0x4c19f7(0x6de)](_0x5f382d);this['_effectsContainer'][_0x4c19f7(0x6de)](_0x5f382d),this[_0x4c19f7(0x868)][_0x4c19f7(0x6de)](_0x5f382d),this[_0x4c19f7(0xae8)][_0x4c19f7(0x494)](_0x5f382d);if(this[_0x4c19f7(0x94c)])this[_0x4c19f7(0x94c)][_0x4c19f7(0x494)](_0x5f382d);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x4a6)]=Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x7de)],Spriteset_Battle['prototype'][_0x164fcd(0x7de)]=function(){const _0x5429bf=_0x164fcd;VisuMZ[_0x5429bf(0xb36)][_0x5429bf(0x4a6)][_0x5429bf(0xa10)](this),this[_0x5429bf(0x970)]();},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x970)]=function(){const _0x3b3360=_0x164fcd;this[_0x3b3360(0xb92)][_0x3b3360(0x87f)][_0x3b3360(0x9d7)](this[_0x3b3360(0x895)][_0x3b3360(0x1f7)](this)),this[_0x3b3360(0xc3e)]();if(!this[_0x3b3360(0xb92)])return;this[_0x3b3360(0xb92)][_0x3b3360(0x4c4)]=this['targetBattlerContainerOpacity']();},Spriteset_Battle[_0x164fcd(0x2bf)]['compareBattlerSprites']=function(_0x330811,_0x4d2688){const _0x391df9=_0x164fcd;if(VisuMZ['BattleCore'][_0x391df9(0x1de)]['Actor']['PrioritySortActors']){if(_0x330811[_0x391df9(0x7f9)]&&_0x4d2688['_battler']){if(_0x330811[_0x391df9(0x7f9)]['isActor']()&&_0x4d2688[_0x391df9(0x7f9)][_0x391df9(0xa79)]())return 0x1;else{if(_0x4d2688[_0x391df9(0x7f9)]['isActor']()&&_0x330811[_0x391df9(0x7f9)][_0x391df9(0xa79)]())return-0x1;}}}return _0x330811[_0x391df9(0x3db)]!==_0x4d2688[_0x391df9(0x3db)]?_0x330811['_baseY']-_0x4d2688[_0x391df9(0x3db)]:_0x4d2688[_0x391df9(0x5d4)]-_0x330811[_0x391df9(0x5d4)];},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xc3e)]=function(){const _0x103de7=_0x164fcd;if(!VisuMZ['BattleCore']['Settings']['Actor']['PrioritySortActive'])return;const _0x367b6a=BattleManager[_0x103de7(0x5a7)];if(_0x367b6a){if(_0x367b6a['isActor']()&&!$gameSystem[_0x103de7(0x709)]())return;const _0x23d92f=_0x367b6a[_0x103de7(0x921)]();if(_0x23d92f&&_0x367b6a['isActor']())this[_0x103de7(0xb92)][_0x103de7(0x23a)](_0x23d92f);}},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x1ea)]=function(){const _0xc79b41=_0x164fcd;for(const _0x14e034 of $gameParty[_0xc79b41(0x279)]()){if(!_0x14e034)continue;if(!_0x14e034[_0xc79b41(0x921)]())continue;_0x14e034[_0xc79b41(0x921)]()['forceEscapeSprite']=!![],_0x14e034[_0xc79b41(0x921)]()['retreat']();}},Spriteset_Battle[_0x164fcd(0x2bf)]['createUIContainer']=function(){const _0x2adbb8=_0x164fcd;this[_0x2adbb8(0x146)]=new Sprite(),Spriteset_Battle[_0x2adbb8(0x362)]?this[_0x2adbb8(0x23a)](this['_uiContainer']):this[_0x2adbb8(0x26c)]['addChild'](this[_0x2adbb8(0x146)]),SceneManager['_scene'][_0x2adbb8(0x146)]=this[_0x2adbb8(0x146)];},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xb50)]=function(){const _0x3c166f=_0x164fcd;if(VisuMZ['BattleCore']['Settings'][_0x3c166f(0x337)][_0x3c166f(0x601)])return;this[_0x3c166f(0xc77)]=new Sprite(),BattleManager['addChildToUiContainer'](this['_enemyNameContainer']);for(const _0x1e2e5b of this['_enemySprites']){const _0x13f169=new Sprite_EnemyName();this[_0x3c166f(0xc77)][_0x3c166f(0x23a)](_0x13f169),_0x13f169[_0x3c166f(0x371)](_0x1e2e5b);}},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x375)]=function(){const _0x4cbcc4=_0x164fcd;if(!this[_0x4cbcc4(0x6ee)])return;if(!this['_uiContainer'])return;const _0x4e6c41=Spriteset_Battle[_0x4cbcc4(0x362)]?this[_0x4cbcc4(0x6ee)]['x']:0x0,_0x368cb1=Spriteset_Battle[_0x4cbcc4(0x362)]?this[_0x4cbcc4(0x6ee)]['y']:0x0,_0x488d7c=Imported['VisuMZ_3_ActSeqCamera']?this['_battleField']['x']:0x0,_0x3a62fd=Imported[_0x4cbcc4(0x2d3)]?this[_0x4cbcc4(0x26c)]['y']:0x0;this['_uiContainer']['x']=_0x4e6c41+_0x488d7c,this[_0x4cbcc4(0x146)]['y']=_0x368cb1+_0x3a62fd;},BattleManager['addChildToUiContainer']=function(_0x14a5f0){const _0x52dd75=_0x164fcd;if(!SceneManager[_0x52dd75(0x4c8)][_0x52dd75(0x146)])return;SceneManager[_0x52dd75(0x4c8)][_0x52dd75(0x146)][_0x52dd75(0x23a)](_0x14a5f0);},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xd13)]=function(){return 0xff;},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x8a5)]=function(){return![];},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x87a)]=function(){const _0x295379=_0x164fcd;return this[_0x295379(0x234)]()[_0x295379(0x119)](_0x452fce=>_0x452fce[_0x295379(0x122)]());},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0xaa6)]=function(){const _0x49e8bb=_0x164fcd;return this[_0x49e8bb(0x234)]()[_0x49e8bb(0x119)](_0x2f85d3=>_0x2f85d3[_0x49e8bb(0x54c)]());},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x321)]=function(){const _0x5bd068=_0x164fcd;return this[_0x5bd068(0x234)]()[_0x5bd068(0x119)](_0xef891b=>_0xef891b[_0x5bd068(0xb0f)]());},Spriteset_Battle[_0x164fcd(0x2bf)]['isAnyoneSkewing']=function(){const _0x5559bd=_0x164fcd;return this[_0x5559bd(0x234)]()[_0x5559bd(0x119)](_0x38e8d2=>_0x38e8d2['isSkewing']());},Spriteset_Battle[_0x164fcd(0x2bf)][_0x164fcd(0x1e5)]=function(){const _0x570555=_0x164fcd;return this[_0x570555(0x234)]()['some'](_0x35a604=>_0x35a604[_0x570555(0x852)]());},Spriteset_Battle['prototype']['isAnyoneChangingOpacity']=function(){const _0x41804f=_0x164fcd;return this['battlerSprites']()[_0x41804f(0x119)](_0x176a27=>_0x176a27[_0x41804f(0x5de)]());},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x6aa)]=Window_ItemList['prototype']['maxCols'],Window_ItemList[_0x164fcd(0x2bf)]['maxCols']=function(){const _0x1cf616=_0x164fcd;if(SceneManager[_0x1cf616(0x53f)]())return _0x1cf616(0x687)===_0x1cf616(0x151)?0x1:SceneManager[_0x1cf616(0x4c8)][_0x1cf616(0x4b2)]()===_0x1cf616(0x7e6)?VisuMZ[_0x1cf616(0xb36)][_0x1cf616(0x1de)][_0x1cf616(0x9a3)]['SkillItemBorderCols']:VisuMZ[_0x1cf616(0xb36)][_0x1cf616(0x1de)]['BattleLayout'][_0x1cf616(0x1cf)];else{if(_0x1cf616(0xb3a)!==_0x1cf616(0x708))return VisuMZ[_0x1cf616(0xb36)][_0x1cf616(0x6aa)][_0x1cf616(0xa10)](this);else this[_0x1cf616(0xd03)](_0x5662ed['list'],0x0);}},VisuMZ[_0x164fcd(0xb36)]['Window_SkillList_maxCols']=Window_SkillList['prototype'][_0x164fcd(0x9e1)],Window_SkillList['prototype']['maxCols']=function(){const _0x3917aa=_0x164fcd;return SceneManager[_0x3917aa(0x53f)]()?SceneManager[_0x3917aa(0x4c8)][_0x3917aa(0x4b2)]()==='border'?VisuMZ[_0x3917aa(0xb36)][_0x3917aa(0x1de)][_0x3917aa(0x9a3)]['SkillItemBorderCols']:VisuMZ[_0x3917aa(0xb36)]['Settings'][_0x3917aa(0x9a3)][_0x3917aa(0x1cf)]:VisuMZ[_0x3917aa(0xb36)][_0x3917aa(0x8f8)][_0x3917aa(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x26b)]=Window_Options[_0x164fcd(0x2bf)][_0x164fcd(0xc0f)],Window_Options[_0x164fcd(0x2bf)][_0x164fcd(0xc0f)]=function(){const _0x3c89ed=_0x164fcd;VisuMZ[_0x3c89ed(0xb36)]['Window_Options_addGeneralOptions'][_0x3c89ed(0xa10)](this),this[_0x3c89ed(0xc1a)](),this['addShowHpGaugeCommand']();},Window_Options[_0x164fcd(0x2bf)][_0x164fcd(0xc1a)]=function(){const _0x476397=_0x164fcd;if(VisuMZ[_0x476397(0xb36)]['Settings'][_0x476397(0x8ef)][_0x476397(0xb78)]){if(_0x476397(0x1ad)!==_0x476397(0x1ad)){const _0x2a2652=this[_0x476397(0xd1c)](this['index']());let _0x181456=this[_0x476397(0x42c)](this[_0x476397(0xca1)]());_0x181456=_0x181456[_0x476397(0x6db)](/\\I\[(\d+)\]/gi,''),_0x5b9d63['resetFontSettings'](),this[_0x476397(0x51a)](_0x181456,_0x2a2652),this[_0x476397(0x43b)](_0x181456,_0x2a2652),this['commandNameWindowCenter'](_0x181456,_0x2a2652);}else this['addBattleCoreAutoBattleStartupCommand'](),this[_0x476397(0x710)]();}},Window_Options[_0x164fcd(0x2bf)][_0x164fcd(0x460)]=function(){const _0x433b29=_0x164fcd;if(!VisuMZ[_0x433b29(0xb36)][_0x433b29(0x1de)][_0x433b29(0x83d)]['AddHpGaugeOption'])return;const _0x279c85=TextManager[_0x433b29(0xa2c)],_0x4f327c=_0x433b29(0xa2c);this['addCommand'](_0x279c85,_0x4f327c);},Window_Options[_0x164fcd(0x2bf)][_0x164fcd(0x20c)]=function(){const _0x4b28ab=_0x164fcd,_0x1752ac=TextManager[_0x4b28ab(0xbf9)],_0x390d6d='autoBattleAtStart';this[_0x4b28ab(0x6a2)](_0x1752ac,_0x390d6d);},Window_Options[_0x164fcd(0x2bf)][_0x164fcd(0x710)]=function(){const _0xd4ea2e=_0x164fcd,_0x18cffc=TextManager[_0xd4ea2e(0x9fa)],_0x1b179a='autoBattleUseSkills';this[_0xd4ea2e(0x6a2)](_0x18cffc,_0x1b179a);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x6bd)]=Window_Options[_0x164fcd(0x2bf)][_0x164fcd(0x121)],Window_Options[_0x164fcd(0x2bf)][_0x164fcd(0x121)]=function(_0x16bc36){const _0x4d8f5c=_0x164fcd,_0x3d6247=this['commandSymbol'](_0x16bc36);if(_0x3d6247==='autoBattleUseSkills')return this[_0x4d8f5c(0x6ba)]();else{if('BuAWU'!==_0x4d8f5c(0x223))_0x1506b5[_0x4d8f5c(0xb36)][_0x4d8f5c(0xb3d)](_0x86dd98,_0x506698);else return VisuMZ[_0x4d8f5c(0xb36)]['Window_Options_statusText']['call'](this,_0x16bc36);}},Window_Options[_0x164fcd(0x2bf)][_0x164fcd(0x6ba)]=function(){const _0x156aa7=_0x164fcd,_0x3f415d=VisuMZ['BattleCore'][_0x156aa7(0x1de)][_0x156aa7(0x8ef)],_0xfc47ea=this['getConfigValue'](_0x156aa7(0x206));return _0xfc47ea?_0x3f415d[_0x156aa7(0x9bf)]:_0x3f415d[_0x156aa7(0x5df)];},Window_ShopStatus[_0x164fcd(0x2bf)][_0x164fcd(0x1e4)]=function(){const _0x3f93b7=_0x164fcd,_0x477ec8=DataManager['getDamageStyle'](this[_0x3f93b7(0x6d3)]),_0x39a1ab=VisuMZ['DamageStyles'][_0x477ec8];if(!_0x39a1ab)return this[_0x3f93b7(0xa8f)]();const _0x8e27c4='DamageType%1'[_0x3f93b7(0x272)](this[_0x3f93b7(0x6d3)][_0x3f93b7(0x597)][_0x3f93b7(0xaa3)]),_0x27f4e8=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x3f93b7(0x6d3)][_0x3f93b7(0x597)]['type']];return _0x39a1ab[_0x8e27c4][_0x3f93b7(0x272)](_0x27f4e8);},Window_ShopStatus[_0x164fcd(0x2bf)][_0x164fcd(0x8a9)]=function(){const _0x5d3977=_0x164fcd,_0x1252c0=DataManager[_0x5d3977(0x46c)](this['_item']),_0xba98aa=VisuMZ[_0x5d3977(0x4b8)][_0x1252c0];if(!_0xba98aa)return this[_0x5d3977(0xbd7)]();return _0xba98aa[_0x5d3977(0x732)][_0x5d3977(0xa10)](this);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x142)]=Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x1ec)],Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x1ec)]=function(_0xae466){const _0x5b5231=_0x164fcd;VisuMZ[_0x5b5231(0xb36)]['Window_PartyCommand_initialize'][_0x5b5231(0xa10)](this,_0xae466),this['createCommandNameWindow'](_0xae466);},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x465)]=function(_0x45096f){const _0x4a8578=_0x164fcd,_0x339d69=new Rectangle(0x0,0x0,_0x45096f[_0x4a8578(0xab5)],_0x45096f[_0x4a8578(0x5e0)]);this[_0x4a8578(0x80c)]=new Window_Base(_0x339d69),this[_0x4a8578(0x80c)]['opacity']=0x0,this[_0x4a8578(0x23a)](this[_0x4a8578(0x80c)]),this[_0x4a8578(0xcba)]();},Window_PartyCommand['prototype']['callUpdateHelp']=function(){const _0x4124e6=_0x164fcd;Window_Command[_0x4124e6(0x2bf)][_0x4124e6(0xbae)][_0x4124e6(0xa10)](this);if(this[_0x4124e6(0x80c)])this[_0x4124e6(0xcba)]();},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0xcba)]=function(){const _0x5948c1=_0x164fcd,_0x1f079f=this['_commandNameWindow'];_0x1f079f[_0x5948c1(0x382)][_0x5948c1(0x7bf)]();const _0x42e172=this[_0x5948c1(0xae7)](this[_0x5948c1(0xca1)]());if(_0x42e172===_0x5948c1(0x3e0)&&this[_0x5948c1(0x768)]()>0x0){if(_0x5948c1(0x3f6)===_0x5948c1(0x290)){if(!_0x498e2e[_0x5948c1(0xb36)][_0x5948c1(0x1de)][_0x5948c1(0xa08)]['ShowCurrentState'])return;_0x4ca973[_0x5948c1(0xb36)][_0x5948c1(0x8d5)][_0x5948c1(0xa10)](this,_0x370f0e);}else{const _0x286b3b=this[_0x5948c1(0xd1c)](this[_0x5948c1(0xca1)]());let _0x21c7b0=this['commandName'](this[_0x5948c1(0xca1)]());_0x21c7b0=_0x21c7b0[_0x5948c1(0x6db)](/\\I\[(\d+)\]/gi,''),_0x1f079f['resetFontSettings'](),this[_0x5948c1(0x51a)](_0x21c7b0,_0x286b3b),this['commandNameWindowDrawText'](_0x21c7b0,_0x286b3b),this['commandNameWindowCenter'](_0x21c7b0,_0x286b3b);}}},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x51a)]=function(_0xc7e2ce,_0x18942b){},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x43b)]=function(_0x143929,_0x5428d8){const _0x3d1c64=_0x164fcd,_0x5ec491=this[_0x3d1c64(0x80c)];_0x5ec491['drawText'](_0x143929,0x0,_0x5428d8['y'],_0x5ec491[_0x3d1c64(0x96e)],_0x3d1c64(0x37f));},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x232)]=function(_0x28284a,_0x58508c){const _0x409610=_0x164fcd,_0xafc419=this[_0x409610(0x80c)],_0x1f8dfb=$gameSystem[_0x409610(0x416)](),_0x36bada=_0x58508c['x']+Math[_0x409610(0x923)](_0x58508c[_0x409610(0xab5)]/0x2)+_0x1f8dfb;_0xafc419['x']=_0xafc419[_0x409610(0xab5)]/-0x2+_0x36bada,_0xafc419['y']=Math[_0x409610(0x923)](_0x58508c['height']/0x2);},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x3a4)]=function(){const _0xa9fafa=_0x164fcd;this[_0xa9fafa(0x3e5)](),this['addAutoBattleCommand'](),this[_0xa9fafa(0x75f)](),this[_0xa9fafa(0x927)](),this[_0xa9fafa(0x802)]();},Window_PartyCommand['prototype'][_0x164fcd(0x3e5)]=function(){const _0x28020b=_0x164fcd,_0x2767fd=this[_0x28020b(0xb3c)](),_0x383c23=VisuMZ['BattleCore'][_0x28020b(0x1de)][_0x28020b(0xcca)][_0x28020b(0x72a)],_0x4812d2=_0x2767fd===_0x28020b(0xb1d)?TextManager[_0x28020b(0x506)]:_0x28020b(0x478)[_0x28020b(0x272)](_0x383c23,TextManager[_0x28020b(0x506)]),_0x591606=this[_0x28020b(0x3c5)]();this['addCommand'](_0x4812d2,_0x28020b(0x506),_0x591606);},Window_PartyCommand['prototype'][_0x164fcd(0x3c5)]=function(){return!![];},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x1b4)]=function(){const _0x31727a=_0x164fcd;if(!this['isAutoBattleCommandAdded']())return;const _0x3367d5=this[_0x31727a(0xb3c)](),_0x3a45fd=VisuMZ[_0x31727a(0xb36)][_0x31727a(0x1de)]['PartyCmd'][_0x31727a(0x969)],_0x1485db=_0x3367d5==='text'?TextManager[_0x31727a(0xac2)]:_0x31727a(0x478)['format'](_0x3a45fd,TextManager[_0x31727a(0xac2)]),_0x3e8dbb=this[_0x31727a(0xc65)]();this[_0x31727a(0x6a2)](_0x1485db,_0x31727a(0xac2),_0x3e8dbb);},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x155)]=function(){const _0x53d9f4=_0x164fcd;return VisuMZ[_0x53d9f4(0xb36)][_0x53d9f4(0x1de)][_0x53d9f4(0xcca)][_0x53d9f4(0x5c8)];},Window_PartyCommand['prototype'][_0x164fcd(0xc65)]=function(){return!![];},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x75f)]=function(){},Window_PartyCommand[_0x164fcd(0x2bf)]['addOptionsCommand']=function(){const _0x70aae6=_0x164fcd;if(!this['isOptionsCommandAdded']())return;const _0x128eb9=this['commandStyle'](),_0x267506=VisuMZ['BattleCore'][_0x70aae6(0x1de)]['PartyCmd'][_0x70aae6(0xc74)],_0x3d2d76=_0x128eb9==='text'?TextManager[_0x70aae6(0x51f)]:_0x70aae6(0x478)[_0x70aae6(0x272)](_0x267506,TextManager[_0x70aae6(0x51f)]),_0x2b21e1=this[_0x70aae6(0x1b6)]();this[_0x70aae6(0x6a2)](_0x3d2d76,_0x70aae6(0x51f),_0x2b21e1);},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x8f7)]=function(){const _0xc599a1=_0x164fcd;return VisuMZ[_0xc599a1(0xb36)][_0xc599a1(0x1de)][_0xc599a1(0xcca)]['CommandAddOptions'];},Window_PartyCommand[_0x164fcd(0x2bf)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x802)]=function(){const _0x35719f=_0x164fcd,_0x538f0e=this[_0x35719f(0xb3c)](),_0x509f43=VisuMZ[_0x35719f(0xb36)][_0x35719f(0x1de)]['PartyCmd'][_0x35719f(0x2ff)],_0xb7967b=_0x538f0e==='text'?TextManager['escape']:_0x35719f(0x478)['format'](_0x509f43,TextManager[_0x35719f(0xaee)]),_0x5eab71=this[_0x35719f(0xb21)]();this[_0x35719f(0x6a2)](_0xb7967b,_0x35719f(0xaee),_0x5eab71);},Window_PartyCommand[_0x164fcd(0x2bf)]['isEscapeCommandEnabled']=function(){const _0x2fd840=_0x164fcd;return BattleManager[_0x2fd840(0x3c4)]();},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x35d)]=function(){const _0x32f5c6=_0x164fcd;return VisuMZ['BattleCore'][_0x32f5c6(0x1de)][_0x32f5c6(0xcca)][_0x32f5c6(0x28e)];},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x432)]=function(_0x4b0e10){const _0x5064c0=_0x164fcd,_0x4a8fc2=this[_0x5064c0(0xae7)](_0x4b0e10);if(_0x4a8fc2==='iconText')this[_0x5064c0(0x8de)](_0x4b0e10);else{if(_0x4a8fc2===_0x5064c0(0x3e0))this[_0x5064c0(0x929)](_0x4b0e10);else{if(_0x5064c0(0xa21)===_0x5064c0(0x80e))return _0x556454[_0x5064c0(0xb36)]['Settings'][_0x5064c0(0x337)][_0x5064c0(0x6d2)];else Window_Command[_0x5064c0(0x2bf)][_0x5064c0(0x432)][_0x5064c0(0xa10)](this,_0x4b0e10);}}},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0xb3c)]=function(){const _0x3e6c01=_0x164fcd;return VisuMZ['BattleCore'][_0x3e6c01(0x1de)][_0x3e6c01(0xcca)][_0x3e6c01(0x3b9)];},Window_PartyCommand['prototype'][_0x164fcd(0xae7)]=function(_0x372852){const _0x124288=_0x164fcd;if(_0x372852<0x0)return _0x124288(0xb1d);const _0x401755=this[_0x124288(0xb3c)]();if(_0x401755!==_0x124288(0x756))return _0x401755;else{if(this[_0x124288(0x768)]()>0x0){if(_0x124288(0xad7)===_0x124288(0x67f))this['_forcedHomeX']=_0x1bba7f,this['_forcedHomeY']=_0x5f1296;else{const _0x175568=this[_0x124288(0x42c)](_0x372852);if(_0x175568['match'](/\\I\[(\d+)\]/i)){if('zevSn'!==_0x124288(0xcc2)){const _0xd6d7ef=this[_0x124288(0xd1c)](_0x372852),_0x984195=this[_0x124288(0x45a)](_0x175568)[_0x124288(0xab5)];return _0x984195<=_0xd6d7ef['width']?_0x124288(0x821):_0x124288(0x3e0);}else _0x5dab36[_0x124288(0x2bf)][_0x124288(0x432)][_0x124288(0xa10)](this,_0x4e6028);}}}}return _0x124288(0xb1d);},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x8de)]=function(_0x4ca01d){const _0x4e3f39=_0x164fcd,_0x251d6e=this[_0x4e3f39(0xd1c)](_0x4ca01d),_0x1bfaad=this[_0x4e3f39(0x42c)](_0x4ca01d),_0x3e83d6=this['textSizeEx'](_0x1bfaad)[_0x4e3f39(0xab5)];this[_0x4e3f39(0x992)](this[_0x4e3f39(0x720)](_0x4ca01d));const _0x59e74d=this[_0x4e3f39(0x35d)]();if(_0x59e74d===_0x4e3f39(0x29e))this['drawTextEx'](_0x1bfaad,_0x251d6e['x']+_0x251d6e['width']-_0x3e83d6,_0x251d6e['y'],_0x3e83d6);else{if(_0x59e74d===_0x4e3f39(0x37f)){const _0x28cb4d=_0x251d6e['x']+Math['floor']((_0x251d6e['width']-_0x3e83d6)/0x2);this[_0x4e3f39(0x625)](_0x1bfaad,_0x28cb4d,_0x251d6e['y'],_0x3e83d6);}else this[_0x4e3f39(0x625)](_0x1bfaad,_0x251d6e['x'],_0x251d6e['y'],_0x3e83d6);}},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x929)]=function(_0x423468){const _0x50063d=_0x164fcd;this[_0x50063d(0x42c)](_0x423468)[_0x50063d(0xa5d)](/\\I\[(\d+)\]/i);const _0x45e71a=Number(RegExp['$1'])||0x0,_0x431048=this[_0x50063d(0xd1c)](_0x423468),_0x5fc687=_0x431048['x']+Math[_0x50063d(0x923)]((_0x431048[_0x50063d(0xab5)]-ImageManager[_0x50063d(0x7b8)])/0x2),_0x168fb2=_0x431048['y']+(_0x431048['height']-ImageManager['iconHeight'])/0x2;this[_0x50063d(0x431)](_0x45e71a,_0x5fc687,_0x168fb2);},Window_PartyCommand[_0x164fcd(0x2bf)]['hide']=function(){},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0xa49)]=function(){const _0x1fe47c=_0x164fcd;Window_Command[_0x1fe47c(0x2bf)][_0x1fe47c(0xa49)][_0x1fe47c(0xa10)](this);const _0x305e57=this[_0x1fe47c(0x4b2)]();if(_0x305e57===_0x1fe47c(0x7e6)){if(_0x1fe47c(0x624)===_0x1fe47c(0x624))this['showHelpWindow']();else{const _0x1147f3=this[_0x1fe47c(0x5e9)]()['note'];if(_0x1147f3[_0x1fe47c(0xa5d)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x1147f3[_0x1fe47c(0xa5d)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return _0x4d46c5(_0x3a5449['$1'])/0x64;else{let _0x5a7bf7=_0x195e51[_0x1fe47c(0xb36)][_0x1fe47c(0x9a1)][_0x1fe47c(0xa10)](this,_0x16de60);return _0x5a7bf7=this[_0x1fe47c(0x410)][_0x1fe47c(0x245)]*_0x5a7bf7+this[_0x1fe47c(0x410)][_0x1fe47c(0x71c)],_0x5a7bf7;}}}}},Window_PartyCommand[_0x164fcd(0x2bf)][_0x164fcd(0x4b2)]=function(){const _0x50607c=_0x164fcd;if(this[_0x50607c(0x313)])return this[_0x50607c(0x313)];return this[_0x50607c(0x313)]=SceneManager[_0x50607c(0x4c8)]['battleLayoutStyle'](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x164fcd(0x2bf)]['updateHelp']=function(){const _0x3cb368=_0x164fcd,_0x28dca7=VisuMZ[_0x3cb368(0xb36)][_0x3cb368(0x1de)]['PartyCmd'],_0xfb94b4=this[_0x3cb368(0xab8)]();switch(_0xfb94b4){case _0x3cb368(0x506):this[_0x3cb368(0x5ad)][_0x3cb368(0xc2a)](_0x28dca7[_0x3cb368(0x662)]);break;case'autoBattle':this[_0x3cb368(0x5ad)][_0x3cb368(0xc2a)](_0x28dca7[_0x3cb368(0x1c1)]);break;case _0x3cb368(0x51f):this[_0x3cb368(0x5ad)]['setText'](_0x28dca7[_0x3cb368(0x5a9)]);break;case _0x3cb368(0xaee):this['_helpWindow'][_0x3cb368(0xc2a)](_0x28dca7['HelpEscape']);break;default:this['_helpWindow']['setText']('');break;}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xa89)]=Window_ActorCommand['prototype'][_0x164fcd(0x1ec)],Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x1ec)]=function(_0x2c8858){const _0x11b2c5=_0x164fcd;VisuMZ[_0x11b2c5(0xb36)]['Window_ActorCommand_initialize']['call'](this,_0x2c8858),this[_0x11b2c5(0x465)](_0x2c8858);},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x465)]=function(_0x563373){const _0x1eecc6=_0x164fcd,_0x330b72=new Rectangle(0x0,0x0,_0x563373[_0x1eecc6(0xab5)],_0x563373['height']);this[_0x1eecc6(0x80c)]=new Window_Base(_0x330b72),this[_0x1eecc6(0x80c)]['opacity']=0x0,this['addChild'](this[_0x1eecc6(0x80c)]),this['updateCommandNameWindow']();},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0xbae)]=function(){const _0x308d71=_0x164fcd;Window_Command[_0x308d71(0x2bf)][_0x308d71(0xbae)][_0x308d71(0xa10)](this);if(this[_0x308d71(0x80c)])this['updateCommandNameWindow']();},Window_ActorCommand[_0x164fcd(0x2bf)]['updateCommandNameWindow']=function(){const _0x5f4819=_0x164fcd,_0x291faa=this[_0x5f4819(0x80c)];_0x291faa[_0x5f4819(0x382)]['clear']();const _0x596aec=this[_0x5f4819(0xae7)](this[_0x5f4819(0xca1)]());if(_0x596aec==='icon'&&this['maxItems']()>0x0){const _0x26ed23=this[_0x5f4819(0xd1c)](this[_0x5f4819(0xca1)]());let _0x341459=this[_0x5f4819(0x42c)](this[_0x5f4819(0xca1)]());_0x341459=_0x341459['replace'](/\\I\[(\d+)\]/gi,''),_0x291faa[_0x5f4819(0x599)](),this[_0x5f4819(0x51a)](_0x341459,_0x26ed23),this[_0x5f4819(0x43b)](_0x341459,_0x26ed23),this[_0x5f4819(0x232)](_0x341459,_0x26ed23);}},Window_ActorCommand['prototype'][_0x164fcd(0x51a)]=function(_0x4299ac,_0x248539){},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x43b)]=function(_0x519e4d,_0x4076c1){const _0x526df5=_0x164fcd,_0x529d08=this[_0x526df5(0x80c)];_0x529d08[_0x526df5(0xaa5)](_0x519e4d,0x0,_0x4076c1['y'],_0x529d08[_0x526df5(0x96e)],'center');},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x232)]=function(_0x9550ee,_0x464c24){const _0x110966=_0x164fcd,_0x557482=this[_0x110966(0x80c)],_0x59d403=$gameSystem[_0x110966(0x416)](),_0x5cc680=_0x464c24['x']+Math[_0x110966(0x923)](_0x464c24[_0x110966(0xab5)]/0x2)+_0x59d403;_0x557482['x']=_0x557482['width']/-0x2+_0x5cc680,_0x557482['y']=Math[_0x110966(0x923)](_0x464c24[_0x110966(0x5e0)]/0x2);},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x3a4)]=function(){const _0x1914ea=_0x164fcd;if(!this[_0x1914ea(0x41e)])return;const _0x505f99=this['_actor']['battleCommands']();for(const _0x1d0744 of _0x505f99){_0x1914ea(0x73b)!==_0x1914ea(0x73b)?(_0x388405(_0x1914ea(0x5d7)[_0x1914ea(0x272)](_0x20accf,_0x54b796)),_0x499a35[_0x1914ea(0x7f7)]()):this[_0x1914ea(0xc28)](_0x1d0744[_0x1914ea(0x7e1)]()[_0x1914ea(0xab7)]());}},Window_ActorCommand[_0x164fcd(0x2bf)]['makeBattleCommand']=function(_0x360716){const _0x3c0385=_0x164fcd;_0x360716==='ATTACK'&&this[_0x3c0385(0x429)]();[_0x3c0385(0x11b),_0x3c0385(0x1fa)][_0x3c0385(0x893)](_0x360716)&&('HpjkL'!==_0x3c0385(0x7c2)?this['addSkillCommands']():this['isQueueOptionsMenu']()?(this[_0x3c0385(0x7ff)]=!![],this['_logWindow'][_0x3c0385(0x56b)]('addText',_0x454f38[_0x3c0385(0xb36)]['Settings']['PartyCmd'][_0x3c0385(0x3c0)])):this[_0x3c0385(0x25b)]());_0x360716===_0x3c0385(0x6dc)&&this[_0x3c0385(0xb73)]();_0x360716===_0x3c0385(0x39e)&&this[_0x3c0385(0x658)]();_0x360716==='ESCAPE'&&(_0x3c0385(0x173)!==_0x3c0385(0x16a)?this[_0x3c0385(0x802)]():(this['setBattlerFlip'](![]),this[_0x3c0385(0xb04)]=_0x17c5c8,this[_0x3c0385(0xc19)]=_0x38c6c0));_0x360716===_0x3c0385(0x8dc)&&('mAHlp'!==_0x3c0385(0xce5)?(_0x75981b+=_0x3a9bca,_0x4b4303+=_0x22e39e[_0x3c0385(0x31f)]()?-_0x56ccb4:_0x4b9dfe):this[_0x3c0385(0x1b4)]());if(_0x360716[_0x3c0385(0xa5d)](/STYPE: (\d+)/i)){const _0x1ec0e2=Number(RegExp['$1']);this[_0x3c0385(0x728)](_0x1ec0e2);}else{if(_0x360716['match'](/STYPE: (.*)/i)){const _0x343f2a=DataManager['getStypeIdWithName'](RegExp['$1']);this[_0x3c0385(0x728)](_0x343f2a);}}_0x360716===_0x3c0385(0x6a1)&&this[_0x3c0385(0x236)]();if(_0x360716[_0x3c0385(0xa5d)](/SKILL: (\d+)/i)){const _0x4bc5b4=Number(RegExp['$1']);this[_0x3c0385(0x5e8)]($dataSkills[_0x4bc5b4]);}else{if(_0x360716[_0x3c0385(0xa5d)](/SKILL: (.*)/i)){const _0x1aa08d=DataManager[_0x3c0385(0xb69)](RegExp['$1']);this[_0x3c0385(0x5e8)]($dataSkills[_0x1aa08d]);}}_0x360716===_0x3c0385(0x7d1)&&Imported['VisuMZ_2_PartySystem']&&(_0x3c0385(0xd09)===_0x3c0385(0x562)?(this['_distortionSprite'][_0x3c0385(0x18a)]['x']=this[_0x3c0385(0x3ca)],this[_0x3c0385(0x4e7)]['skew']['y']=this[_0x3c0385(0x420)]):this[_0x3c0385(0x6f5)]());[_0x3c0385(0x3d6),'COMBAT\x20LOG'][_0x3c0385(0x893)](_0x360716)&&Imported['VisuMZ_4_CombatLog']&&this['addCombatLogCommand']();_0x360716==='WEAPON\x20SWAP'&&Imported[_0x3c0385(0xc48)]&&this[_0x3c0385(0x5a3)](!![]);if(_0x360716===_0x3c0385(0xbea)&&Imported[_0x3c0385(0x1a3)]){if(_0x3c0385(0x22a)!=='FpjNB')this['addBattleGridMoveCommand']();else return this[_0x3c0385(0x856)]();}},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x429)]=function(){const _0x2857f6=_0x164fcd,_0x5f01a4=$dataSkills[this[_0x2857f6(0x41e)][_0x2857f6(0x51d)]()];if(!_0x5f01a4)return;if(!this['canAddSkillCommand'](_0x5f01a4))return;const _0x29ed3=this['commandStyle'](),_0x47d607=DataManager[_0x2857f6(0xc9f)](_0x5f01a4),_0x5ab226=DataManager['battleCommandIcon'](_0x5f01a4),_0x2322c7=_0x29ed3===_0x2857f6(0xb1d)?_0x47d607:_0x2857f6(0x478)[_0x2857f6(0x272)](_0x5ab226,_0x47d607);this[_0x2857f6(0x6a2)](_0x2322c7,_0x2857f6(0xb4e),this[_0x2857f6(0x41e)]['canAttack']());},Window_ActorCommand['prototype']['addGuardCommand']=function(){const _0x1cc44b=_0x164fcd,_0x2c7166=$dataSkills[this[_0x1cc44b(0x41e)][_0x1cc44b(0xc15)]()];if(!_0x2c7166)return;if(!this['canAddSkillCommand'](_0x2c7166))return;const _0x229a78=this[_0x1cc44b(0xb3c)](),_0x3a29fc=DataManager['battleCommandName'](_0x2c7166),_0x3e1c48=DataManager[_0x1cc44b(0xb51)](_0x2c7166),_0x45ea06=_0x229a78===_0x1cc44b(0xb1d)?_0x3a29fc:_0x1cc44b(0x478)[_0x1cc44b(0x272)](_0x3e1c48,_0x3a29fc);this[_0x1cc44b(0x6a2)](_0x45ea06,_0x1cc44b(0x7a7),this[_0x1cc44b(0x41e)][_0x1cc44b(0xbb6)]());},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x658)]=function(){const _0x28d774=_0x164fcd,_0x2b33a1=this['commandStyle'](),_0x3dbb46=VisuMZ[_0x28d774(0xb36)][_0x28d774(0x1de)]['ActorCmd'][_0x28d774(0x7f5)],_0x427475=_0x2b33a1==='text'?TextManager[_0x28d774(0x5e9)]:_0x28d774(0x478)[_0x28d774(0x272)](_0x3dbb46,TextManager['item']),_0xef18eb=this[_0x28d774(0x387)]();this[_0x28d774(0x6a2)](_0x427475,_0x28d774(0x5e9),_0xef18eb);},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x387)]=function(){const _0x1d6b3c=_0x164fcd;return this[_0x1d6b3c(0x41e)]&&this[_0x1d6b3c(0x41e)][_0x1d6b3c(0x97a)]();},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x62c)]=function(){const _0x28b653=_0x164fcd,_0xa5da3b=this['_actor']['skillTypes']();for(const _0x30b421 of _0xa5da3b){_0x28b653(0xa61)===_0x28b653(0x500)?(this[_0x28b653(0x20c)](),this[_0x28b653(0x710)]()):this[_0x28b653(0x728)](_0x30b421);}},Window_ActorCommand[_0x164fcd(0x2bf)]['addSkillTypeCommand']=function(_0x23dc76){const _0x4399ef=_0x164fcd;let _0x49f851=$dataSystem[_0x4399ef(0xb70)][_0x23dc76];if(!_0x49f851)return;let _0x597d68=_0x49f851;const _0x41f019=this[_0x4399ef(0xb3c)]();if(_0x41f019==='text')_0x597d68=_0x597d68['replace'](/\x1I\[(\d+)\]/gi,''),_0x597d68=_0x597d68[_0x4399ef(0x6db)](/\\I\[(\d+)\]/gi,'');else{if(!_0x49f851[_0x4399ef(0xa5d)](/\\I\[(\d+)\]/i)){const _0x4ed34c=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ[_0x4399ef(0x8fc)][_0x4399ef(0x1de)][_0x4399ef(0x877)]:VisuMZ['BattleCore'][_0x4399ef(0x1de)][_0x4399ef(0x560)],_0x47da13=$dataSystem[_0x4399ef(0x777)][_0x4399ef(0x893)](_0x23dc76),_0x3ea7f1=_0x47da13?_0x4ed34c[_0x4399ef(0x630)]:_0x4ed34c['IconStypeNorm'];_0x597d68=_0x4399ef(0x478)[_0x4399ef(0x272)](_0x3ea7f1,_0x49f851);}}this['addCommand'](_0x597d68,'skill',!![],_0x23dc76);},Window_ActorCommand['prototype'][_0x164fcd(0x236)]=function(){const _0x12dde9=_0x164fcd,_0x5ccfa1=this[_0x12dde9(0x41e)][_0x12dde9(0xb70)](),_0x4a2c19=this[_0x12dde9(0x41e)][_0x12dde9(0x2d5)]();for(const _0x14daa4 of _0x4a2c19){if(_0x12dde9(0x347)!=='YjHyk'){const _0x5c579e=_0x144b25[_0x1fe536];if(_0x5c579e)_0x519056['push'](_0x464f00[_0x12dde9(0x835)](_0x5c579e));}else{if(!_0x14daa4)continue;if(Imported[_0x12dde9(0xad2)]){if(this[_0x12dde9(0x521)](_0x14daa4))continue;if(this[_0x12dde9(0x34e)](_0x14daa4))continue;}else{if(!_0x5ccfa1[_0x12dde9(0x893)](_0x14daa4[_0x12dde9(0x9e7)])){if('NdyIR'!==_0x12dde9(0x4ac))this[_0x12dde9(0x6b6)]=this[_0x12dde9(0x9b2)],this[_0x12dde9(0x6b6)][_0x12dde9(0x4a8)]='charged',this[_0x12dde9(0x4d8)]=!![],this[_0x12dde9(0x9b2)]=null;else continue;}}this[_0x12dde9(0x5e8)](_0x14daa4);}}},Window_ActorCommand['prototype']['noSimilarSTypes']=function(_0x1330a0){const _0x55afa0=_0x164fcd,_0xfb7018=this[_0x55afa0(0x41e)][_0x55afa0(0xb70)](),_0xcd7b9c=_0xfb7018[_0x55afa0(0x69f)](_0x25de90=>DataManager[_0x55afa0(0xc9a)](_0x1330a0)[_0x55afa0(0x893)](_0x25de90));return _0xcd7b9c[_0x55afa0(0xd04)]<=0x0;},Window_ActorCommand['prototype'][_0x164fcd(0x34e)]=function(_0x18aa93){const _0xf4160=_0x164fcd;if(Imported['VisuMZ_1_SkillsStatesCore']){if(VisuMZ[_0xf4160(0x8fc)]['version']>=1.24){if(this[_0xf4160(0x41e)]){if(!VisuMZ[_0xf4160(0x8fc)][_0xf4160(0xa60)](this[_0xf4160(0x41e)],_0x18aa93))return!![];if(!VisuMZ[_0xf4160(0x8fc)][_0xf4160(0x292)](this[_0xf4160(0x41e)],_0x18aa93))return!![];if(!VisuMZ['SkillsStatesCore'][_0xf4160(0x3f5)](this['_actor'],_0x18aa93))return!![];}}else{if(!Window_SkillList[_0xf4160(0x2bf)][_0xf4160(0xbb7)][_0xf4160(0xa10)](this,_0x18aa93))return!![];if(!Window_SkillList[_0xf4160(0x2bf)][_0xf4160(0xce8)][_0xf4160(0xa10)](this,_0x18aa93))return!![];if(!Window_SkillList[_0xf4160(0x2bf)][_0xf4160(0x35a)][_0xf4160(0xa10)](this,_0x18aa93))return!![];}}return![];},Window_ActorCommand['prototype'][_0x164fcd(0x5e8)]=function(_0x188383){const _0x120d38=_0x164fcd;if(!_0x188383)return;if(!this[_0x120d38(0x974)](_0x188383))return;const _0xe3a4b6=this[_0x120d38(0xb3c)](),_0x52cf88=DataManager[_0x120d38(0xc9f)](_0x188383),_0x5a4102=DataManager[_0x120d38(0xb51)](_0x188383),_0x1ee82a=_0xe3a4b6===_0x120d38(0xb1d)?_0x52cf88:_0x120d38(0x478)[_0x120d38(0x272)](_0x5a4102,_0x52cf88),_0x4efa9f=this[_0x120d38(0x41e)][_0x120d38(0x71f)](_0x188383);this[_0x120d38(0x6a2)](_0x1ee82a,'singleSkill',_0x4efa9f,_0x188383['id']);},Window_ActorCommand['prototype']['canAddSkillCommand']=function(_0x4fb976){const _0x44a67b=_0x164fcd,_0x2afa5b=_0x4fb976['note'];if(_0x2afa5b[_0x44a67b(0xa5d)](/<COMMAND REQUIRE LEARN>/i)){if(_0x44a67b(0x339)!=='NTzfH')this['_battlePortrait']='',this[_0x44a67b(0x6ae)]()&&this[_0x44a67b(0x6ae)]()[_0x44a67b(0x9ea)][_0x44a67b(0xa5d)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x44a67b(0x89b)]=_0x5ce9c7(_0x37470e['$1']));else{if(!this[_0x44a67b(0x41e)][_0x44a67b(0xd1a)](_0x4fb976['id']))return![];}}if(_0x2afa5b[_0x44a67b(0xa5d)](/<COMMAND REQUIRE ACCESS>/i)){if(_0x44a67b(0xcb6)==='hFvIp'){if(!this['_actor'][_0x44a67b(0x6b8)](_0x4fb976['id']))return![];}else{_0x5cd27d[_0x44a67b(0xb36)]['Window_BattleActor_show']['call'](this);const _0x3fced1=_0x2e8904['inputtingAction']();if(_0x3fced1){const _0x3fbe9d=_0x388415['aliveMembers']();_0x3fced1[_0x44a67b(0x358)]()&&_0x3fbe9d[_0x44a67b(0xd04)]>0x1&&this[_0x44a67b(0x70e)](_0x44a67b(0x124),this[_0x44a67b(0x925)][_0x44a67b(0x1f7)](this));}}}const _0xf72017=VisuMZ[_0x44a67b(0xb36)][_0x44a67b(0x169)](_0x4fb976,_0x44a67b(0x171));if(VisuMZ[_0x44a67b(0xb36)]['JS'][_0xf72017]){if(!VisuMZ[_0x44a67b(0xb36)]['JS'][_0xf72017][_0x44a67b(0xa10)](this,this['_actor'],_0x4fb976))return![];}return VisuMZ[_0x44a67b(0xb36)]['CheckSkillCommandShowSwitches'](_0x4fb976);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x5dd)]=function(_0x187981){const _0x836925=_0x164fcd,_0x4450f4=_0x187981[_0x836925(0x9ea)];if(_0x4450f4[_0x836925(0xa5d)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3517f4=JSON[_0x836925(0x144)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x35d600 of _0x3517f4){if(_0x836925(0x419)==='DmQCC'){if(!$gameSwitches[_0x836925(0x8a7)](_0x35d600))return![];}else{const _0x14b99d=this[_0x836925(0x466)][_0x836925(0x990)](this[_0x836925(0xc95)]);this[_0x836925(0xa7e)](_0x14b99d);}}return!![];}if(_0x4450f4[_0x836925(0xa5d)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('sGblI'!==_0x836925(0xc29)){const _0x37e2e8=JSON[_0x836925(0x144)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0xb970ab of _0x37e2e8){if(!$gameSwitches[_0x836925(0x8a7)](_0xb970ab))return![];}return!![];}else _0x1b1b7b[_0x836925(0x2bf)][_0x836925(0x162)][_0x836925(0xa10)](this),this[_0x836925(0x5c4)]?this[_0x836925(0x9d2)]():_0x24b0d4[_0x836925(0xb36)][_0x836925(0x872)][_0x836925(0xa10)](this);}if(_0x4450f4['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3a99ed=JSON[_0x836925(0x144)]('['+RegExp['$1'][_0x836925(0xa5d)](/\d+/g)+']');for(const _0x276174 of _0x3a99ed){if(_0x836925(0x165)===_0x836925(0x165)){if($gameSwitches[_0x836925(0x8a7)](_0x276174))return!![];}else{const _0x4f6dce=this['_enemy'][_0x836925(0xcdd)]();this[_0x836925(0xcf5)]=new _0x126a99(_0x4f6dce[_0x836925(0xab5)],_0x4f6dce['height']),this[_0x836925(0x35c)][_0x836925(0xcf5)]=new _0x37b9d5(0x1,0x1);}}return![];}if(_0x4450f4[_0x836925(0xa5d)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x836925(0x9cf)!==_0x836925(0x93c)){const _0x467b77=JSON[_0x836925(0x144)]('['+RegExp['$1'][_0x836925(0xa5d)](/\d+/g)+']');for(const _0x3b231b of _0x467b77){if(!$gameSwitches[_0x836925(0x8a7)](_0x3b231b))return!![];}return![];}else{if(!this[_0x836925(0xc64)]())return;if(this[_0x836925(0xa87)]===_0x23fc31)return;this[_0x836925(0xa87)]=_0x5ebdbe,this['_floatDuration']=_0x528c1f,this['_floatWholeDuration']=_0x237ba0,this[_0x836925(0x1d9)]=_0x505c26||_0x836925(0x28c);if(_0x4115b5<=0x0)this['_floatHeight']=_0x34895a;}}if(_0x4450f4['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x160cb9=JSON[_0x836925(0x144)]('['+RegExp['$1'][_0x836925(0xa5d)](/\d+/g)+']');for(const _0x10c50e of _0x160cb9){if(!$gameSwitches[_0x836925(0x8a7)](_0x10c50e))return!![];}return![];}if(_0x4450f4['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('KOFqU'==='KOFqU'){const _0x382a71=JSON[_0x836925(0x144)]('['+RegExp['$1'][_0x836925(0xa5d)](/\d+/g)+']');for(const _0x286f17 of _0x382a71){if($gameSwitches[_0x836925(0x8a7)](_0x286f17))return![];}return!![];}else this['_stateIconSprite'][_0x836925(0xd03)](this[_0x836925(0x7f9)]);}return!![];},Window_ActorCommand['prototype'][_0x164fcd(0x802)]=function(){const _0x44ed45=_0x164fcd,_0x1efcc3=this[_0x44ed45(0xb3c)](),_0x468c3a=VisuMZ[_0x44ed45(0xb36)][_0x44ed45(0x1de)][_0x44ed45(0xcca)][_0x44ed45(0x2ff)],_0x1833db=_0x1efcc3===_0x44ed45(0xb1d)?TextManager['escape']:_0x44ed45(0x478)[_0x44ed45(0x272)](_0x468c3a,TextManager[_0x44ed45(0xaee)]),_0x823dc5=this[_0x44ed45(0xb21)]();this['addCommand'](_0x1833db,_0x44ed45(0xaee),_0x823dc5);},Window_ActorCommand['prototype']['isEscapeCommandEnabled']=function(){const _0x1aa726=_0x164fcd;return BattleManager[_0x1aa726(0x3c4)]();},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x1b4)]=function(){const _0x37e3ac=_0x164fcd,_0xa32802=this[_0x37e3ac(0xb3c)](),_0x5595bc=VisuMZ[_0x37e3ac(0xb36)]['Settings'][_0x37e3ac(0xcca)]['CmdIconAutoBattle'],_0x17076e=_0xa32802===_0x37e3ac(0xb1d)?TextManager[_0x37e3ac(0xac2)]:_0x37e3ac(0x478)[_0x37e3ac(0x272)](_0x5595bc,TextManager[_0x37e3ac(0xac2)]),_0x1e43fa=this['isAutoBattleCommandEnabled']();this['addCommand'](_0x17076e,_0x37e3ac(0xac2),_0x1e43fa);},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0xc65)]=function(){return!![];},Window_ActorCommand['prototype'][_0x164fcd(0x35d)]=function(){const _0x127a83=_0x164fcd;return VisuMZ[_0x127a83(0xb36)]['Settings']['ActorCmd']['CmdTextAlign'];},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x432)]=function(_0x2afea7){const _0x360bcd=_0x164fcd,_0x25c48c=this[_0x360bcd(0xae7)](_0x2afea7);if(_0x25c48c===_0x360bcd(0x821))this['drawItemStyleIconText'](_0x2afea7);else{if(_0x25c48c===_0x360bcd(0x3e0)){if('kjWGa'!==_0x360bcd(0x80d)){const _0x8062c6=this[_0x360bcd(0x41e)]['lastBattleSkill']();if(_0x8062c6){const _0x2c64e6=this[_0x360bcd(0x2e1)](_0x360bcd(0x40b),_0x8062c6['id']);this[_0x360bcd(0x71a)](_0x2c64e6||0x0);}}else this[_0x360bcd(0x929)](_0x2afea7);}else _0x360bcd(0x2c7)==='COapD'?_0x18624d+=_0x1ffbdc(_0x4d3bf3['$1']):Window_Command[_0x360bcd(0x2bf)][_0x360bcd(0x432)][_0x360bcd(0xa10)](this,_0x2afea7);}this['drawSingleSkillCost'](_0x2afea7);},Window_ActorCommand[_0x164fcd(0x2bf)]['commandStyle']=function(){const _0x4102d1=_0x164fcd;return VisuMZ['BattleCore'][_0x4102d1(0x1de)][_0x4102d1(0x560)][_0x4102d1(0x3b9)];},Window_ActorCommand[_0x164fcd(0x2bf)]['commandStyleCheck']=function(_0x2e31bd){const _0xbe6758=_0x164fcd;if(_0x2e31bd<0x0)return _0xbe6758(0xb1d);const _0x397567=this[_0xbe6758(0xb3c)]();if(_0x397567!==_0xbe6758(0x756)){if(_0xbe6758(0x446)!==_0xbe6758(0xa58))return _0x397567;else _0x4e12dc=_0x3e73b0[_0xbe6758(0x9e3)](_0x257e3f);}else{if(this[_0xbe6758(0x768)]()>0x0){if(_0xbe6758(0x2ad)===_0xbe6758(0x2ad)){const _0x428d1f=this[_0xbe6758(0x42c)](_0x2e31bd);if(_0x428d1f['match'](/\\I\[(\d+)\]/i)){if(_0xbe6758(0x5bc)===_0xbe6758(0x5bc)){const _0x5cf3c0=this['itemLineRect'](_0x2e31bd),_0x5425f5=this[_0xbe6758(0x45a)](_0x428d1f)['width'];return _0x5425f5<=_0x5cf3c0['width']?'iconText':_0xbe6758(0x3e0);}else return _0x2be5c8[_0xbe6758(0x69f)](_0x41fd6b=>_0x41fd6b[_0xbe6758(0x949)]()&&_0x41fd6b!==_0x18119d);}}else{_0x1464a5[_0xbe6758(0x2bf)]['refresh'][_0xbe6758(0xa10)](this),this[_0xbe6758(0x382)][_0xbe6758(0x7bf)]();if(!this[_0xbe6758(0x302)]())return;this['drawEnemyName']();}}}return _0xbe6758(0xb1d);},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x8de)]=function(_0x6d36f5){const _0x5da06c=_0x164fcd,_0x356466=this[_0x5da06c(0xd1c)](_0x6d36f5),_0x16cf68=this[_0x5da06c(0x42c)](_0x6d36f5),_0x1ce1ea=this[_0x5da06c(0x45a)](_0x16cf68)['width'];this['changePaintOpacity'](this[_0x5da06c(0x720)](_0x6d36f5));const _0x37d9c7=this[_0x5da06c(0x35d)]();if(_0x37d9c7===_0x5da06c(0x29e))this[_0x5da06c(0x625)](_0x16cf68,_0x356466['x']+_0x356466[_0x5da06c(0xab5)]-_0x1ce1ea,_0x356466['y'],_0x1ce1ea);else{if(_0x37d9c7===_0x5da06c(0x37f)){const _0x5e718d=_0x356466['x']+Math['floor']((_0x356466[_0x5da06c(0xab5)]-_0x1ce1ea)/0x2);this[_0x5da06c(0x625)](_0x16cf68,_0x5e718d,_0x356466['y'],_0x1ce1ea);}else this[_0x5da06c(0x625)](_0x16cf68,_0x356466['x'],_0x356466['y'],_0x1ce1ea);}},Window_ActorCommand[_0x164fcd(0x2bf)]['drawItemStyleIcon']=function(_0x147157){const _0x5228c4=_0x164fcd;this[_0x5228c4(0x42c)](_0x147157)[_0x5228c4(0xa5d)](/\\I\[(\d+)\]/i);const _0x560cb3=Number(RegExp['$1'])||0x0,_0x1afca7=this['itemLineRect'](_0x147157),_0x17f26b=_0x1afca7['x']+Math[_0x5228c4(0x923)]((_0x1afca7[_0x5228c4(0xab5)]-ImageManager[_0x5228c4(0x7b8)])/0x2),_0xa78f89=_0x1afca7['y']+(_0x1afca7[_0x5228c4(0x5e0)]-ImageManager[_0x5228c4(0x66d)])/0x2;this[_0x5228c4(0x431)](_0x560cb3,_0x17f26b,_0xa78f89);},Window_ActorCommand[_0x164fcd(0x2bf)]['drawSingleSkillCost']=function(_0x57a7ca){const _0x15514b=_0x164fcd;if(!(VisuMZ[_0x15514b(0xb36)]['Settings'][_0x15514b(0x560)]['ShowCosts']??!![]))return;const _0x4b768f=this[_0x15514b(0x8f1)](_0x57a7ca);if(![_0x15514b(0xb4e),_0x15514b(0x7a7),_0x15514b(0x40b)][_0x15514b(0x893)](_0x4b768f))return;const _0x5a77ad=this[_0x15514b(0xd1c)](_0x57a7ca);let _0x36d026=null;if(_0x4b768f===_0x15514b(0xb4e))_0x36d026=$dataSkills[this[_0x15514b(0x41e)][_0x15514b(0x51d)]()];else{if(_0x4b768f==='guard'){if(_0x15514b(0xb2f)===_0x15514b(0xd1b)){if(this[_0x15514b(0x86a)]())this[_0x15514b(0x79c)][_0x15514b(0xb05)](_0x54a033);}else _0x36d026=$dataSkills[this[_0x15514b(0x41e)][_0x15514b(0xc15)]()];}else _0x15514b(0x1ba)===_0x15514b(0x1ba)?_0x36d026=$dataSkills[this[_0x15514b(0x72f)][_0x57a7ca][_0x15514b(0x4ab)]]:(_0x3c68c3[_0x15514b(0xb36)][_0x15514b(0x736)][_0x15514b(0xa10)](this),_0x394348[_0x15514b(0x9c9)]());}this[_0x15514b(0x583)](this[_0x15514b(0x41e)],_0x36d026,_0x5a77ad['x'],_0x5a77ad['y'],_0x5a77ad[_0x15514b(0xab5)]);},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x583)]=function(_0x5ad8d7,_0x48b8f8,_0x7a6dc0,_0x1a0c7f,_0x1e1504){const _0x1dcd39=_0x164fcd;if(!_0x48b8f8)return;Imported[_0x1dcd39(0xad2)]?Window_Command[_0x1dcd39(0x2bf)][_0x1dcd39(0x583)][_0x1dcd39(0xa10)](this,_0x5ad8d7,_0x48b8f8,_0x7a6dc0,_0x1a0c7f,_0x1e1504):Window_SkillList[_0x1dcd39(0x2bf)][_0x1dcd39(0x583)][_0x1dcd39(0xa10)](this,_0x48b8f8,_0x7a6dc0,_0x1a0c7f,_0x1e1504);},Window_ActorCommand['prototype'][_0x164fcd(0xad3)]=function(){},Window_ActorCommand['prototype']['activate']=function(){const _0x5477ed=_0x164fcd;Window_Command['prototype'][_0x5477ed(0xa49)][_0x5477ed(0xa10)](this);const _0x2c3316=this[_0x5477ed(0x4b2)]();if(_0x2c3316===_0x5477ed(0x7e6)){if(_0x5477ed(0x704)==='pYgAf'){if(_0x39f84a[_0x5477ed(0xb36)][_0x5477ed(0x1b0)][_0x538ff9]){const _0x5c3488=_0xa0b338[_0x5477ed(0xb36)][_0x5477ed(0x1b0)][_0x1f2af1],_0x2cdb64={'code':0x2c,'dataId':_0x5c3488,'value1':0x1,'value2':0x0};_0x2fedaf[_0x5477ed(0x5f9)][_0x5477ed(0x56b)](_0x2cdb64);}}else this[_0x5477ed(0xa63)]();}},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x4b2)]=function(){const _0x4774e2=_0x164fcd;if(this[_0x4774e2(0x313)])return this[_0x4774e2(0x313)];return this[_0x4774e2(0x313)]=SceneManager[_0x4774e2(0x4c8)][_0x4774e2(0x4b2)](),this[_0x4774e2(0x313)];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xbc3)]=Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0xd03)],Window_ActorCommand['prototype'][_0x164fcd(0xd03)]=function(_0x28c08c){const _0x495243=_0x164fcd,_0x3b8dcf=this['battleLayoutStyle']();if(_0x28c08c&&['xp','portrait'][_0x495243(0x893)](_0x3b8dcf))_0x495243(0x384)!==_0x495243(0x454)?this[_0x495243(0x1d5)](_0x28c08c):(_0x19a10e[_0x495243(0x2bf)][_0x495243(0xbfb)][_0x495243(0xa10)](this),this[_0x495243(0xacb)]());else _0x28c08c&&[_0x495243(0x7e6)][_0x495243(0x893)](_0x3b8dcf)&&(this[_0x495243(0x63d)](_0x28c08c),this[_0x495243(0xa63)]());VisuMZ['BattleCore'][_0x495243(0xbc3)][_0x495243(0xa10)](this,_0x28c08c),_0x28c08c&&$gameTroop[_0x495243(0x279)]()[_0x495243(0xd04)]>0x0&&_0x28c08c[_0x495243(0x921)]()&&('lxARQ'!==_0x495243(0x6a3)?_0x28c08c[_0x495243(0x921)]()[_0x495243(0x275)]():(_0x541dee[_0x495243(0xb36)]['Game_Interpreter_terminate']['call'](this),this[_0x495243(0xc10)]&&(this[_0x495243(0xc10)]=_0x42c678,_0x524a33['_scene']['battleCoreResumeLaunchBattle']())));},Window_ActorCommand[_0x164fcd(0x2bf)]['resizeWindowXPStyle']=function(_0x4d8731){const _0x4a3f7d=_0x164fcd,_0x101d90=Math[_0x4a3f7d(0xa13)](Graphics[_0x4a3f7d(0x273)]/0x3),_0x272757=Math[_0x4a3f7d(0xa13)](Graphics[_0x4a3f7d(0x273)]/$gameParty['battleMembers']()[_0x4a3f7d(0xd04)]),_0x5bb73c=Math[_0x4a3f7d(0x584)](_0x101d90,_0x272757),_0x47abe2=this[_0x4a3f7d(0xbe1)](VisuMZ[_0x4a3f7d(0xb36)][_0x4a3f7d(0x1de)][_0x4a3f7d(0x9a3)][_0x4a3f7d(0x82f)]),_0x45964f=Math[_0x4a3f7d(0xa13)](_0x272757*_0x4d8731[_0x4a3f7d(0xca1)]())+Math['round']((_0x272757-_0x5bb73c)/0x2),_0x2abb21=Math[_0x4a3f7d(0xa13)](SceneManager[_0x4a3f7d(0x4c8)][_0x4a3f7d(0x8c5)]['y']-_0x47abe2);this[_0x4a3f7d(0xb60)](_0x45964f,_0x2abb21,_0x5bb73c,_0x47abe2),this[_0x4a3f7d(0x828)](),this[_0x4a3f7d(0x518)](0x1);},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x63d)]=function(_0x4938e1){const _0x138bb1=_0x164fcd,_0x383c22=SceneManager[_0x138bb1(0x4c8)][_0x138bb1(0x92d)]();this[_0x138bb1(0xb60)](_0x383c22['x'],_0x383c22['y'],_0x383c22[_0x138bb1(0xab5)],_0x383c22[_0x138bb1(0x5e0)]),this[_0x138bb1(0x828)](),this[_0x138bb1(0x518)](0x0);},Window_ActorCommand[_0x164fcd(0x2bf)]['refreshDimmerBitmap']=function(){const _0x40b180=_0x164fcd;if(this[_0x40b180(0xcb5)]){if('tXkjB'===_0x40b180(0x532)){const _0x2230f2=this[_0x40b180(0xcb5)][_0x40b180(0xcf5)],_0x558b27=this[_0x40b180(0xab5)]-0x8,_0x1eb44a=this[_0x40b180(0x5e0)],_0xb61bd8=this['padding'],_0x41b85c=ColorManager[_0x40b180(0x60b)](),_0x4cabea=ColorManager[_0x40b180(0xcbc)]();this[_0x40b180(0xcb5)]['x']=0x4,_0x2230f2['resize'](_0x558b27,_0x1eb44a),_0x2230f2[_0x40b180(0xb90)](0x0,0x0,_0x558b27,_0xb61bd8,_0x4cabea,_0x41b85c,!![]),_0x2230f2[_0x40b180(0x829)](0x0,_0xb61bd8,_0x558b27,_0x1eb44a-_0xb61bd8*0x2,_0x41b85c),_0x2230f2['gradientFillRect'](0x0,_0x1eb44a-_0xb61bd8,_0x558b27,_0xb61bd8,_0x41b85c,_0x4cabea,!![]),this[_0x40b180(0xcb5)][_0x40b180(0x522)](0x0,0x0,_0x558b27,_0x1eb44a);}else this[_0x40b180(0x23a)](this['_uiContainer']);}},Window_ActorCommand[_0x164fcd(0x2bf)]['updateHelp']=function(){const _0x2141c2=_0x164fcd;if(!this[_0x2141c2(0x41e)])return;const _0x30cf37=VisuMZ['BattleCore']['Settings']['ActorCmd'],_0x9236e6=this['currentSymbol']();switch(_0x9236e6){case'attack':this[_0x2141c2(0x3ea)]($dataSkills[this[_0x2141c2(0x41e)][_0x2141c2(0x51d)]()]);break;case _0x2141c2(0x7a7):this[_0x2141c2(0x3ea)]($dataSkills[this[_0x2141c2(0x41e)][_0x2141c2(0xc15)]()]);break;case _0x2141c2(0x880):const _0x47611a=_0x30cf37[_0x2141c2(0xb44)],_0x5bdb88=_0x47611a[_0x2141c2(0x272)]($dataSystem['skillTypes'][this[_0x2141c2(0x96d)]()]);this[_0x2141c2(0x5ad)][_0x2141c2(0xc2a)](_0x5bdb88);break;case _0x2141c2(0x40b):this[_0x2141c2(0x3ea)]($dataSkills[this['currentExt']()]);break;case _0x2141c2(0x5e9):this[_0x2141c2(0x5ad)][_0x2141c2(0xc2a)](_0x30cf37[_0x2141c2(0x9ff)]);break;case _0x2141c2(0xaee):this[_0x2141c2(0x5ad)]['setText'](_0x30cf37[_0x2141c2(0x5f0)]);break;case _0x2141c2(0xac2):this[_0x2141c2(0x5ad)]['setText'](_0x30cf37['HelpAutoBattle']);break;default:this['_helpWindow'][_0x2141c2(0xc2a)]('');break;}},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x693)]=function(){const _0x168b4a=_0x164fcd;this['forceSelect'](0x0);if(this[_0x168b4a(0x41e)]&&ConfigManager[_0x168b4a(0xa05)]){if(_0x168b4a(0x1d7)===_0x168b4a(0xa12)){const _0x2f64d8=_0x1fdb1e['note'];if(_0x2f64d8[_0x168b4a(0xa5d)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x1315dd=_0x4e77b7(_0x12a3cf['$1']),_0xa093e7=_0x701aec[_0x168b4a(0xb36)][_0x168b4a(0x169)](_0x45c327,_0x168b4a(0x7cc));_0xb73da8[_0x168b4a(0xb36)][_0x168b4a(0x163)](_0x1315dd,_0xa093e7);}if(_0x2f64d8[_0x168b4a(0xa5d)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x3e3ea8=_0x45c03c(_0x58f09d['$1']),_0x4c9c93=_0x49b792[_0x168b4a(0xb36)][_0x168b4a(0x169)](_0x5a7332,'CommandVisible');_0x33fa88['BattleCore']['createCommandVisibleJS'](_0x3e3ea8,_0x4c9c93);}}else{const _0x52f21e=this[_0x168b4a(0x41e)][_0x168b4a(0xd0b)]();this[_0x168b4a(0x7b2)](_0x52f21e);if(_0x52f21e===_0x168b4a(0x880)){const _0x45f947=this[_0x168b4a(0x41e)][_0x168b4a(0x796)]();if(_0x45f947){if(_0x168b4a(0x9ad)==='jTtzy'){const _0x31f50e=this['findSymbolExt'](_0x168b4a(0x880),_0x45f947[_0x168b4a(0x9e7)]);this[_0x168b4a(0x71a)](_0x31f50e||0x0);}else{if(!_0x3d3628['isSceneBattle']())return;if(!_0x9041c6[_0x168b4a(0x2d3)])return;_0x379f5b[_0x168b4a(0x48e)](_0x57328d,_0x2955f4);const _0xeab94=_0x5a7c37[_0x168b4a(0x1da)](),_0x227f08=_0x21bb6a[_0x168b4a(0x860)];if(!_0xeab94)return;_0x55e026[_0x168b4a(0x653)](_0x135a0d[_0x168b4a(0xceb)],_0x29a59c[_0x168b4a(0x908)],_0x2bc9ad['EasingType']);if(_0x227f08)_0xeab94[_0x168b4a(0x3a2)](_0x168b4a(0x811));}}}else{if(_0x52f21e===_0x168b4a(0x40b)){if(_0x168b4a(0xc62)!==_0x168b4a(0x79b)){const _0x43bf9f=this[_0x168b4a(0x41e)][_0x168b4a(0x796)]();if(_0x43bf9f){if(_0x168b4a(0xb61)==='zTXLh')_0x471a8c+=_0x592c28['isActor']()?-_0x583439:_0x324482,_0x2ac2fc+=_0x345469['isActor']()?-_0x8f13c2:_0x39cbbc;else{const _0x58a2ab=this[_0x168b4a(0x2e1)](_0x168b4a(0x40b),_0x43bf9f['id']);this[_0x168b4a(0x71a)](_0x58a2ab||0x0);}}}else return _0x4718fd[_0x168b4a(0xb36)][_0x168b4a(0x1de)][_0x168b4a(0xcca)]['CommandAddAutoBattle'];}}}}},Window_ActorCommand[_0x164fcd(0x2bf)][_0x164fcd(0x2e1)]=function(_0x53b0e1,_0xaf7c27){const _0x50eb2a=_0x164fcd;return this['_list'][_0x50eb2a(0x842)](_0x477a5e=>_0x477a5e[_0x50eb2a(0xcb2)]===_0x53b0e1&&_0x477a5e[_0x50eb2a(0x4ab)]===_0xaf7c27);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x470)]=Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x1ec)],Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x1ec)]=function(_0x2a2529){const _0x362114=_0x164fcd;VisuMZ[_0x362114(0xb36)][_0x362114(0x470)]['call'](this,_0x2a2529),this['initBattleCore'](),this[_0x362114(0xc0c)]();},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x4b2)]=function(){const _0x29108c=_0x164fcd;if(this['_battleLayoutStyle'])return this[_0x29108c(0x313)];return this[_0x29108c(0x313)]=SceneManager['_scene'][_0x29108c(0x4b2)](),this[_0x29108c(0x313)];},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x2e2)]=function(){const _0x1ffb80=_0x164fcd;this['frameVisible']=this['isFrameVisible']();const _0x23d9fe=VisuMZ[_0x1ffb80(0xb36)][_0x1ffb80(0x1de)]['BattleLayout'];if(_0x23d9fe[_0x1ffb80(0x4cc)]){if(_0x1ffb80(0x123)===_0x1ffb80(0x857)){const _0x499576=this[_0x1ffb80(0x6e1)];return _0x499576[_0x1ffb80(0xa5d)](/ACTOR/i)?this[_0x1ffb80(0xbe6)]()[_0x1ffb80(0x148)]():this[_0x1ffb80(0xb4f)]()[_0x1ffb80(0x148)]();}else this[_0x1ffb80(0x4c4)]=0x0;}},Window_BattleStatus[_0x164fcd(0x2bf)]['isFrameVisible']=function(){const _0xb5c38d=_0x164fcd,_0x14c6da=VisuMZ[_0xb5c38d(0xb36)][_0xb5c38d(0x1de)]['BattleLayout'];if(_0x14c6da[_0xb5c38d(0x379)]){if(_0xb5c38d(0x7b4)!==_0xb5c38d(0x447))return!![];else{if(this[_0xb5c38d(0x4b2)]()==='border')return this[_0xb5c38d(0x856)]();else return this[_0xb5c38d(0x9d8)]()?this[_0xb5c38d(0xbe0)]():_0x153426[_0xb5c38d(0xb36)]['Scene_Battle_itemWindowRect']['call'](this);}}const _0x2f7b91=this[_0xb5c38d(0x4b2)]();switch(_0x2f7b91){case'list':case _0xb5c38d(0x7e6):return!![];break;case _0xb5c38d(0x18e):case'xp':case _0xb5c38d(0x404):default:return![];break;}},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0xccc)]=function(){return this['isFrameVisible']()?0x0:0xa;},Window_BattleStatus[_0x164fcd(0x2bf)]['maxCols']=function(){const _0x4632ea=_0x164fcd,_0x259b49=this[_0x4632ea(0x4b2)]();switch(_0x259b49){case _0x4632ea(0xa4e):return 0x1;break;case'xp':case _0x4632ea(0x404):return $gameParty['battleMembers']()[_0x4632ea(0xd04)];break;case'default':default:return $gameParty[_0x4632ea(0x91c)]();break;}},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x740)]=function(){const _0x5dba7a=_0x164fcd,_0x29dc03=this[_0x5dba7a(0x4b2)]();switch(_0x29dc03){case _0x5dba7a(0xa4e):return Window_StatusBase[_0x5dba7a(0x2bf)][_0x5dba7a(0x740)]['call'](this);break;case _0x5dba7a(0x18e):case'xp':case'portrait':default:return this[_0x5dba7a(0xcd0)];break;}},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x3ac)]=function(){const _0x39ea19=_0x164fcd,_0x1b0a44=this[_0x39ea19(0x4b2)]();switch(_0x1b0a44){case'list':return Window_StatusBase[_0x39ea19(0x2bf)][_0x39ea19(0x3ac)]['call'](this);break;case _0x39ea19(0x18e):case'xp':case _0x39ea19(0x404):default:return 0x0;break;}},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x586)]=function(){const _0xeae9da=_0x164fcd;this['isFrameVisible']()?Window_StatusBase['prototype']['updatePadding'][_0xeae9da(0xa10)](this):this[_0xeae9da(0xc5b)]=0x8;},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x4ec)]=function(){const _0x52024d=_0x164fcd,_0x21a3e9=VisuMZ[_0x52024d(0xb36)]['Settings'][_0x52024d(0x9a3)];if(_0x21a3e9[_0x52024d(0x379)])this[_0x52024d(0x32e)]=ImageManager[_0x52024d(0xa99)](_0x21a3e9['StatusWindowSkinFilename']);else{if(_0x52024d(0x192)===_0x52024d(0x192))Window_StatusBase['prototype']['loadWindowskin'][_0x52024d(0xa10)](this);else{const _0x2cd183=this['createChildSprite'](_0x1b9a9c,_0xf129ea);_0x2cd183[_0x52024d(0xcf5)][_0x52024d(0xaa5)](_0x491e52[_0x1a2ad1],0x0,0x0,_0x48081c,_0x1bf8ce,'center'),_0x2cd183['x']=(_0x2bcd04-(_0x380782[_0x52024d(0xd04)]-0x1)/0x2)*_0x1f333e,_0x2cd183['dy']=-_0x4e7060;}}},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x38e)]=function(_0xfcc878){const _0x10e3bd=_0x164fcd,_0x161da6=VisuMZ[_0x10e3bd(0xb36)]['Settings'][_0x10e3bd(0x9a3)];if(_0x161da6[_0x10e3bd(0x252)])return;Window_StatusBase[_0x10e3bd(0x2bf)][_0x10e3bd(0x38e)][_0x10e3bd(0xa10)](this,_0xfcc878);},Window_BattleStatus['prototype']['requestRefresh']=function(){const _0x1db09c=_0x164fcd;this[_0x1db09c(0x534)]=!![];},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x71d)]=function(){const _0x2f2b7f=_0x164fcd;Window_StatusBase[_0x2f2b7f(0x2bf)][_0x2f2b7f(0x71d)]['call'](this),this[_0x2f2b7f(0x27b)](),this['updateEffectContainers']();if(this[_0x2f2b7f(0x4b2)]()===_0x2f2b7f(0x7e6))this[_0x2f2b7f(0x54e)]();},Window_BattleStatus['prototype'][_0x164fcd(0x27b)]=function(){const _0x4d953e=_0x164fcd;if($gameTemp[_0x4d953e(0x827)]())this[_0x4d953e(0x55c)](),this[_0x4d953e(0x534)]=![],$gameTemp[_0x4d953e(0x9a7)]();else this['_requestRefresh']&&(_0x4d953e(0x7cb)==='jTBdZ'?(this['_requestRefresh']=![],this[_0x4d953e(0x72d)](),this['updateAttachmentSprites']()):_0x560458[_0x4d953e(0x933)](_0x577db6));},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0xc23)]=function(){const _0x6169be=_0x164fcd;Window_StatusBase[_0x6169be(0x2bf)][_0x6169be(0xc23)][_0x6169be(0xa10)](this);if(!$gameSystem['isSideView']())this[_0x6169be(0x72d)]();},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0xad3)]=function(){const _0x42f79f=_0x164fcd;if(this[_0x42f79f(0xc12)]===Window_BattleStatus)return;Window_StatusBase[_0x42f79f(0x2bf)]['hide'][_0x42f79f(0xa10)](this);},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x58e)]=function(_0x30d030){const _0x5789f7=_0x164fcd,_0x103558=this[_0x5789f7(0x4b2)]();switch(_0x103558){case'xp':case _0x5789f7(0x404):break;case'default':case _0x5789f7(0xa4e):case _0x5789f7(0x7e6):default:return Window_StatusBase[_0x5789f7(0x2bf)][_0x5789f7(0x58e)]['call'](this,_0x30d030);break;}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x4af)]=Window_BattleStatus['prototype'][_0x164fcd(0xa67)],Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0xa67)]=function(_0x378c7e){const _0x4c7f7e=_0x164fcd,_0x29d99a=this[_0x4c7f7e(0x4b2)]();switch(_0x29d99a){case _0x4c7f7e(0xa4e):this[_0x4c7f7e(0x4d7)](_0x378c7e);break;case'xp':this[_0x4c7f7e(0x747)](_0x378c7e);break;case'portrait':this[_0x4c7f7e(0x6b9)](_0x378c7e);break;case _0x4c7f7e(0x18e):case'border':default:VisuMZ['BattleCore']['Window_BattleStatus_drawItemImage'][_0x4c7f7e(0xa10)](this,_0x378c7e);break;}},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x831)]=function(_0xce5eea){const _0x32aff8=_0x164fcd,_0xc20adc=this[_0x32aff8(0x4b2)]();if(!$gameSystem[_0x32aff8(0x709)]())this[_0x32aff8(0x684)](_0xce5eea);switch(_0xc20adc){case _0x32aff8(0xa4e):this['drawItemStatusListStyle'](_0xce5eea);break;case'xp':case _0x32aff8(0x404):case'default':case _0x32aff8(0x7e6):default:this[_0x32aff8(0x4e5)](_0xce5eea);break;}},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0xad8)]=function(){const _0x46b395=_0x164fcd,_0x197e5d=this[_0x46b395(0x4b2)]();if(['xp'][_0x46b395(0x893)](_0x197e5d)&&!$gameSystem[_0x46b395(0x709)]()){this[_0x46b395(0x972)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x46b395(0x2bf)][_0x46b395(0xad8)][_0x46b395(0xa10)](this);},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x684)]=function(_0x2ff92f){const _0x309205=_0x164fcd,_0x17e9b4=this[_0x309205(0x6ae)](_0x2ff92f)[_0x309205(0x921)]();if(!_0x17e9b4)return;const _0xd335dd=this[_0x309205(0x4b2)](),_0x9652ac=this['itemRect'](_0x2ff92f);let _0x5d96cd=Math[_0x309205(0xa13)](_0x9652ac['x']+_0x9652ac['width']/0x2)+this[_0x309205(0xc5b)];[_0x309205(0xa4e)][_0x309205(0x893)](_0xd335dd)&&(_0x5d96cd=_0x9652ac[_0x309205(0xab5)]/$gameParty['battleMembers']()[_0x309205(0xd04)],_0x5d96cd*=_0x2ff92f,_0x5d96cd+=_0x9652ac[_0x309205(0xab5)]/$gameParty[_0x309205(0x4ff)]()[_0x309205(0xd04)]/0x2);let _0x271a7f=Math['round'](this['frontviewSpriteY'](_0x2ff92f,_0x17e9b4,_0x9652ac));_0x17e9b4['setHome'](_0x5d96cd,_0x271a7f),this[_0x309205(0x305)](_0x17e9b4,0x1),_0x17e9b4['show'](),this['updateEffectsContainer'](),this[_0x309205(0x40f)]();},Window_BattleStatus[_0x164fcd(0x2bf)]['frontviewSpriteY']=function(_0x48bd9e,_0x2a00de,_0x96511){const _0x147b13=_0x164fcd,_0xf54a7b=VisuMZ[_0x147b13(0xb36)][_0x147b13(0x1de)]['BattleLayout'],_0x4cd3c9=this[_0x147b13(0x4b2)]();if(_0x4cd3c9==='xp'){if(_0x147b13(0x3cf)!==_0x147b13(0xcb1)){const _0x5f0ed9=_0xf54a7b[_0x147b13(0x13a)];switch(_0x5f0ed9[_0x147b13(0x790)]()[_0x147b13(0xab7)]()){case _0x147b13(0x6b7):return _0x96511[_0x147b13(0x5e0)]-_0x2a00de['_shadowSprite'][_0x147b13(0x5e0)]/0x4;break;case _0x147b13(0x37f):const _0x3d3802=_0xf54a7b[_0x147b13(0x7d4)];return(_0x96511['height']+(_0x2a00de[_0x147b13(0x5e0)]||_0x3d3802))/0x2;break;case _0x147b13(0x1a1):return 0x0;case _0x147b13(0x16d):default:return this[_0x147b13(0x582)](_0x96511);break;}}else{let _0xeb1475=_0x2abce8[_0x147b13(0xb36)][_0x147b13(0x182)]['call'](this,_0xb1f81a,_0x52bf83);return this['disperseDamage'](_0xeb1475);}}else{if(_0x4cd3c9===_0x147b13(0x404)){}}return _0x2a00de[_0x147b13(0x5e0)];},Sprite_Name[_0x164fcd(0x2bf)]['bitmapHeight']=function(){return 0x24;},Sprite_Name['prototype'][_0x164fcd(0x606)]=function(){const _0x14bd68=_0x164fcd,_0x5ce935=this[_0x14bd68(0x16d)](),_0x13013b=this[_0x14bd68(0x3ed)](),_0x36fcbc=this[_0x14bd68(0x323)]();this[_0x14bd68(0x249)](),this['bitmap'][_0x14bd68(0x7bf)](),this['bitmap']['drawTextTopAligned'](_0x5ce935,0x4,0x0,_0x13013b,_0x36fcbc,_0x14bd68(0xa6a));},Bitmap[_0x164fcd(0x2bf)][_0x164fcd(0x4bb)]=function(_0x4fcb67,_0x14727d,_0x2d0423,_0x1ae38e,_0x4f3466,_0x532f18){const _0x3f1ca0=_0x164fcd,_0x47f7f4=this['context'],_0x531ecf=_0x47f7f4[_0x3f1ca0(0x719)];_0x1ae38e=_0x1ae38e||0xffffffff;let _0x24783f=_0x14727d,_0x1e55ef=Math[_0x3f1ca0(0xa13)](_0x2d0423+0x18/0x2+this['fontSize']*0.35);_0x532f18===_0x3f1ca0(0x37f)&&(_0x24783f+=_0x1ae38e/0x2);if(_0x532f18===_0x3f1ca0(0x29e)){if('rmcHu'===_0x3f1ca0(0x17d))_0x24783f+=_0x1ae38e;else return _0x23d785[_0x3f1ca0(0xb36)][_0x3f1ca0(0x1de)][_0x3f1ca0(0xcca)][_0x3f1ca0(0x58a)];}_0x47f7f4[_0x3f1ca0(0x7f0)](),_0x47f7f4[_0x3f1ca0(0xc34)]=this[_0x3f1ca0(0x8c7)](),_0x47f7f4['textAlign']=_0x532f18,_0x47f7f4['textBaseline']=_0x3f1ca0(0x1b9),_0x47f7f4[_0x3f1ca0(0x719)]=0x1,this[_0x3f1ca0(0x455)](_0x4fcb67,_0x24783f,_0x1e55ef,_0x1ae38e),_0x47f7f4[_0x3f1ca0(0x719)]=_0x531ecf,this[_0x3f1ca0(0x918)](_0x4fcb67,_0x24783f,_0x1e55ef,_0x1ae38e),_0x47f7f4['restore'](),this[_0x3f1ca0(0x97e)]['update']();},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x582)]=function(_0x4362a3){const _0x1576c9=_0x164fcd;return this[_0x1576c9(0x239)](_0x4362a3)-this['gaugeLineHeight']();},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x4d7)]=function(_0x3e46ad){const _0x68920a=_0x164fcd;if(!VisuMZ[_0x68920a(0xb36)]['Settings'][_0x68920a(0x9a3)][_0x68920a(0x74d)])return;const _0x5d86c8=this[_0x68920a(0x6ae)](_0x3e46ad),_0x293a98=this[_0x68920a(0x1fb)](_0x3e46ad);_0x293a98['width']=ImageManager[_0x68920a(0x2db)],_0x293a98[_0x68920a(0x5e0)]-=0x2,this[_0x68920a(0x612)](_0x5d86c8,_0x293a98['x']+0x1,_0x293a98['y']+0x1,_0x293a98[_0x68920a(0xab5)],_0x293a98[_0x68920a(0x5e0)]);},Window_BattleStatus[_0x164fcd(0x2bf)]['drawItemStatusListStyle']=function(_0x4819d7){const _0x345375=_0x164fcd,_0x4ef2ac=VisuMZ[_0x345375(0xb36)][_0x345375(0x1de)][_0x345375(0x9a3)],_0x306122=$dataSystem['optDisplayTp']?0x4:0x3,_0x429517=_0x306122*0x80+(_0x306122-0x1)*0x8+0x4,_0x415dfb=this[_0x345375(0x6ae)](_0x4819d7),_0x54026a=this[_0x345375(0x1fb)](_0x4819d7);let _0x4808b7=_0x54026a['x']+this[_0x345375(0xc5b)];if(_0x4ef2ac[_0x345375(0x74d)])_0x4808b7=_0x54026a['x']+ImageManager[_0x345375(0x2db)]+0x8;else{if('HqIfG'!=='vsCEK')_0x4808b7+=ImageManager[_0x345375(0x7b8)];else{const _0x5c382d=_0x38e3b7[_0x345375(0xb36)][_0x345375(0x1de)]['BattleLayout'],_0x1a79c3=this[_0x345375(0x6ae)](_0x453ccf),_0x1c3c2c=this[_0x345375(0x1fb)](_0x574eeb),_0xc27e00=_0x463a84['round'](_0x1c3c2c['x']+(_0x1c3c2c[_0x345375(0xab5)]-0x80)/0x2),_0x14af48=this['nameY'](_0x1c3c2c);let _0x22890a=_0xc27e00-_0x35f95c[_0x345375(0x7b8)]/0x2-0x4,_0x34bcfb=_0x14af48+_0x187558['iconHeight']/0x2;_0x22890a-_0x7f73e5[_0x345375(0x7b8)]/0x2<_0x1c3c2c['x']&&(_0x22890a=_0xc27e00+_0x4931ec[_0x345375(0x7b8)]/0x2-0x4,_0x34bcfb=_0x14af48-_0x254851[_0x345375(0x66d)]/0x2);const _0x522833=_0xc27e00,_0xa0d697=this['basicGaugesY'](_0x1c3c2c);this['placeTimeGauge'](_0x1a79c3,_0xc27e00+(_0x5c382d[_0x345375(0x1d1)]||0x0),_0x14af48+(_0x5c382d[_0x345375(0xca4)]||0x0)),this['placeActorName'](_0x1a79c3,_0xc27e00+(_0x5c382d['NameOffsetX']||0x0),_0x14af48+(_0x5c382d[_0x345375(0xb3b)]||0x0)),this[_0x345375(0xa8e)](_0x1a79c3,_0x22890a+(_0x5c382d[_0x345375(0x734)]||0x0),_0x34bcfb+(_0x5c382d[_0x345375(0x81a)]||0x0)),this[_0x345375(0x609)](_0x1a79c3,'hp',_0x522833+(_0x5c382d[_0x345375(0xa3b)]||0x0),_0xa0d697+(_0x5c382d[_0x345375(0x8b4)]||0x0)),this[_0x345375(0x609)](_0x1a79c3,'mp',_0x522833+(_0x5c382d[_0x345375(0xd18)]||0x0),_0xa0d697+this[_0x345375(0x85c)]()+(_0x5c382d[_0x345375(0xcc6)]||0x0)),_0x112121[_0x345375(0xcaa)]&&this[_0x345375(0x609)](_0x1a79c3,'tp',_0x522833+(_0x5c382d['TpGaugeOffsetX']||0x0),_0xa0d697+this['gaugeLineHeight']()*0x2+(_0x5c382d[_0x345375(0xc56)]||0x0));}}const _0x4ef234=Math[_0x345375(0xa13)](Math[_0x345375(0x584)](_0x54026a['x']+_0x54026a['width']-_0x429517,_0x4808b7)),_0x4e9d9d=Math[_0x345375(0xa13)](_0x54026a['y']+(_0x54026a[_0x345375(0x5e0)]-Sprite_Name[_0x345375(0x2bf)]['bitmapHeight']())/0x2),_0x594207=Math['round'](_0x4ef234-ImageManager[_0x345375(0x7b8)]/0x2-0x4),_0x513c2c=Math[_0x345375(0xa13)](_0x54026a['y']+(_0x54026a[_0x345375(0x5e0)]-ImageManager[_0x345375(0x66d)])/0x2+ImageManager['iconHeight']/0x2);let _0x4fafa1=_0x4ef234+0x88;const _0x492548=_0x4e9d9d;this[_0x345375(0x524)](_0x415dfb,_0x4ef234-0x4+(_0x4ef2ac[_0x345375(0x1d1)]||0x0),_0x4e9d9d+(_0x4ef2ac[_0x345375(0xca4)]||0x0)),this['placeActorName'](_0x415dfb,_0x4ef234+(_0x4ef2ac[_0x345375(0xcf9)]||0x0),_0x4e9d9d+(_0x4ef2ac[_0x345375(0xb3b)]||0x0)),this[_0x345375(0xa8e)](_0x415dfb,_0x594207+(_0x4ef2ac[_0x345375(0x734)]||0x0),_0x513c2c+(_0x4ef2ac[_0x345375(0x81a)]||0x0)),this[_0x345375(0x609)](_0x415dfb,'hp',_0x4fafa1+0x88*0x0+(_0x4ef2ac['HpGaugeOffsetX']||0x0),_0x492548+(_0x4ef2ac[_0x345375(0x8b4)]||0x0)),this[_0x345375(0x609)](_0x415dfb,'mp',_0x4fafa1+0x88*0x1+(_0x4ef2ac[_0x345375(0xd18)]||0x0),_0x492548+(_0x4ef2ac[_0x345375(0xcc6)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x345375(0x609)](_0x415dfb,'tp',_0x4fafa1+0x88*0x2+(_0x4ef2ac[_0x345375(0x2e3)]||0x0),_0x492548+(_0x4ef2ac[_0x345375(0xc56)]||0x0));},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x747)]=function(_0x2f74f7){const _0x2be2bd=_0x164fcd;if(!$gameSystem[_0x2be2bd(0x709)]())return;VisuMZ[_0x2be2bd(0xb36)][_0x2be2bd(0x4af)][_0x2be2bd(0xa10)](this,_0x2f74f7);},Window_BattleStatus['prototype'][_0x164fcd(0x4e5)]=function(_0x303740){const _0x1440b6=_0x164fcd,_0x457267=VisuMZ[_0x1440b6(0xb36)][_0x1440b6(0x1de)][_0x1440b6(0x9a3)],_0x35c493=this[_0x1440b6(0x6ae)](_0x303740),_0x57834e=this[_0x1440b6(0x1fb)](_0x303740),_0x3a64a1=Math[_0x1440b6(0xa13)](_0x57834e['x']+(_0x57834e[_0x1440b6(0xab5)]-0x80)/0x2),_0x3e1470=this[_0x1440b6(0x582)](_0x57834e);let _0x583fb7=_0x3a64a1-ImageManager['iconWidth']/0x2-0x4,_0x2123b8=_0x3e1470+ImageManager[_0x1440b6(0x66d)]/0x2;_0x583fb7-ImageManager[_0x1440b6(0x7b8)]/0x2<_0x57834e['x']&&(_0x583fb7=_0x3a64a1+ImageManager['iconWidth']/0x2-0x4,_0x2123b8=_0x3e1470-ImageManager['iconHeight']/0x2);const _0x2da11f=_0x3a64a1,_0x71c66a=this['basicGaugesY'](_0x57834e);this['placeTimeGauge'](_0x35c493,_0x3a64a1+(_0x457267['TpbGaugeOffsetX']||0x0),_0x3e1470+(_0x457267[_0x1440b6(0xca4)]||0x0)),this['placeActorName'](_0x35c493,_0x3a64a1+(_0x457267[_0x1440b6(0xcf9)]||0x0),_0x3e1470+(_0x457267['NameOffsetY']||0x0)),this['placeStateIcon'](_0x35c493,_0x583fb7+(_0x457267[_0x1440b6(0x734)]||0x0),_0x2123b8+(_0x457267[_0x1440b6(0x81a)]||0x0)),this[_0x1440b6(0x609)](_0x35c493,'hp',_0x2da11f+(_0x457267[_0x1440b6(0xa3b)]||0x0),_0x71c66a+(_0x457267[_0x1440b6(0x8b4)]||0x0)),this[_0x1440b6(0x609)](_0x35c493,'mp',_0x2da11f+(_0x457267[_0x1440b6(0xd18)]||0x0),_0x71c66a+this['gaugeLineHeight']()+(_0x457267[_0x1440b6(0xcc6)]||0x0)),$dataSystem[_0x1440b6(0xcaa)]&&this[_0x1440b6(0x609)](_0x35c493,'tp',_0x2da11f+(_0x457267['TpGaugeOffsetX']||0x0),_0x71c66a+this[_0x1440b6(0x85c)]()*0x2+(_0x457267['TpGaugeOffsetY']||0x0));},Window_BattleStatus['prototype'][_0x164fcd(0x23d)]=function(_0x55d035){const _0x46823a=_0x164fcd;if(!VisuMZ[_0x46823a(0xb36)][_0x46823a(0x1de)]['BattleLayout'][_0x46823a(0x897)])return![];if(_0x55d035['getBattlePortrait']())return!![];return Imported[_0x46823a(0xb7b)]&&_0x55d035['getMenuImage']();},Game_Actor['prototype'][_0x164fcd(0xb14)]=function(){const _0xb40b85=_0x164fcd;if(this[_0xb40b85(0x6ae)]()[_0xb40b85(0x9ea)][_0xb40b85(0xa5d)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0xb40b85(0x6ae)]()[_0xb40b85(0x9ea)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0xb40b85(0x56f)===_0xb40b85(0x56f))return Number(RegExp['$1']);else{if(!this['_damageContainer'])return;if(!_0x3b2dd9)return;this[_0xb40b85(0x6ee)][_0xb40b85(0x6de)](_0x2a661b);}}}return 0x0;},Game_Actor[_0x164fcd(0x2bf)][_0x164fcd(0x7a5)]=function(){const _0x1650bd=_0x164fcd;if(this[_0x1650bd(0x6ae)]()[_0x1650bd(0x9ea)][_0x1650bd(0xa5d)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x1650bd(0x6ae)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus['prototype'][_0x164fcd(0x6b9)]=function(_0x55129a){const _0x5305b2=_0x164fcd,_0x2e92cb=this[_0x5305b2(0x6ae)](_0x55129a);if(this[_0x5305b2(0x23d)](_0x2e92cb)){const _0x55ea8d=_0x5305b2(0x77a)[_0x5305b2(0x272)](_0x2e92cb[_0x5305b2(0xbe7)]()),_0x40c715=this[_0x5305b2(0x9ac)](_0x55ea8d,Sprite),_0x82507e=_0x2e92cb[_0x5305b2(0x152)]();if(_0x82507e!==''){if('rjCBx'!=='mQcrI')_0x40c715[_0x5305b2(0xcf5)]=ImageManager[_0x5305b2(0x57d)](_0x82507e);else return this[_0x5305b2(0xab5)]*this['mainSpriteScaleX']();}else _0x40c715['bitmap']=ImageManager['_emptyBitmap'];const _0x5166ca=this[_0x5305b2(0x1fb)](_0x55129a);_0x40c715[_0x5305b2(0x70f)]['x']=0.5,_0x40c715['anchor']['y']=0x1;let _0xa9a45b=Math['round'](_0x5166ca['x']+_0x5166ca['width']/0x2)+this[_0x5305b2(0xc5b)];_0xa9a45b+=_0x2e92cb[_0x5305b2(0xb14)]();let _0x44445f=Math[_0x5305b2(0xa13)](this[_0x5305b2(0x5e0)]);_0x44445f+=_0x2e92cb[_0x5305b2(0x7a5)](),_0x40c715[_0x5305b2(0xb60)](_0xa9a45b,_0x44445f);const _0x3ef225=VisuMZ[_0x5305b2(0xb36)][_0x5305b2(0x1de)][_0x5305b2(0x9a3)][_0x5305b2(0x1ff)];_0x40c715[_0x5305b2(0xb56)]['x']=_0x3ef225,_0x40c715[_0x5305b2(0xb56)]['y']=_0x3ef225,_0x40c715['show']();}else{const _0x60a3b5=this[_0x5305b2(0x2a4)](_0x55129a);this[_0x5305b2(0x612)](_0x2e92cb,_0x60a3b5['x'],_0x60a3b5['y'],_0x60a3b5['width'],_0x60a3b5[_0x5305b2(0x5e0)]);}},Window_BattleStatus['prototype'][_0x164fcd(0x9ac)]=function(_0x34a5e2,_0x5d8202){const _0x55af6d=_0x164fcd,_0x29cc83=this['_additionalSprites'];if(_0x29cc83[_0x34a5e2]){if(_0x55af6d(0x6d1)!==_0x55af6d(0x33b))return _0x29cc83[_0x34a5e2];else{const _0x48aab9=_0x345b0f(_0x5e0485['$1']),_0x49c8c6=_0x5b4a28[_0x55af6d(0xb36)]['createKeyJS'](_0x59cc6c,_0x55af6d(0x7cc));_0x127a67[_0x55af6d(0xb36)][_0x55af6d(0x163)](_0x48aab9,_0x49c8c6);}}else{if(_0x55af6d(0x617)!=='OEcTg'){const _0xee5ac6=this[_0x55af6d(0xd1c)](this[_0x55af6d(0xca1)]());let _0x36d8dc=this[_0x55af6d(0x42c)](this[_0x55af6d(0xca1)]());_0x36d8dc=_0x36d8dc[_0x55af6d(0x6db)](/\\I\[(\d+)\]/gi,''),_0x64b976[_0x55af6d(0x599)](),this[_0x55af6d(0x51a)](_0x36d8dc,_0xee5ac6),this['commandNameWindowDrawText'](_0x36d8dc,_0xee5ac6),this[_0x55af6d(0x232)](_0x36d8dc,_0xee5ac6);}else{const _0x46277e=new _0x5d8202();return _0x29cc83[_0x34a5e2]=_0x46277e,this['addChildToBack'](_0x46277e),this[_0x55af6d(0x84d)](this[_0x55af6d(0x326)]),_0x46277e;}}},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0xd17)]=function(){const _0x4a8a85=_0x164fcd;this[_0x4a8a85(0x5ca)](),this['_createEffectsContainer'](),Window_StatusBase[_0x4a8a85(0x2bf)][_0x4a8a85(0xd17)][_0x4a8a85(0xa10)](this),this[_0x4a8a85(0x98a)]();},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x5ca)]=function(){const _0x583816=_0x164fcd;this[_0x583816(0x326)]=new Sprite(),this[_0x583816(0x326)][_0x583816(0x628)]=[new PIXI['filters'][(_0x583816(0x393))]()],this[_0x583816(0x326)][_0x583816(0x2eb)]=new Rectangle(),this[_0x583816(0x326)][_0x583816(0xb60)](this[_0x583816(0x74a)],this[_0x583816(0x74a)]),this[_0x583816(0x23a)](this[_0x583816(0x326)]);},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x17e)]=function(){const _0x3a2538=_0x164fcd;this[_0x3a2538(0x804)]=new Sprite(),this['addChild'](this[_0x3a2538(0x804)]);},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x6f6)]=function(){const _0x1f2202=_0x164fcd;if(this['_effectsContainer']){if(_0x1f2202(0xa48)!==_0x1f2202(0xa48)){if(!this[_0x1f2202(0x7f9)])return;if(!this['_hpGaugeSprite'])return;const _0x5d4860=_0x48d16c['BattleCore']['Settings'][_0x1f2202(0x83d)],_0x59b1af=this[_0x1f2202(0xd07)];_0x59b1af['visible']=this['isVisualHpGaugeDisplayed']();const _0x293412=_0x5d4860['OffsetX'],_0x5104c5=_0x5d4860[_0x1f2202(0x5f1)];_0x59b1af['x']=_0x293412,_0x59b1af['x']+=this[_0x1f2202(0x7f9)]['battleUIOffsetX'](),_0x59b1af['y']=-this[_0x1f2202(0x5e0)]+_0x5104c5,_0x59b1af['y']+=this[_0x1f2202(0x7f9)][_0x1f2202(0x5bd)](),_0x6b96d4[_0x1f2202(0x362)]&&_0x37ed43['_scene'][_0x1f2202(0xbd6)]&&(_0x59b1af['x']+=this['x'],_0x59b1af['y']+=this['y']);}else this[_0x1f2202(0x23a)](this[_0x1f2202(0x804)]);}},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x98a)]=function(){const _0x4c7a1f=_0x164fcd;this['_damageContainer']=new Sprite(),this['addChild'](this[_0x4c7a1f(0x6ee)]);},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0xc60)]=function(){const _0x437f24=_0x164fcd;this['_cursorSprite']=new Sprite();for(let _0x59014f=0x0;_0x59014f<0x9;_0x59014f++){this['_cursorSprite']['addChild'](new Sprite());}this[_0x437f24(0x326)][_0x437f24(0x23a)](this['_cursorSprite']);},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x97d)]=function(){const _0x5d91b7=_0x164fcd;Window_StatusBase[_0x5d91b7(0x2bf)][_0x5d91b7(0x97d)][_0x5d91b7(0xa10)](this),this[_0x5d91b7(0xd15)]();},Window_BattleStatus['prototype'][_0x164fcd(0xd15)]=function(){const _0x11963b=_0x164fcd,_0x1a8e5f=this['_padding'];this['_cursorArea']['move'](_0x1a8e5f,_0x1a8e5f),this[_0x11963b(0x326)]['x']=_0x1a8e5f-this['origin']['x'],this[_0x11963b(0x326)]['y']=_0x1a8e5f-this[_0x11963b(0xbcc)]['y'];if(this[_0x11963b(0x96e)]>0x0&&this[_0x11963b(0xcd0)]>0x0){if(_0x11963b(0x64c)===_0x11963b(0x46a)){if(_0x1ed693[_0x11963b(0x91a)][_0x11963b(0x533)]&&_0x531e06[_0x11963b(0x91a)]['_handlers'][_0x11963b(0x124)])return!![];if(_0x1691dd[_0x11963b(0x95b)][_0x11963b(0x533)]&&_0x5ea34e[_0x11963b(0x95b)][_0x11963b(0xa17)][_0x11963b(0x124)])return!![];}else this[_0x11963b(0x326)][_0x11963b(0xc39)]=this[_0x11963b(0x443)]();}else this[_0x11963b(0x326)][_0x11963b(0xc39)]=![];},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0xbfb)]=function(){const _0x25f81d=_0x164fcd;Window_StatusBase[_0x25f81d(0x2bf)]['_updateFilterArea'][_0x25f81d(0xa10)](this),this[_0x25f81d(0xacb)]();},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0xacb)]=function(){const _0x48af96=_0x164fcd,_0xe16cc6=this[_0x48af96(0x326)][_0x48af96(0xade)][_0x48af96(0xba5)](new Point(0x0,0x0)),_0x496443=this[_0x48af96(0x326)][_0x48af96(0x2eb)];_0x496443['x']=_0xe16cc6['x']+this[_0x48af96(0xbcc)]['x'],_0x496443['y']=_0xe16cc6['y']+this[_0x48af96(0xbcc)]['y'],_0x496443['width']=this['innerWidth'],_0x496443['height']=this[_0x48af96(0xcd0)];},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0xb15)]=function(_0x3b68ac){const _0x454090=_0x164fcd;if(this[_0x454090(0x4b2)]()!==_0x454090(0x404))return;this[_0x454090(0x6b9)](_0x3b68ac[_0x454090(0xca1)]());},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x8a3)]=function(_0xff3aef,_0x48eb9c){const _0x3fbf2f=_0x164fcd;if(!this[_0x3fbf2f(0x6ee)])return;if(!_0xff3aef)return;if(!_0x48eb9c)return;const _0x57d96f=this['itemRect'](_0x48eb9c[_0x3fbf2f(0xca1)]());_0x57d96f['x']+=_0x57d96f[_0x3fbf2f(0xab5)]/0x2+this['padding'],_0xff3aef['x']=_0x57d96f['x'],_0xff3aef['y']=_0x57d96f['y'],this[_0x3fbf2f(0x6ee)][_0x3fbf2f(0x23a)](_0xff3aef);},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x705)]=function(_0x13ad86){const _0x27dee1=_0x164fcd;if(!this['_damageContainer'])return;if(!_0x13ad86)return;this['_damageContainer'][_0x27dee1(0x6de)](_0x13ad86);},Window_BattleStatus[_0x164fcd(0x2bf)]['updateBorderStyle']=function(){const _0x4fe510=_0x164fcd;if(!this[_0x4fe510(0x2c4)]())return;if(!this[_0x4fe510(0x265)])this[_0x4fe510(0x370)]();this[_0x4fe510(0xa39)](),this[_0x4fe510(0x7fe)]();},Window_BattleStatus['prototype'][_0x164fcd(0x2c4)]=function(){const _0x23092f=_0x164fcd;if(this[_0x23092f(0xc12)]!==Window_BattleStatus)return![];if(!SceneManager[_0x23092f(0x53f)]())return![];return VisuMZ['BattleCore'][_0x23092f(0x1de)]['BattleLayout'][_0x23092f(0xc1d)];},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x370)]=function(){const _0x3e1e6e=_0x164fcd;this[_0x3e1e6e(0x265)]=new Sprite();const _0x2f73a5=SceneManager[_0x3e1e6e(0x4c8)],_0x1c9215=_0x2f73a5[_0x3e1e6e(0x87f)]['indexOf'](_0x2f73a5[_0x3e1e6e(0x919)]);_0x2f73a5[_0x3e1e6e(0x305)](this[_0x3e1e6e(0x265)],_0x1c9215),this[_0x3e1e6e(0x265)]['anchor']['x']=0.5,this['_borderPortraitSprite'][_0x3e1e6e(0x70f)]['y']=0x1;const _0x41a402=VisuMZ['BattleCore'][_0x3e1e6e(0x1de)]['BattleLayout'][_0x3e1e6e(0x373)];this['_borderPortraitSprite'][_0x3e1e6e(0xb56)]['x']=_0x41a402,this[_0x3e1e6e(0x265)][_0x3e1e6e(0xb56)]['y']=_0x41a402,this[_0x3e1e6e(0x265)]['y']=this['y']+this['height'],this['_borderPortraitDuration']=0x0;},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x3ce)]=function(){const _0x49621e=_0x164fcd;return BattleManager[_0x49621e(0xa42)]();},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0xa39)]=function(){const _0x2f1cf8=_0x164fcd;this[_0x2f1cf8(0x265)][_0x2f1cf8(0xc39)]=this[_0x2f1cf8(0x3ce)]();const _0x1fa291=BattleManager['actor'](),_0x3f3c42=_0x1fa291?_0x1fa291[_0x2f1cf8(0x152)]()||'':'';if(_0x1fa291===this['_borderPortraitSprite'][_0x2f1cf8(0x6ae)]&&_0x3f3c42===this[_0x2f1cf8(0x265)][_0x2f1cf8(0x6ea)])return;this[_0x2f1cf8(0x265)]['actor']=_0x1fa291||this['_borderPortraitSprite']['actor'],this['_borderPortraitSprite']['lastFilename']=_0x3f3c42;if(!_0x1fa291)return;else{if(_0x3f3c42===''){this['_borderPortraitSprite'][_0x2f1cf8(0xcf5)]=ImageManager[_0x2f1cf8(0x3d1)],this[_0x2f1cf8(0x265)][_0x2f1cf8(0x6ea)]='';return;}else{const _0x1d4f3a=ImageManager['loadPicture'](_0x3f3c42);this[_0x2f1cf8(0x265)][_0x2f1cf8(0x4c4)]=0x0,_0x1d4f3a['addLoadListener'](this[_0x2f1cf8(0x830)]['bind'](this,_0x1d4f3a));}}},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x830)]=function(_0xe9e554){const _0x44d135=_0x164fcd;this[_0x44d135(0x3df)]=0x14,this['_borderPortraitSprite']['bitmap']=_0xe9e554;if(SceneManager['_scene']['isRightInputMode']()){if(_0x44d135(0x8ec)===_0x44d135(0x8ec))this[_0x44d135(0x265)]['x']=0x0,this[_0x44d135(0x4a7)]=Math[_0x44d135(0x405)](_0xe9e554[_0x44d135(0xab5)]/0x2);else{this['commandName'](_0x4605f8)['match'](/\\I\[(\d+)\]/i);const _0x5e87b7=_0x47eae7(_0x1229f8['$1'])||0x0,_0x18c92e=this['itemLineRect'](_0x144339),_0x40bbe3=_0x18c92e['x']+_0x339896[_0x44d135(0x923)]((_0x18c92e[_0x44d135(0xab5)]-_0x2292f5[_0x44d135(0x7b8)])/0x2),_0x22eae7=_0x18c92e['y']+(_0x18c92e[_0x44d135(0x5e0)]-_0x3922b7[_0x44d135(0x66d)])/0x2;this['drawIcon'](_0x5e87b7,_0x40bbe3,_0x22eae7);}}else{if('kSVRh'===_0x44d135(0x9af))this[_0x44d135(0x265)]['x']=this[_0x44d135(0xab5)],this[_0x44d135(0x4a7)]=this[_0x44d135(0xab5)]*0x3/0x4;else return!![];}this[_0x44d135(0x265)][_0x44d135(0x4c4)]=0x0,this[_0x44d135(0x265)]['y']=this['y']+this[_0x44d135(0x5e0)];const _0x5f887c=BattleManager[_0x44d135(0x6ae)]();_0x5f887c&&(_0x44d135(0xb5d)!==_0x44d135(0x6f9)?(this[_0x44d135(0x4a7)]+=_0x5f887c[_0x44d135(0xb14)](),this[_0x44d135(0x265)]['y']+=_0x5f887c[_0x44d135(0x7a5)]()):this[_0x44d135(0x421)](_0x153a4d,_0xf5cf2c,_0x4f089d));},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0x7fe)]=function(){const _0x37f4b8=_0x164fcd;if(this[_0x37f4b8(0x3df)]>0x0){const _0x31aa12=this[_0x37f4b8(0x3df)],_0x48a721=this[_0x37f4b8(0x265)];_0x48a721['x']=(_0x48a721['x']*(_0x31aa12-0x1)+this[_0x37f4b8(0x4a7)])/_0x31aa12,_0x48a721[_0x37f4b8(0x4c4)]=(_0x48a721['opacity']*(_0x31aa12-0x1)+0xff)/_0x31aa12,this['_borderPortraitDuration']--;}},Window_BattleStatus['prototype']['updateEffectContainers']=function(){const _0x515215=_0x164fcd;return;this[_0x515215(0x804)]&&(this[_0x515215(0x804)]['x']=this['x'],this['_effectsContainer']['y']=this['y']),this['_damageContainer']&&(this[_0x515215(0x6ee)]['x']=this['x'],this[_0x515215(0x6ee)]['y']=this['y']);},Window_BattleStatus[_0x164fcd(0x2bf)][_0x164fcd(0xc0c)]=function(){const _0x9a43cd=_0x164fcd,_0xe9f23c=VisuMZ['BattleCore'][_0x9a43cd(0x1de)][_0x9a43cd(0x9a3)];if(_0xe9f23c['StatusWindowAttachmentBack']){if(_0x9a43cd(0x2dd)!==_0x9a43cd(0x2dd))_0x35d3ad[_0x535586]=null;else{const _0x531842=new Sprite();_0x531842[_0x9a43cd(0xcf5)]=ImageManager[_0x9a43cd(0xa99)](_0xe9f23c[_0x9a43cd(0x49e)]),_0x531842['x']=_0xe9f23c[_0x9a43cd(0x9fe)]||0x0,_0x531842['y']=_0xe9f23c[_0x9a43cd(0xb77)]||0x0,this[_0x9a43cd(0x84d)](_0x531842),this[_0x9a43cd(0x8e3)]=_0x531842;}}if(_0xe9f23c[_0x9a43cd(0x201)]){const _0x3f69eb=new Sprite();_0x3f69eb[_0x9a43cd(0xcf5)]=ImageManager[_0x9a43cd(0xa99)](_0xe9f23c[_0x9a43cd(0x201)]),_0x3f69eb['x']=_0xe9f23c[_0x9a43cd(0x905)]||0x0,_0x3f69eb['y']=_0xe9f23c[_0x9a43cd(0x89a)]||0x0,this['addChild'](_0x3f69eb),this['_frontAttachmentSprite']=_0x3f69eb;}},Window_BattleStatus[_0x164fcd(0x2bf)]['updateAttachmentSprites']=function(){const _0x3f75fc=_0x164fcd;this[_0x3f75fc(0x2ce)]&&this[_0x3f75fc(0x23a)](this[_0x3f75fc(0x2ce)]),this[_0x3f75fc(0x8e3)]&&this[_0x3f75fc(0x84d)](this['_backAttachmentSprite']);},Window_BattleActor[_0x164fcd(0x2bf)][_0x164fcd(0xbd9)]=function(){return this['isActionSelectionValid']();},Window_BattleActor[_0x164fcd(0x2bf)][_0x164fcd(0x2b9)]=function(){const _0x3681ac=_0x164fcd,_0x42d1b8=BattleManager[_0x3681ac(0x784)]();if(!_0x42d1b8)return!![];if(!_0x42d1b8[_0x3681ac(0x5e9)]())return!![];const _0x1dae74=this[_0x3681ac(0x6ae)](this['index']()),_0x41cf72=_0x42d1b8[_0x3681ac(0x5e9)]()[_0x3681ac(0x9ea)];if(_0x41cf72['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if('XRHja'==='XRHja'){if(_0x1dae74===BattleManager['actor']())return![];}else{if(_0x5d8d2f[_0x3681ac(0x9c8)])return![];return _0x2e47c9['BattleCore'][_0x3681ac(0x1de)][_0x3681ac(0x337)][_0x3681ac(0x91d)];}}if(_0x42d1b8[_0x3681ac(0xa74)]()){if(_0x3681ac(0xa57)==='DhtOp')return this[_0x3681ac(0x4c8)]&&this[_0x3681ac(0x4c8)][_0x3681ac(0xc12)]===_0x5d41db;else{if(!_0x1dae74[_0x3681ac(0x468)]())return![];}}if(_0x42d1b8[_0x3681ac(0x65a)]()){if(!_0x1dae74[_0x3681ac(0x949)]())return![];}return!![];},Window_BattleActor[_0x164fcd(0x2bf)][_0x164fcd(0xb9a)]=function(_0x3d89d6){this['_enemyWindowMode']=_0x3d89d6;},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x872)]=Window_BattleActor[_0x164fcd(0x2bf)][_0x164fcd(0x162)],Window_BattleActor['prototype']['processTouch']=function(){const _0x35f8ce=_0x164fcd;Window_BattleStatus[_0x35f8ce(0x2bf)]['processTouch'][_0x35f8ce(0xa10)](this);if(this[_0x35f8ce(0x5c4)])this['processEnemyModeTouchBattleCore']();else{if(_0x35f8ce(0x772)!==_0x35f8ce(0x277))VisuMZ[_0x35f8ce(0xb36)][_0x35f8ce(0x872)][_0x35f8ce(0xa10)](this);else{const _0x1c4003=_0x2aff38[_0x4934fa];if(!_0x1c4003)return![];if(_0x1c4003[_0x35f8ce(0xa4e)][_0x35f8ce(0xd04)]<=0x1)return![];return!![];}}},Window_BattleActor[_0x164fcd(0x2bf)][_0x164fcd(0x9d2)]=function(){const _0x39e906=_0x164fcd,_0x1777aa=SceneManager[_0x39e906(0x4c8)][_0x39e906(0x95b)];if(!_0x1777aa)return;this[_0x39e906(0x89e)]=![];const _0x388da1=this['hitIndex']();if(_0x388da1>=0x0){if(_0x39e906(0x6f8)!==_0x39e906(0x50e)){this[_0x39e906(0x71a)](_0x388da1);if(TouchInput[_0x39e906(0x259)]()){if(_0x39e906(0x5e3)!==_0x39e906(0x5e3))this[_0x39e906(0xc6b)]();else{const _0x3b25c5=$gameParty[_0x39e906(0x346)]()[_0x388da1],_0x1ee25a=_0x1777aa[_0x39e906(0x466)][_0x39e906(0x990)](_0x3b25c5);_0x1ee25a>=0x0&&(_0x1777aa[_0x39e906(0x71a)](_0x1ee25a),_0x1777aa[_0x39e906(0x9b7)]());}}}else{const _0x56244a=_0x14b84b(_0x1331df['$1'])[_0x39e906(0x77e)](/[\r\n]+/)[_0x39e906(0x494)]('');_0x973a7a['motionIdle']=_0x2b771f[_0x39e906(0x9dc)](_0x56244a);}}},Window_BattleActor[_0x164fcd(0x2bf)][_0x164fcd(0x336)]=function(){const _0x54dc40=_0x164fcd;this[_0x54dc40(0x5c4)]&&(this[_0x54dc40(0x787)]++,this['active']=!![]);const _0x40d040=Window_BattleStatus['prototype'][_0x54dc40(0x336)][_0x54dc40(0xa10)](this);if(this[_0x54dc40(0x5c4)]){if(_0x54dc40(0x954)!=='CFcfp')this[_0x54dc40(0x533)]=![];else return _0x2dcd62['BattleCore'][_0x54dc40(0x1de)][_0x54dc40(0x8ef)][_0x54dc40(0x632)][_0x54dc40(0xa10)](this);}return _0x40d040;},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x73e)]=Window_BattleActor[_0x164fcd(0x2bf)][_0x164fcd(0xc23)],Window_BattleActor[_0x164fcd(0x2bf)][_0x164fcd(0xc23)]=function(){const _0x3c80f6=_0x164fcd;VisuMZ['BattleCore'][_0x3c80f6(0x73e)]['call'](this);const _0x409f6e=BattleManager[_0x3c80f6(0x784)]();if(_0x409f6e){const _0x1e6775=$gameParty[_0x3c80f6(0x279)]();if(_0x409f6e['canSingleOrMultipleSelect']()&&_0x1e6775[_0x3c80f6(0xd04)]>0x1){if(_0x3c80f6(0x19a)===_0x3c80f6(0x19a))this[_0x3c80f6(0x70e)]('pagedown',this[_0x3c80f6(0x925)][_0x3c80f6(0x1f7)](this));else{if(!_0x1d39e7[_0x3c80f6(0xa2c)])return;if(this[_0x3c80f6(0xc12)]===_0x4348bf)return;const _0x5339f4=_0x4de3a0[_0x3c80f6(0xb36)][_0x3c80f6(0x1de)][_0x3c80f6(0x83d)],_0xf28902=new _0x562ce3();_0xf28902[_0x3c80f6(0x70f)]['x']=_0x5339f4['AnchorX'],_0xf28902[_0x3c80f6(0x70f)]['y']=_0x5339f4[_0x3c80f6(0x4e1)],_0xf28902[_0x3c80f6(0xb56)]['x']=_0xf28902[_0x3c80f6(0xb56)]['y']=_0x5339f4['Scale'],this[_0x3c80f6(0xd07)]=_0xf28902,this[_0x3c80f6(0x23a)](this[_0x3c80f6(0xd07)]),_0x5746a7[_0x3c80f6(0x362)]&&_0x3d7fa5[_0x3c80f6(0xa59)](this[_0x3c80f6(0xd07)]);}}}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x84b)]=Window_BattleActor[_0x164fcd(0x2bf)][_0x164fcd(0xad3)],Window_BattleActor[_0x164fcd(0x2bf)][_0x164fcd(0xad3)]=function(){const _0x240625=_0x164fcd;VisuMZ['BattleCore'][_0x240625(0x84b)]['call'](this),delete this[_0x240625(0xa17)]['pageup'],delete this[_0x240625(0xa17)]['pagedown'];},Window_BattleActor[_0x164fcd(0x2bf)][_0x164fcd(0x925)]=function(){const _0x1f54e5=_0x164fcd,_0x46dde8=BattleManager['inputtingAction']();if(_0x46dde8)_0x46dde8['setTargetBattlerKey'](_0x1f54e5(0xa4d));this[_0x1f54e5(0x9b7)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x611)]=Window_BattleEnemy[_0x164fcd(0x2bf)][_0x164fcd(0x1ec)],Window_BattleEnemy[_0x164fcd(0x2bf)][_0x164fcd(0x1ec)]=function(_0x9d8bbf){const _0x5c1d81=_0x164fcd;this[_0x5c1d81(0xc95)]=null,VisuMZ[_0x5c1d81(0xb36)][_0x5c1d81(0x611)][_0x5c1d81(0xa10)](this,_0x9d8bbf);if(Imported['VisuMZ_2_AggroControlSystem']){if(_0x5c1d81(0x141)!==_0x5c1d81(0x141))_0x125973?this[_0x5c1d81(0xd03)](_0x153858[_0x5c1d81(0xa4e)],0x0):this['terminate']();else{if(VisuMZ[_0x5c1d81(0x810)][_0x5c1d81(0xb5c)]<1.12){let _0x26f977='';_0x26f977+=_0x5c1d81(0x543),_0x26f977+='in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20',_0x26f977+='with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!',alert(_0x26f977),SceneManager['exit']();}}}},Window_BattleEnemy[_0x164fcd(0x2bf)][_0x164fcd(0x9e1)]=function(){const _0x359a12=_0x164fcd;return this[_0x359a12(0x768)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xc61)]=Window_BattleEnemy[_0x164fcd(0x2bf)]['show'],Window_BattleEnemy[_0x164fcd(0x2bf)][_0x164fcd(0xc23)]=function(){const _0x456696=_0x164fcd;VisuMZ[_0x456696(0xb36)][_0x456696(0xc61)]['call'](this),this['y']=Graphics[_0x456696(0x5e0)]*0xa,this[_0x456696(0x70c)]()&&('zirJK'==='RabYv'?this[_0x456696(0x4e7)][_0x456696(0x23a)](this[_0x456696(0x79c)]):this[_0x456696(0x733)]());},VisuMZ['BattleCore'][_0x164fcd(0xb12)]=Window_BattleEnemy['prototype'][_0x164fcd(0xad3)],Window_BattleEnemy['prototype'][_0x164fcd(0xad3)]=function(){const _0x222fdc=_0x164fcd;VisuMZ[_0x222fdc(0xb36)][_0x222fdc(0xb12)][_0x222fdc(0xa10)](this),$gameParty[_0x222fdc(0x71a)](null),delete this[_0x222fdc(0xa17)]['pageup'],delete this[_0x222fdc(0xa17)][_0x222fdc(0x124)];},Window_BattleEnemy['prototype']['validTargets']=function(){const _0x5afa11=_0x164fcd;let _0x2ede09=$gameTroop['aliveMembers']();const _0x2f8744=BattleManager[_0x5afa11(0x784)]();if(_0x2f8744){if(_0x5afa11(0x6cd)!==_0x5afa11(0x6cd)){const _0x13f8b9=_0x4e6bc5[0x0][_0x5afa11(0x272)](_0x3ff52d[0x0]),_0x119f5d=_0x487d86[0x1][_0x5afa11(0x272)](_0x2a7162[0x1]),_0x52ce28=new _0x432d07(_0x5d97d9['format'](_0x119f5d),'i');_0x2bdc88[_0x13f8b9]=_0x52ce28;}else{_0x2f8744['canSingleOrMultipleSelect']()&&_0x2ede09['length']>0x1&&this[_0x5afa11(0x70e)](_0x5afa11(0x7b5),this[_0x5afa11(0xc69)][_0x5afa11(0x1f7)](this));if(_0x2f8744['isForAnyone']()){if(_0x5afa11(0x5dc)===_0x5afa11(0x87e))this[_0x5afa11(0x56b)](_0x5afa11(0x589),_0x50faf4,[_0x36e3ae[_0x5afa11(0x5a7)]],-0x1);else{const _0x27e7aa=$gameParty[_0x5afa11(0x279)]();_0x2ede09=_0x2ede09[_0x5afa11(0x395)](_0x27e7aa);if(_0x2f8744[_0x5afa11(0x358)]()&&_0x27e7aa[_0x5afa11(0xd04)]>0x1){if(_0x5afa11(0x838)===_0x5afa11(0x838))this['setHandler'](_0x5afa11(0x124),this[_0x5afa11(0x925)]['bind'](this));else return!![];}}}}}return _0x2ede09;},Window_BattleEnemy[_0x164fcd(0x2bf)][_0x164fcd(0x72d)]=function(){const _0x53edc7=_0x164fcd;this[_0x53edc7(0x466)]=this[_0x53edc7(0x94f)](),this[_0x53edc7(0x66f)](),Window_Selectable[_0x53edc7(0x2bf)][_0x53edc7(0x72d)][_0x53edc7(0xa10)](this);},Window_BattleEnemy['prototype']['sortEnemies']=function(){const _0x203775=_0x164fcd;this[_0x203775(0x466)]['sort']((_0x69045a,_0x4ba8d4)=>{const _0x3adf51=_0x203775;if(_0x3adf51(0xaaa)==='fJtqT'){if(!_0x2ff125)return;_0x280ab1['VisuMZ_1_SkillsStatesCore']?_0x558b8e[_0x3adf51(0x2bf)][_0x3adf51(0x583)][_0x3adf51(0xa10)](this,_0x52d0fa,_0xbea42c,_0x14540d,_0x26078a,_0x13df3d):_0x14e07c[_0x3adf51(0x2bf)][_0x3adf51(0x583)][_0x3adf51(0xa10)](this,_0x1d07a3,_0x3f91d2,_0x2cebfb,_0x24cf11);}else{if(_0x69045a[_0x3adf51(0x31f)]()!==_0x4ba8d4['isActor']()){if(_0x3adf51(0x294)===_0x3adf51(0x2a3))this[_0x3adf51(0x298)]();else{if(_0x69045a[_0x3adf51(0xa79)]())return-0x1;if(_0x4ba8d4[_0x3adf51(0xa79)]())return 0x1;}}if(_0x69045a[_0x3adf51(0x31f)]()&&_0x4ba8d4['isActor']())return _0x69045a[_0x3adf51(0xca1)]()-_0x4ba8d4[_0x3adf51(0xca1)]();if(_0x69045a['battler']()[_0x3adf51(0x6ab)]===_0x4ba8d4[_0x3adf51(0x921)]()[_0x3adf51(0x6ab)])return _0x69045a['battler']()['_baseY']-_0x4ba8d4['battler']()[_0x3adf51(0x3db)];else{if('OvqbL'===_0x3adf51(0x48c))this[_0x3adf51(0xa51)]();else return _0x69045a[_0x3adf51(0x921)]()[_0x3adf51(0x6ab)]-_0x4ba8d4['battler']()['_baseX'];}}}),SceneManager[_0x203775(0xbba)]()&&this[_0x203775(0x466)][_0x203775(0x62b)]();},Window_BattleEnemy['prototype']['autoSelect']=function(){const _0x4edf0e=_0x164fcd,_0x209177=VisuMZ[_0x4edf0e(0xb36)][_0x4edf0e(0x1de)][_0x4edf0e(0x337)];if(_0x209177[_0x4edf0e(0x2cd)]){if('EiyTn'===_0x4edf0e(0x2fc)){if(!_0x18e464['isSideView']())return;const _0x4394ed=this[_0x4edf0e(0x921)]();if(!_0x4394ed)return;if(_0x32c03d===_0x4b3533||_0x1d39a8===_0x52a5b0)return;if(_0x4143ff(_0x189529)||_0x3ba2f9(_0x4e0a95))return;_0x23407c=_0x2b4448||0x0;if(_0x3536c1>0x0){if(_0x4394ed[_0x4edf0e(0x6ab)]>_0x2e467e)_0x575b03+=_0x4394ed[_0x4edf0e(0xab5)]/0x2+_0x18f401;if(_0x4394ed['_baseX']<_0x324649)_0x23703f-=_0x4394ed[_0x4edf0e(0xab5)]/0x2+_0x4afbf1;}if(_0xec2fc8)this[_0x4edf0e(0x4b9)](_0x52e23b,_0x36267a,![]);_0x4d893d-=_0x4394ed[_0x4edf0e(0xa35)],_0x1dd32c-=_0x4394ed[_0x4edf0e(0xa83)],_0x4394ed[_0x4edf0e(0xa52)](_0x3b6b4d,_0x23eb06,_0x4dc722);if(_0x1f5222[_0x4edf0e(0x818)])_0x4394ed[_0x4edf0e(0x6c4)](_0x26bc94||'Linear');}else this[_0x4edf0e(0x901)]();}else this['autoSelectPriority']();},Window_BattleEnemy[_0x164fcd(0x2bf)]['autoSelectLastSelected']=function(){const _0x3da7ed=_0x164fcd,_0x3bc6fe=BattleManager[_0x3da7ed(0x784)]();if(_0x3bc6fe&&_0x3bc6fe[_0x3da7ed(0x317)]()){if(_0x3da7ed(0xc36)==='ZfdJg'){if(_0x3bc6fe[_0x3da7ed(0x9ca)]()){if(_0x3da7ed(0x27d)===_0x3da7ed(0x27d)){if(this[_0x3da7ed(0x46d)]&&this[_0x3da7ed(0x466)][_0x3da7ed(0x893)](this[_0x3da7ed(0x46d)])){if('IPKFP'!==_0x3da7ed(0x463))this[_0x3da7ed(0x146)]=new _0x506bac(),_0x3c58d1[_0x3da7ed(0x362)]?this[_0x3da7ed(0x23a)](this[_0x3da7ed(0x146)]):this[_0x3da7ed(0x26c)][_0x3da7ed(0x23a)](this[_0x3da7ed(0x146)]),_0x401554[_0x3da7ed(0x4c8)][_0x3da7ed(0x146)]=this[_0x3da7ed(0x146)];else{const _0x220d84=this[_0x3da7ed(0x466)][_0x3da7ed(0x990)](this['_lastActor']);return this[_0x3da7ed(0xa7e)](_0x220d84);}}else{if(_0x3da7ed(0xac9)!==_0x3da7ed(0xac9)){_0x53bd8e=(_0x31cd3e+_0x50f01f)/0x2;if(_0x2e8970[_0x3da7ed(0x921)]())_0xe3876e+=_0x46f41b['battler']()[_0x3da7ed(0x5e0)]/0x2;}else return this[_0x3da7ed(0x3f9)]();}}else return _0x3da7ed(0x15e)[_0x3da7ed(0x272)](_0x531b05(_0x46e63c['$1']));}}else _0x2c9563[_0x3da7ed(0x2bf)]['performCounter'][_0x3da7ed(0xa10)](this),this[_0x3da7ed(0x2c0)]();}if(this[_0x3da7ed(0xc95)]&&this[_0x3da7ed(0x466)][_0x3da7ed(0x893)](this['_lastEnemy'])){const _0x2c043d=this['_enemies'][_0x3da7ed(0x990)](this['_lastEnemy']);this[_0x3da7ed(0xa7e)](_0x2c043d);}else this[_0x3da7ed(0x3f9)]();},Window_BattleEnemy['prototype'][_0x164fcd(0x3f9)]=function(){const _0x24704c=_0x164fcd,_0x27644d=BattleManager[_0x24704c(0x784)]();if(_0x27644d&&_0x27644d[_0x24704c(0x317)]()){const _0x597633=$gameParty['aliveMembers']()[0x0];let _0x1f986a=this[_0x24704c(0x466)][_0x24704c(0x990)](_0x597633);const _0x14821a=_0x27644d[_0x24704c(0x5e9)]()['scope'];if(_0x14821a[_0x24704c(0xa5d)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x24704c(0xa7e)](_0x1f986a);return;}else{if(_0x14821a['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){if(_0x24704c(0xc02)===_0x24704c(0xc02)){this['forceSelect'](_0x1f986a-0x1);return;}else _0x4973e2[_0x24704c(0x8d6)](_0x474f91);}}}const _0x1fe028=VisuMZ['BattleCore'][_0x24704c(0x1de)]['Enemy'];let _0x43964e=![];$gameSystem[_0x24704c(0x709)]()?_0x43964e=_0x1fe028['SideviewSelect']:'RaQPZ'===_0x24704c(0x261)?(this[_0x24704c(0x35c)]['x']=0x0,this[_0x24704c(0x35c)]['y']=this['height']*0.5):_0x43964e=_0x1fe028[_0x24704c(0x700)],this[_0x24704c(0xa7e)](_0x43964e?this[_0x24704c(0x768)]()-0x1:0x0);},Window_BattleEnemy[_0x164fcd(0x2bf)][_0x164fcd(0xbc6)]=function(){const _0x59a32c=_0x164fcd;Window_Selectable['prototype'][_0x59a32c(0xbc6)][_0x59a32c(0xa10)](this);if(this[_0x59a32c(0x302)]()[_0x59a32c(0xa79)]())this[_0x59a32c(0xc95)]=this['enemy']();if(this['enemy']()[_0x59a32c(0x31f)]())this[_0x59a32c(0x46d)]=this['enemy']();},Window_BattleEnemy[_0x164fcd(0x2bf)][_0x164fcd(0x71a)]=function(_0x46668c){const _0x102d40=_0x164fcd;Window_Selectable[_0x102d40(0x2bf)][_0x102d40(0x71a)][_0x102d40(0xa10)](this,_0x46668c),$gameTroop[_0x102d40(0x71a)](this['enemy']()),$gameParty[_0x102d40(0x71a)](this[_0x102d40(0x302)]());if(!this['enemy']())return;if(this[_0x102d40(0x70c)]()){const _0x3cbe6e=SceneManager[_0x102d40(0x4c8)][_0x102d40(0x91a)];if(this[_0x102d40(0x302)]()['isActor']()){if(_0x102d40(0xac8)===_0x102d40(0xac8))_0x3cbe6e[_0x102d40(0x71a)](this[_0x102d40(0x302)]()[_0x102d40(0xca1)]());else return _0x2b1c73(_0x110b05['$1']);}else _0x3cbe6e[_0x102d40(0x99e)]();}},Window_BattleEnemy[_0x164fcd(0x2bf)][_0x164fcd(0x70c)]=function(){const _0x379e91=_0x164fcd;if(!this['visible'])return![];if($gameSystem[_0x379e91(0x709)]())return![];const _0x2c0405=SceneManager[_0x379e91(0x4c8)]['battleLayoutStyle'](),_0x36b59f=[_0x379e91(0x18e),_0x379e91(0xa4e),'xp',_0x379e91(0x404),_0x379e91(0x7e6)];return _0x36b59f[_0x379e91(0x893)](_0x2c0405);},Window_BattleEnemy[_0x164fcd(0x2bf)]['openBattleActorWindow']=function(){const _0x4168c8=_0x164fcd,_0x32e84e=SceneManager[_0x4168c8(0x4c8)][_0x4168c8(0x91a)];_0x32e84e[_0x4168c8(0xc23)](),_0x32e84e[_0x4168c8(0xb9a)](!![]),_0x32e84e['refresh'](),_0x32e84e[_0x4168c8(0x99e)]();const _0x554cc0=SceneManager[_0x4168c8(0x4c8)][_0x4168c8(0x4b2)](),_0x17553d=['xp',_0x4168c8(0x404),'border'];if(_0x17553d['includes'](_0x554cc0)){if(_0x4168c8(0x85b)!==_0x4168c8(0x85b))return _0x184467[_0x4168c8(0x4c8)][_0x4168c8(0x4b2)]()===_0x4168c8(0x7e6)?_0xd06ded['BattleCore'][_0x4168c8(0x1de)][_0x4168c8(0x9a3)][_0x4168c8(0x60f)]:_0x113e70[_0x4168c8(0xb36)][_0x4168c8(0x1de)][_0x4168c8(0x9a3)][_0x4168c8(0x1cf)];else{const _0xca390=SceneManager[_0x4168c8(0x4c8)]['_statusWindow'];_0xca390[_0x4168c8(0xb56)]['y']=0x0;}}},Window_BattleEnemy['prototype']['closeBattleActorWindow']=function(){const _0x1ed897=_0x164fcd,_0x2007e0=SceneManager[_0x1ed897(0x4c8)]['_actorWindow'];_0x2007e0[_0x1ed897(0xad3)](),_0x2007e0[_0x1ed897(0xb9a)](![]),_0x2007e0[_0x1ed897(0x99e)]();const _0x54a40c=SceneManager['_scene']['_statusWindow'];_0x54a40c[_0x1ed897(0xb56)]['y']=0x1;},Window_BattleEnemy[_0x164fcd(0x2bf)]['selectAllEnemies']=function(){const _0x5eef4f=_0x164fcd,_0x31709e=BattleManager[_0x5eef4f(0x784)]();if(_0x31709e)_0x31709e[_0x5eef4f(0x11f)](_0x5eef4f(0x398));this[_0x5eef4f(0x9b7)]();},Window_BattleEnemy[_0x164fcd(0x2bf)][_0x164fcd(0x925)]=function(){const _0x12e189=_0x164fcd,_0x31cadb=BattleManager[_0x12e189(0x784)]();if(_0x31cadb)_0x31cadb[_0x12e189(0x11f)](_0x12e189(0xa4d));this['processOk']();},Window_BattleItem['prototype'][_0x164fcd(0x893)]=function(_0x1567d9){const _0x1e639b=_0x164fcd;if(!_0x1567d9)return![];return _0x1567d9[_0x1e639b(0x6ef)]===0x0||_0x1567d9[_0x1e639b(0x6ef)]===0x1;};function Window_AutoBattleCancel(){const _0x416ead=_0x164fcd;this[_0x416ead(0x1ec)](...arguments);}Window_AutoBattleCancel['prototype']=Object[_0x164fcd(0x5fc)](Window_Base['prototype']),Window_AutoBattleCancel['prototype'][_0x164fcd(0xc12)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x164fcd(0x2bf)]['initialize']=function(_0x64eedc){const _0x2d84f1=_0x164fcd;Window_Base[_0x2d84f1(0x2bf)][_0x2d84f1(0x1ec)][_0x2d84f1(0xa10)](this,_0x64eedc),this[_0x2d84f1(0x518)](this[_0x2d84f1(0x1e1)]()),this[_0x2d84f1(0x72d)]();},Window_AutoBattleCancel[_0x164fcd(0x2bf)][_0x164fcd(0x1e1)]=function(){const _0x2dadaa=_0x164fcd;return VisuMZ[_0x2dadaa(0xb36)][_0x2dadaa(0x1de)]['AutoBattle']['AutoBattleBgType'];},Window_AutoBattleCancel['prototype'][_0x164fcd(0x72d)]=function(){const _0x488a2a=_0x164fcd;this[_0x488a2a(0x382)][_0x488a2a(0x7bf)]();const _0x1f66ce=VisuMZ[_0x488a2a(0xb36)][_0x488a2a(0x1de)]['AutoBattle'][_0x488a2a(0xba7)],_0x3e28bc=_0x1f66ce[_0x488a2a(0x272)](this[_0x488a2a(0x5bb)](),this[_0x488a2a(0x590)]()),_0x3f9845=this[_0x488a2a(0x45a)](_0x3e28bc)['width'],_0x2adf87=Math[_0x488a2a(0x923)]((this['innerWidth']-_0x3f9845)/0x2);this['drawTextEx'](_0x3e28bc,_0x2adf87,0x0,_0x3f9845);},Window_AutoBattleCancel['prototype']['okButtonText']=function(){const _0xe782fb=_0x164fcd;return Imported[_0xe782fb(0x818)]?TextManager[_0xe782fb(0x986)]('ok'):VisuMZ['BattleCore'][_0xe782fb(0x1de)][_0xe782fb(0x8ef)]['AutoBattleOK'];},Window_AutoBattleCancel[_0x164fcd(0x2bf)][_0x164fcd(0x590)]=function(){const _0x339d22=_0x164fcd;if(Imported[_0x339d22(0x818)]){if(_0x339d22(0xc4d)===_0x339d22(0xc4d))return TextManager[_0x339d22(0x986)](_0x339d22(0x673));else{const _0x4acae0=this[_0x339d22(0xd1c)](_0x5bab6f),_0x443a1d=this[_0x339d22(0x42c)](_0x492044),_0x3e4fd1=this[_0x339d22(0x45a)](_0x443a1d)[_0x339d22(0xab5)];this['changePaintOpacity'](this[_0x339d22(0x720)](_0x337a1d));const _0x4760ee=this[_0x339d22(0x35d)]();if(_0x4760ee===_0x339d22(0x29e))this[_0x339d22(0x625)](_0x443a1d,_0x4acae0['x']+_0x4acae0['width']-_0x3e4fd1,_0x4acae0['y'],_0x3e4fd1);else{if(_0x4760ee==='center'){const _0x28d44d=_0x4acae0['x']+_0x5e6b78[_0x339d22(0x923)]((_0x4acae0[_0x339d22(0xab5)]-_0x3e4fd1)/0x2);this[_0x339d22(0x625)](_0x443a1d,_0x28d44d,_0x4acae0['y'],_0x3e4fd1);}else this['drawTextEx'](_0x443a1d,_0x4acae0['x'],_0x4acae0['y'],_0x3e4fd1);}}}else return VisuMZ['BattleCore'][_0x339d22(0x1de)][_0x339d22(0x8ef)]['AutoBattleCancel'];},Window_AutoBattleCancel[_0x164fcd(0x2bf)]['update']=function(){const _0xb06d92=_0x164fcd;Window_Base['prototype']['update']['call'](this),this[_0xb06d92(0xca2)](),this[_0xb06d92(0x9a4)]();},Window_AutoBattleCancel[_0x164fcd(0x2bf)][_0x164fcd(0xca2)]=function(){const _0x1957a2=_0x164fcd;this['visible']=BattleManager[_0x1957a2(0x9c8)];},Window_AutoBattleCancel[_0x164fcd(0x2bf)][_0x164fcd(0x9a4)]=function(){const _0x3bbb04=_0x164fcd;if(!BattleManager['_autoBattle'])return;if(Input[_0x3bbb04(0xb2b)]('ok')||Input[_0x3bbb04(0xb2b)]('cancel')||TouchInput[_0x3bbb04(0x259)]()||TouchInput[_0x3bbb04(0xa7f)]()){if(_0x3bbb04(0xc6f)!=='yGaoY')SoundManager['playCancel'](),BattleManager[_0x3bbb04(0x9c8)]=![],Input['clear'](),TouchInput[_0x3bbb04(0x7bf)]();else return[_0x148c16];}};function Window_EnemyName(){const _0x34b7f5=_0x164fcd;this[_0x34b7f5(0x1ec)](...arguments);}Window_EnemyName[_0x164fcd(0x2bf)]=Object['create'](Window_StatusBase[_0x164fcd(0x2bf)]),Window_EnemyName['prototype'][_0x164fcd(0xc12)]=Window_EnemyName,Window_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x1ec)]=function(_0xb5f723){const _0x3b4f70=_0x164fcd;this[_0x3b4f70(0x218)]=_0xb5f723,this[_0x3b4f70(0x451)]='';const _0x273e02=new Rectangle(0x0,0x0,Graphics[_0x3b4f70(0x273)],this['lineHeight']()*0x4);Window_StatusBase['prototype']['initialize'][_0x3b4f70(0xa10)](this,_0x273e02),this[_0x3b4f70(0x518)](0x2),this[_0x3b4f70(0xb6c)]=0x0;},Window_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x586)]=function(){const _0x5a38cd=_0x164fcd;this[_0x5a38cd(0xc5b)]=0x0;},Window_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x302)]=function(){const _0x149e21=_0x164fcd;return $gameTroop[_0x149e21(0x346)]()[this[_0x149e21(0x218)]];},Window_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x71d)]=function(){const _0x4499dd=_0x164fcd;Window_StatusBase[_0x4499dd(0x2bf)][_0x4499dd(0x71d)][_0x4499dd(0xa10)](this),this['enemy']()&&this[_0x4499dd(0x302)]()[_0x4499dd(0x16d)]()!==this[_0x4499dd(0x451)]&&(this[_0x4499dd(0x451)]=this[_0x4499dd(0x302)]()['name'](),this[_0x4499dd(0x72d)]()),this[_0x4499dd(0xaca)](),this[_0x4499dd(0x682)]();},Window_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0xaca)]=function(){const _0xb66e94=_0x164fcd;if(!this[_0xb66e94(0x302)]()){if(_0xb66e94(0x4c3)!==_0xb66e94(0xb7a)){if(this[_0xb66e94(0xb6c)]>0x0)this[_0xb66e94(0xb6c)]-=0x10;}else this['updateStateSprite'](),this[_0xb66e94(0x59c)]();}else{if(this[_0xb66e94(0x302)]()[_0xb66e94(0x468)]()){if(_0xb66e94(0xc94)!==_0xb66e94(0xc94)){if(this[_0xb66e94(0x3df)]>0x0){const _0x3178cd=this[_0xb66e94(0x3df)],_0xddc050=this['_borderPortraitSprite'];_0xddc050['x']=(_0xddc050['x']*(_0x3178cd-0x1)+this['_borderPortraitTargetX'])/_0x3178cd,_0xddc050[_0xb66e94(0x4c4)]=(_0xddc050[_0xb66e94(0x4c4)]*(_0x3178cd-0x1)+0xff)/_0x3178cd,this['_borderPortraitDuration']--;}}else{if(this['contentsOpacity']>0x0)this['contentsOpacity']-=0x10;}}else{if(SceneManager[_0xb66e94(0x4c8)][_0xb66e94(0x95b)]&&SceneManager[_0xb66e94(0x4c8)][_0xb66e94(0x95b)][_0xb66e94(0x533)]&&SceneManager[_0xb66e94(0x4c8)][_0xb66e94(0x95b)][_0xb66e94(0x466)][_0xb66e94(0x893)](this[_0xb66e94(0x302)]())){if(this['contentsOpacity']<0xff)this[_0xb66e94(0xb6c)]+=0x10;}else this[_0xb66e94(0xb6c)]>0x0&&(_0xb66e94(0xbb0)===_0xb66e94(0x360)?(_0x3f3bdf['BattleCore'][_0xb66e94(0x579)]&&_0x55f1a8[_0xb66e94(0xb36)]['ParseEnemyNotetags']['call'](this,_0x4b60cf),_0x2d2253[_0xb66e94(0xb36)][_0xb66e94(0xc4e)](_0x3d606b)):this[_0xb66e94(0xb6c)]-=0x10);}}},Window_EnemyName[_0x164fcd(0x2bf)]['updatePosition']=function(){const _0x142c75=_0x164fcd;if(!this[_0x142c75(0x302)]())return;SceneManager['isBattleFlipped']()?_0x142c75(0xd16)===_0x142c75(0xb97)?this['isTpb']()?this['selectNextCommandTpb']():_0x3dce74['BattleCore'][_0x142c75(0xaaf)][_0x142c75(0xa10)](this):this['x']=Graphics['boxWidth']-this['enemy']()[_0x142c75(0x921)]()[_0x142c75(0x6ab)]:this['x']=this[_0x142c75(0x302)]()[_0x142c75(0x921)]()['_baseX'];this['x']-=Math[_0x142c75(0xa13)](this['width']/0x2),this['y']=this['enemy']()[_0x142c75(0x921)]()[_0x142c75(0x3db)]-Math[_0x142c75(0xa13)](this[_0x142c75(0x82c)]()*1.5);const _0x404555=VisuMZ[_0x142c75(0xb36)][_0x142c75(0x1de)][_0x142c75(0x337)];this['x']+=_0x404555[_0x142c75(0xcf9)]||0x0,this['y']+=_0x404555[_0x142c75(0xb3b)]||0x0;},Window_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x599)]=function(){const _0x3d4fcf=_0x164fcd;Window_Base[_0x3d4fcf(0x2bf)][_0x3d4fcf(0x599)][_0x3d4fcf(0xa10)](this),this[_0x3d4fcf(0x382)][_0x3d4fcf(0xc18)]=VisuMZ[_0x3d4fcf(0xb36)]['Settings'][_0x3d4fcf(0x337)][_0x3d4fcf(0xc47)];},Window_EnemyName['prototype'][_0x164fcd(0x72d)]=function(){const _0x1f8723=_0x164fcd;Window_StatusBase[_0x1f8723(0x2bf)]['refresh'][_0x1f8723(0xa10)](this),this[_0x1f8723(0x382)]['clear']();if(!this[_0x1f8723(0x302)]())return;this[_0x1f8723(0x3a9)]();},Window_EnemyName[_0x164fcd(0x2bf)][_0x164fcd(0x3a9)]=function(){const _0x40d264=_0x164fcd;this[_0x40d264(0x451)]=this[_0x40d264(0x302)]()[_0x40d264(0x16d)]();const _0x1aa992=this['textSizeEx'](this['_text'])['width'],_0x732e7b=Math['round']((this[_0x40d264(0x96e)]-_0x1aa992)/0x2);this['drawTextEx'](this[_0x40d264(0x451)],_0x732e7b,0x0,_0x1aa992+0x8);},Window_BattleLog['prototype']['maxLines']=function(){const _0x3c8e30=_0x164fcd;return VisuMZ[_0x3c8e30(0xb36)][_0x3c8e30(0x1de)][_0x3c8e30(0xa08)][_0x3c8e30(0x535)];},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x7ed)]=function(){const _0x2254c3=_0x164fcd;return VisuMZ['BattleCore'][_0x2254c3(0x1de)][_0x2254c3(0xa08)][_0x2254c3(0x952)];},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x963)]=function(){const _0x38e799=_0x164fcd;return VisuMZ[_0x38e799(0xb36)][_0x38e799(0x1de)]['BattleLog'][_0x38e799(0xa06)];},Window_BattleLog[_0x164fcd(0x2bf)]['isFastForward']=function(){return![];},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x5d0)]=function(_0x159027,_0x5b9a95){const _0x5e8028=_0x164fcd;this[_0x5e8028(0xa1f)](_0x5e8028(0x8b8)),BattleManager['invokeAction'](_0x159027,_0x5b9a95),this[_0x5e8028(0x227)]();},Window_BattleLog['prototype'][_0x164fcd(0x8b8)]=function(){const _0x400582=_0x164fcd;this[_0x400582(0x227)]();},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x56b)]=function(_0x531e77){const _0x1937bf=_0x164fcd,_0x3faf0a=Array[_0x1937bf(0x2bf)][_0x1937bf(0x725)]['call'](arguments,0x1),_0x3fc03f={'name':_0x531e77,'params':_0x3faf0a},_0x2c518a=this[_0x1937bf(0x4e0)][_0x1937bf(0xa98)](_0x385b09=>_0x385b09[_0x1937bf(0x16d)])['indexOf']('actionSplicePoint');_0x2c518a>=0x0?this[_0x1937bf(0x4e0)][_0x1937bf(0x9a8)](_0x2c518a,0x0,_0x3fc03f):this[_0x1937bf(0x4e0)][_0x1937bf(0x56b)](_0x3fc03f);},Window_BattleLog['prototype'][_0x164fcd(0xa1f)]=function(_0x123749){const _0x1b0cf8=_0x164fcd,_0x3c0de1=Array[_0x1b0cf8(0x2bf)][_0x1b0cf8(0x725)]['call'](arguments,0x1);this['_methods'][_0x1b0cf8(0xa1f)]({'name':_0x123749,'params':_0x3c0de1});},Window_BattleLog[_0x164fcd(0x2bf)]['logActionList']=function(){const _0x5df7e4=_0x164fcd;if(!$gameTemp[_0x5df7e4(0x44a)]())return;console[_0x5df7e4(0x18d)](this[_0x5df7e4(0x4e0)][_0x5df7e4(0xa98)](_0x13eee5=>_0x13eee5[_0x5df7e4(0x16d)])[_0x5df7e4(0xaf6)]('\x0a'));},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x55d)]=Window_BattleLog[_0x164fcd(0x2bf)]['refresh'],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x72d)]=function(){const _0x4ad23=_0x164fcd;this[_0x4ad23(0x534)]=!![];},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x96b)]=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x71d)],Window_BattleLog['prototype'][_0x164fcd(0x71d)]=function(){const _0x1a35f0=_0x164fcd;VisuMZ[_0x1a35f0(0xb36)][_0x1a35f0(0x96b)][_0x1a35f0(0xa10)](this);if(this[_0x1a35f0(0x534)])this[_0x1a35f0(0x425)]();},Window_BattleLog[_0x164fcd(0x2bf)]['processRefresh']=function(){const _0x40701f=_0x164fcd;this[_0x40701f(0x534)]=![],VisuMZ[_0x40701f(0xb36)][_0x40701f(0x55d)][_0x40701f(0xa10)](this);},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0xaf5)]=function(_0x157384){const _0x5a5802=_0x164fcd;let _0x1439d1=VisuMZ[_0x5a5802(0xb36)]['Settings'][_0x5a5802(0xa08)][_0x5a5802(0x4c2)][_0x5a5802(0x790)]()['trim'](),_0x1bf8d5=this['_lines'][_0x157384];if(_0x1bf8d5[_0x5a5802(0xa5d)](/<LEFT>/i))_0x1439d1=_0x5a5802(0xa6a);else{if(_0x1bf8d5[_0x5a5802(0xa5d)](/<CENTER>/i))'xMcUW'!==_0x5a5802(0x2d8)?_0x1439d1=_0x5a5802(0x37f):(_0x27a3ad[_0x5a5802(0xb36)][_0x5a5802(0x343)][_0x5a5802(0xa10)](this),this['setupBattlebackBattleCore']());else _0x1bf8d5[_0x5a5802(0xa5d)](/<RIGHT>/i)&&(_0x5a5802(0xc03)==='raCgT'?(_0x84697d[_0x5a5802(0x9c9)](),_0x282c5a[_0x5a5802(0x8c4)](_0x4f863c),_0x1d59de[_0x5a5802(0xb36)][_0x5a5802(0x85e)][_0x5a5802(0xa10)](this,_0x4ac4ae),this[_0x5a5802(0xc57)]()):_0x1439d1=_0x5a5802(0x29e));}_0x1bf8d5=_0x1bf8d5[_0x5a5802(0x6db)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x1bf8d5=_0x1bf8d5[_0x5a5802(0x6db)](/\\I\[0\]/gi,'');const _0xe7602f=this[_0x5a5802(0x33f)](_0x157384);this['contents'][_0x5a5802(0x61e)](_0xe7602f['x'],_0xe7602f['y'],_0xe7602f[_0x5a5802(0xab5)],_0xe7602f[_0x5a5802(0x5e0)]);const _0x11fd6a=this['textSizeEx'](_0x1bf8d5)[_0x5a5802(0xab5)];let _0x56e0dc=_0xe7602f['x'];if(_0x1439d1==='center'){if(_0x5a5802(0xce9)===_0x5a5802(0xce9))_0x56e0dc+=(_0xe7602f['width']-_0x11fd6a)/0x2;else{this[_0x5a5802(0x35b)][_0x5a5802(0xd03)](),this[_0x5a5802(0xc78)]['close']();if(!_0xa9d5b9[_0x5a5802(0xb36)]['TpbActiveChangeEnabled'])return;if(_0x2f607d[_0x5a5802(0xb9e)]&&_0xee5a8[_0x5a5802(0xc96)]())return;if(_0x13c6a9[_0x5a5802(0x6b6)]){_0x8f8406[_0x5a5802(0x6b6)][_0x5a5802(0x4e9)](_0x5a5802(0x47c));const _0x1a09ad=_0x1e497f[_0x5a5802(0x6b6)][_0x5a5802(0x921)]();if(_0x1a09ad)_0x1a09ad[_0x5a5802(0x4e2)]();}_0x36bb9a[_0x5a5802(0x6b6)]=null;}}else{if(_0x1439d1===_0x5a5802(0x29e)){if(_0x5a5802(0xc37)!==_0x5a5802(0x1c8))_0x56e0dc+=_0xe7602f[_0x5a5802(0xab5)]-_0x11fd6a;else return _0x3bca70[_0x5a5802(0xb36)][_0x5a5802(0x775)]['call'](this);}}this[_0x5a5802(0x625)](_0x1bf8d5,_0x56e0dc,_0xe7602f['y'],_0x11fd6a+0x8);},Window_BattleLog['prototype'][_0x164fcd(0x233)]=function(_0x53c792){const _0x5c10b7=_0x164fcd;this['_lines'][_0x5c10b7(0x56b)](_0x53c792),this['refresh'](),this['callNextMethod']();},Window_BattleLog['prototype'][_0x164fcd(0x888)]=function(){const _0x3ff8ba=_0x164fcd;let _0x550010=![];switch(this[_0x3ff8ba(0xa88)]){case _0x3ff8ba(0x3b7):_0x550010=this[_0x3ff8ba(0xbd6)][_0x3ff8ba(0x8b2)]();break;case _0x3ff8ba(0xbcf):_0x550010=this[_0x3ff8ba(0xbd6)][_0x3ff8ba(0x57f)]();break;case _0x3ff8ba(0x3f1):_0x550010=this[_0x3ff8ba(0xbd6)][_0x3ff8ba(0xad0)]();break;case'float':_0x550010=this[_0x3ff8ba(0xbd6)][_0x3ff8ba(0x87a)]();break;case _0x3ff8ba(0x6a6):_0x550010=this[_0x3ff8ba(0xbd6)][_0x3ff8ba(0xaa6)]();break;case _0x3ff8ba(0x4c4):_0x550010=this[_0x3ff8ba(0xbd6)][_0x3ff8ba(0x947)]();break;}return!_0x550010&&(this[_0x3ff8ba(0xa88)]=''),_0x550010;},Window_BattleLog['prototype'][_0x164fcd(0x72c)]=function(){const _0xba192a=_0x164fcd;this[_0xba192a(0x3a2)](_0xba192a(0x3f1));},Window_BattleLog[_0x164fcd(0x2bf)]['waitForFloat']=function(){const _0x3afc48=_0x164fcd;this['setWaitMode'](_0x3afc48(0x60a));},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x995)]=function(){const _0x11f433=_0x164fcd;this[_0x11f433(0x3a2)]('jump');},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x5a2)]=function(){const _0x15fb5d=_0x164fcd;this[_0x15fb5d(0x3a2)](_0x15fb5d(0x4c4));},Window_BattleLog['prototype']['startTurn']=function(){const _0x673098=_0x164fcd,_0x3e9a09=VisuMZ[_0x673098(0xb36)][_0x673098(0x1de)][_0x673098(0xa08)];if(!_0x3e9a09['StartTurnShow'])return;this[_0x673098(0x56b)](_0x673098(0x233),_0x3e9a09[_0x673098(0x9f5)][_0x673098(0x272)]($gameTroop['turnCount']())),this['push'](_0x673098(0xc7d),_0x3e9a09[_0x673098(0x3fc)]),this['push'](_0x673098(0x7bf));},Window_BattleLog[_0x164fcd(0x2bf)]['startAction']=function(_0x4ce2b2,_0x144250,_0x193fe4){const _0x2c431a=_0x164fcd;if(this[_0x2c431a(0x941)](_0x144250))BattleManager[_0x2c431a(0x968)]();else{if(_0x2c431a(0x9de)!==_0x2c431a(0x9de)){if(!_0xdc7ee6)return;if(!this[_0x2c431a(0x974)](_0x25e25f))return;const _0x2218fe=this[_0x2c431a(0xb3c)](),_0x40e5cd=_0x3aa625[_0x2c431a(0xc9f)](_0x531587),_0x2f4710=_0x120c25[_0x2c431a(0xb51)](_0x419fd5),_0x33462a=_0x2218fe===_0x2c431a(0xb1d)?_0x40e5cd:_0x2c431a(0x478)[_0x2c431a(0x272)](_0x2f4710,_0x40e5cd),_0x514d35=this[_0x2c431a(0x41e)][_0x2c431a(0x71f)](_0x88c20e);this[_0x2c431a(0x6a2)](_0x33462a,_0x2c431a(0x40b),_0x514d35,_0x425033['id']);}else this['usePremadeActionSequence'](_0x4ce2b2,_0x144250,_0x193fe4);}},Window_BattleLog['prototype'][_0x164fcd(0x941)]=function(_0x482749){const _0x3d5892=_0x164fcd;if(!SceneManager[_0x3d5892(0x53f)]())return![];if(!_0x482749)return![];if(!_0x482749[_0x3d5892(0x5e9)]())return![];if(_0x482749[_0x3d5892(0x5e9)]()[_0x3d5892(0x9ea)][_0x3d5892(0xa5d)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x3d5892(0xba1)](_0x482749['item']()))return!![];return![];},Window_BattleLog[_0x164fcd(0x2bf)]['usePremadeActionSequence']=function(_0xa84e5d,_0x3a7ad3,_0x11a146){const _0x3a68fb=_0x164fcd,_0x332c6f=_0x3a7ad3[_0x3a68fb(0x5e9)]();this['setupActionSet'](_0xa84e5d,_0x3a7ad3,_0x11a146),this[_0x3a68fb(0x381)](_0xa84e5d,_0x3a7ad3,_0x11a146),this[_0x3a68fb(0x5eb)](_0xa84e5d,_0x3a7ad3,_0x11a146);},Window_BattleLog['prototype']['displayAction']=function(_0x6cb375,_0x207343){const _0x422815=_0x164fcd,_0x20e42a=VisuMZ[_0x422815(0xb36)][_0x422815(0x1de)]['BattleLog'];_0x20e42a['ActionCenteredName']&&this[_0x422815(0x56b)](_0x422815(0x233),'<CENTER>%1'[_0x422815(0x272)](DataManager[_0x422815(0x530)](_0x207343)));if(DataManager[_0x422815(0x9bc)](_0x207343)){if(_0x20e42a['ActionSkillMsg1'])this[_0x422815(0xa53)](_0x207343[_0x422815(0x21e)],_0x6cb375,_0x207343);if(_0x20e42a[_0x422815(0xd0a)])this[_0x422815(0xa53)](_0x207343[_0x422815(0xc7e)],_0x6cb375,_0x207343);}else{if('fZGio'!==_0x422815(0x726)){if(_0x20e42a['ActionItemMsg'])this[_0x422815(0xa53)](TextManager[_0x422815(0x2b6)],_0x6cb375,_0x207343);}else this['x']=_0x5d3209[_0x422815(0xa13)](_0xe1bb05[_0x422815(0x273)]/0x2),this['y']=_0x314493['round'](_0x40ae60[_0x422815(0xa5c)]/0x2);}},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x5e7)]=function(_0x51c185,_0x152009,_0x323369){const _0x53d59a=_0x164fcd,_0x48df41=_0x152009[_0x53d59a(0x5e9)]();this['displayAction'](_0x51c185,_0x48df41),this['push'](_0x53d59a(0x1e9),_0x51c185,_0x323369,!![]),this['push'](_0x53d59a(0x998),_0x51c185,_0x152009),this[_0x53d59a(0x56b)]('waitForMovement'),this[_0x53d59a(0x56b)]('performCastAnimation',_0x51c185,_0x152009),this[_0x53d59a(0x56b)](_0x53d59a(0x72c));},Window_BattleLog['prototype']['createEffectActionSet']=function(_0x4558e7,_0x5d51d9,_0x544f34){const _0x2744a0=_0x164fcd;if(this[_0x2744a0(0x2cf)](_0x5d51d9)){if(_0x2744a0(0xc80)!=='CtZRv'){const _0x393c3b=[],_0x514f58=new _0x10a145(this);return _0x514f58['setAttack'](),_0x393c3b[_0x2744a0(0x56b)](_0x514f58),_0x393c3b;}else this[_0x2744a0(0xa0c)](_0x4558e7,_0x5d51d9,_0x544f34);}else{if(this['isMeleeMultiTargetAction'](_0x5d51d9)){if(_0x2744a0(0x3a6)===_0x2744a0(0x135))for(const _0xca7bb9 of _0x13e2ae[_0x2744a0(0x4d1)]()){this['_logWindow'][_0x2744a0(0x56b)](_0x2744a0(0x233),_0x4f23b9['emerge']['format'](_0xca7bb9)),this[_0x2744a0(0x566)][_0x2744a0(0x56b)]('wait'),_0x441c0a=!![];}else this[_0x2744a0(0x4c9)](_0x4558e7,_0x5d51d9,_0x544f34);}else _0x5d51d9['isForRandom']()?this[_0x2744a0(0x421)](_0x4558e7,_0x5d51d9,_0x544f34):this[_0x2744a0(0x2d1)](_0x4558e7,_0x5d51d9,_0x544f34);}},Window_BattleLog['prototype'][_0x164fcd(0x280)]=function(_0x22af0f,_0x577f58,_0x46b960,_0x317926){const _0x4cbc57=_0x164fcd;if(_0x577f58){if(_0x4cbc57(0x38c)!==_0x4cbc57(0x38c))return 0x0;else{const _0x4448ac=_0x22af0f['battler']();this['push'](_0x4cbc57(0x1c7),[_0x22af0f],_0x46b960,_0x317926),this['push'](_0x4cbc57(0x2c1),_0x22af0f,_0x4448ac[_0x4cbc57(0xa35)],_0x4448ac[_0x4cbc57(0xa83)],_0x317926,![],'Linear'),this['push']('requestMotion',[_0x22af0f],'evade'),this[_0x4cbc57(0x56b)](_0x4cbc57(0x41f)),this[_0x4cbc57(0x56b)](_0x4cbc57(0x8f0),[_0x22af0f],_0x4cbc57(0x8cd));}}},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x2cf)]=function(_0x124c12){const _0x1e93f4=_0x164fcd;if(!_0x124c12[_0x1e93f4(0x510)]())return![];if(!_0x124c12[_0x1e93f4(0x34c)]())return![];if(!_0x124c12[_0x1e93f4(0x7ec)]())return![];return VisuMZ[_0x1e93f4(0xb36)]['Settings']['ActionSequence']['AutoMeleeSolo'];},Window_BattleLog['prototype'][_0x164fcd(0xa0c)]=function(_0x14f6d2,_0x28753c,_0x284e95){const _0x52b42e=_0x164fcd,_0x187ab9=_0x14f6d2[_0x52b42e(0x801)]()[_0x52b42e(0xaa3)]<0x2,_0x1e493d=0x14,_0x257153=0x30;_0x187ab9&&_0x14f6d2[_0x52b42e(0x31f)]()!==_0x284e95[0x0][_0x52b42e(0x31f)]()&&(_0x52b42e(0x692)==='tpWrJ'?_0x13ccf6['BattleCore']['Sprite_Actor_setActorHome'][_0x52b42e(0xa10)](this,_0x5727ba):(this[_0x52b42e(0x56b)](_0x52b42e(0x1c7),[_0x14f6d2],_0x257153,_0x1e493d),this[_0x52b42e(0x56b)](_0x52b42e(0x2ae),_0x14f6d2,_0x284e95,'front\x20base',_0x1e493d,!![],_0x52b42e(0x28c),!![]),this[_0x52b42e(0x56b)](_0x52b42e(0x8f0),[_0x14f6d2],_0x52b42e(0x8cd)),this[_0x52b42e(0x56b)](_0x52b42e(0x41f))));let _0x470f47=_0x28753c[_0x52b42e(0x359)]()?this[_0x52b42e(0x759)](_0x14f6d2):0x1;for(let _0x27d5d6=0x0;_0x27d5d6<_0x470f47;_0x27d5d6++){_0x28753c[_0x52b42e(0x359)]()&&_0x14f6d2[_0x52b42e(0x31f)]()&&this['push'](_0x52b42e(0x8e6),_0x14f6d2,_0x27d5d6),_0x28753c[_0x52b42e(0x5e9)]()[_0x52b42e(0x52a)]<0x0?_0x52b42e(0x2bb)==='zHYQd'?(_0x5cc4ee*=-0x1,_0x85b538*=-0x1):this['targetActionSet'](_0x14f6d2,_0x28753c,_0x284e95):this[_0x52b42e(0x2d1)](_0x14f6d2,_0x28753c,_0x284e95);}_0x28753c['isAttack']()&&_0x14f6d2[_0x52b42e(0x31f)]()&&('TjQFS'!==_0x52b42e(0xc8e)?this[_0x52b42e(0x56b)](_0x52b42e(0x2ed),_0x14f6d2):(_0xc4f285[_0x52b42e(0xb36)][_0x52b42e(0x894)][_0x52b42e(0xa10)](this),_0x3c8125['_battleCoreBattleResumeAfter']&&(this[_0x52b42e(0x6a0)]=!![],_0x143858['_battleCoreBattleResumeAfter']=_0x3be443))),this['push'](_0x52b42e(0x1e9),_0x14f6d2,_0x284e95,![]),this[_0x52b42e(0x280)](_0x14f6d2,_0x187ab9,_0x257153,_0x1e493d);},Window_BattleLog['prototype'][_0x164fcd(0x580)]=function(_0x5bc39b){const _0x1a5f10=_0x164fcd;if(!_0x5bc39b['isPhysical']())return![];if(!_0x5bc39b[_0x1a5f10(0x4a2)]())return![];if(!_0x5bc39b[_0x1a5f10(0x7ec)]())return![];return VisuMZ[_0x1a5f10(0xb36)][_0x1a5f10(0x1de)][_0x1a5f10(0x8b1)][_0x1a5f10(0x785)];},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x4c9)]=function(_0x3b5d8b,_0xb6bcd6,_0x42d565){const _0x13f897=_0x164fcd,_0xd62af9=_0x3b5d8b[_0x13f897(0x801)]()[_0x13f897(0xaa3)]<0x2,_0x5151b2=0x14,_0x51f6ce=0x30;if(_0xd62af9){this['push'](_0x13f897(0x1c7),[_0x3b5d8b],_0x51f6ce,_0x5151b2);const _0x227a6c=_0x42d565['length']>0x1?'front\x20center':_0x13f897(0x541);this[_0x13f897(0x56b)](_0x13f897(0x2ae),_0x3b5d8b,_0x42d565,_0x227a6c,_0x5151b2,!![],_0x13f897(0x28c),!![]),this[_0x13f897(0x56b)]('requestMotion',[_0x3b5d8b],_0x13f897(0x8cd)),this[_0x13f897(0x56b)](_0x13f897(0x41f));}let _0x8c5e5a=_0xb6bcd6[_0x13f897(0x359)]()?this[_0x13f897(0x759)](_0x3b5d8b):0x1;for(let _0xf45363=0x0;_0xf45363<_0x8c5e5a;_0xf45363++){if(_0x13f897(0x1cb)!==_0x13f897(0x1cb)){const _0x3a5a3f=_0x39b6b0[_0x13f897(0x4c8)][_0x13f897(0x8c5)];_0x3a5a3f&&_0x3a5a3f[_0x13f897(0xb15)](this);}else{if(_0xb6bcd6[_0x13f897(0x359)]()&&_0x3b5d8b['isActor']()){if(_0x13f897(0xc26)===_0x13f897(0xbce)){const _0x1699d1=_0x5cafeb[_0x13f897(0x990)](_0x3867a4['toUpperCase']()[_0x13f897(0xab7)]());_0x1699d1>=0x0&&_0x1699d1<=0x7&&_0x105749['isDebuffAffected'](_0x1699d1)&&_0xbd72db[_0x13f897(0x268)](_0x1699d1);}else this[_0x13f897(0x56b)](_0x13f897(0x8e6),_0x3b5d8b,_0xf45363);}this['wholeActionSet'](_0x3b5d8b,_0xb6bcd6,_0x42d565);}}_0xb6bcd6['isAttack']()&&_0x3b5d8b['isActor']()&&this[_0x13f897(0x56b)]('clearActiveWeaponSet',_0x3b5d8b),this[_0x13f897(0x56b)]('applyImmortal',_0x3b5d8b,_0x42d565,![]),this['addMeleeReturnActionSet'](_0x3b5d8b,_0xd62af9,_0x51f6ce,_0x5151b2);},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x421)]=function(_0x23c379,_0x436d12,_0xade978){const _0x3328c4=_0x164fcd,_0x537d0e=_0x436d12[_0x3328c4(0x5e9)]();for(const _0x388d75 of _0xade978){if(!_0x388d75)continue;this[_0x3328c4(0x56b)](_0x3328c4(0x78f),_0x23c379,_0x436d12),this['push'](_0x3328c4(0xc7d),Sprite_Battler[_0x3328c4(0x3aa)]),this[_0x3328c4(0x56b)]('showAnimation',_0x23c379,[_0x388d75],_0x537d0e['animationId']),this[_0x3328c4(0x56b)]('waitCount',0x18),this[_0x3328c4(0x56b)](_0x3328c4(0x5d0),_0x23c379,_0x388d75);}},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x2d1)]=function(_0x4d22da,_0x31a0f9,_0x182678){const _0x17af38=_0x164fcd,_0x5c6dbf=_0x31a0f9[_0x17af38(0x5e9)]();let _0x21b52b=_0x31a0f9[_0x17af38(0x359)]()?0x1+_0x4d22da['attackTimesAdd']():0x1;while(_0x21b52b--){this[_0x17af38(0x56b)](_0x17af38(0x78f),_0x4d22da,_0x31a0f9),this[_0x17af38(0x56b)](_0x17af38(0xc7d),Sprite_Battler['_motionSpeed']),this[_0x17af38(0x56b)](_0x17af38(0x589),_0x4d22da,_0x182678[_0x17af38(0x400)](),_0x5c6dbf[_0x17af38(0x52a)]),this['push'](_0x17af38(0x72c));}for(const _0x37b63f of _0x182678){if(_0x17af38(0x71b)!=='dNUOE')_0x2154e0[_0x17af38(0xb36)][_0x17af38(0x216)]['call'](this,_0x252b5d),this[_0x17af38(0x138)]();else{if(!_0x37b63f)continue;this['push'](_0x17af38(0x5d0),_0x4d22da,_0x37b63f);}}},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x5eb)]=function(_0x5ee3cb,_0x39a926,_0x4256e7){const _0x186b61=_0x164fcd,_0x52941c=_0x39a926[_0x186b61(0x5e9)]();this[_0x186b61(0x56b)](_0x186b61(0x1e9),_0x5ee3cb,_0x4256e7,![]),this[_0x186b61(0x56b)](_0x186b61(0x86c)),this[_0x186b61(0x56b)](_0x186b61(0x264)),this[_0x186b61(0x56b)]('clear'),this[_0x186b61(0x56b)](_0x186b61(0x815),_0x5ee3cb),this['push'](_0x186b61(0x41f));},Window_BattleLog[_0x164fcd(0x2bf)]['endAction']=function(_0x2f8a38){},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x8d5)]=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x44f)],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x44f)]=function(_0x2ae914){const _0x15c6eb=_0x164fcd;if(!VisuMZ[_0x15c6eb(0xb36)][_0x15c6eb(0x1de)][_0x15c6eb(0xa08)][_0x15c6eb(0x263)])return;VisuMZ[_0x15c6eb(0xb36)][_0x15c6eb(0x8d5)][_0x15c6eb(0xa10)](this,_0x2ae914);},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x70d)]=function(_0x2f899d){const _0x36666d=_0x164fcd;this[_0x36666d(0x56b)](_0x36666d(0x5cf),_0x2f899d);VisuMZ['BattleCore']['Settings'][_0x36666d(0x8b1)]['CounterPlayback']&&this['push'](_0x36666d(0x589),_0x2f899d,[BattleManager['_subject']],-0x1);if(!VisuMZ[_0x36666d(0xb36)]['Settings'][_0x36666d(0xa08)][_0x36666d(0x477)])return;this[_0x36666d(0x56b)]('addText',TextManager[_0x36666d(0x608)][_0x36666d(0x272)](_0x2f899d[_0x36666d(0x16d)]()));},Window_BattleLog['prototype']['displayReflection']=function(_0x47382e){const _0x466e11=_0x164fcd;this[_0x466e11(0x56b)](_0x466e11(0xa16),_0x47382e);if(!VisuMZ[_0x466e11(0xb36)]['Settings']['BattleLog'][_0x466e11(0x578)])return;this[_0x466e11(0x56b)](_0x466e11(0x233),TextManager[_0x466e11(0x7c8)][_0x466e11(0x272)](_0x47382e[_0x466e11(0x16d)]()));},Window_BattleLog[_0x164fcd(0x2bf)]['displayReflectionPlayBack']=function(_0x122996,_0x5cdb6d){const _0x10445a=_0x164fcd;if(VisuMZ[_0x10445a(0xb36)]['Settings'][_0x10445a(0x8b1)]['ReflectPlayback']){const _0x5ecd7c=_0x5cdb6d[_0x10445a(0x5e9)]();this[_0x10445a(0x56b)](_0x10445a(0x589),_0x122996,[_0x122996],_0x5ecd7c[_0x10445a(0x52a)]);}},Window_BattleLog['prototype']['displaySubstitute']=function(_0x319c03,_0x3eba61){const _0x4dd353=_0x164fcd;this['push'](_0x4dd353(0x764),_0x319c03,_0x3eba61);if(!VisuMZ['BattleCore'][_0x4dd353(0x1de)]['BattleLog'][_0x4dd353(0xa4a)])return;const _0x316c34=_0x319c03[_0x4dd353(0x16d)](),_0x4f7e41=TextManager[_0x4dd353(0x7a2)][_0x4dd353(0x272)](_0x316c34,_0x3eba61['name']());this[_0x4dd353(0x56b)](_0x4dd353(0x233),_0x4f7e41);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x301)]=Window_BattleLog[_0x164fcd(0x2bf)]['displayActionResults'],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x42a)]=function(_0x92ca3f,_0x3e87ef){const _0x192300=_0x164fcd;VisuMZ['BattleCore']['Window_BattleLog_displayActionResults'][_0x192300(0xa10)](this,_0x92ca3f,_0x3e87ef);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xaa9)]=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0xc5f)],Window_BattleLog['prototype'][_0x164fcd(0xc5f)]=function(_0x2ffe59){const _0x3fe2de=_0x164fcd;if(!VisuMZ[_0x3fe2de(0xb36)][_0x3fe2de(0x1de)][_0x3fe2de(0xa08)][_0x3fe2de(0xa55)])return;VisuMZ['BattleCore'][_0x3fe2de(0xaa9)][_0x3fe2de(0xa10)](this,_0x2ffe59);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x38b)]=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0xc0d)],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0xc0d)]=function(_0x4b1c19){const _0x12d720=_0x164fcd;if(!VisuMZ[_0x12d720(0xb36)][_0x12d720(0x1de)][_0x12d720(0xa08)][_0x12d720(0x5a8)])return;VisuMZ[_0x12d720(0xb36)][_0x12d720(0x38b)][_0x12d720(0xa10)](this,_0x4b1c19);},VisuMZ[_0x164fcd(0xb36)]['Window_BattleLog_displayMiss']=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0xa4c)],Window_BattleLog[_0x164fcd(0x2bf)]['displayMiss']=function(_0x5ebc60){const _0x59fc85=_0x164fcd;!VisuMZ[_0x59fc85(0xb36)]['Settings'][_0x59fc85(0xa08)][_0x59fc85(0x637)]?_0x59fc85(0xbdc)!==_0x59fc85(0xbdc)?(_0x5469e9['performCastAnimation'](_0x271bc7),this[_0x59fc85(0x227)]()):this[_0x59fc85(0x56b)](_0x59fc85(0x91e),_0x5ebc60):VisuMZ[_0x59fc85(0xb36)][_0x59fc85(0x288)][_0x59fc85(0xa10)](this,_0x5ebc60);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x3ab)]=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x37d)],Window_BattleLog[_0x164fcd(0x2bf)]['displayEvasion']=function(_0x4114b3){const _0x38a201=_0x164fcd;if(!VisuMZ[_0x38a201(0xb36)][_0x38a201(0x1de)]['BattleLog'][_0x38a201(0x637)]){if(_0x38a201(0x7d9)!==_0x38a201(0xb09)){if(_0x4114b3[_0x38a201(0xc9e)]()['physical'])this[_0x38a201(0x56b)](_0x38a201(0xd0d),_0x4114b3);else{if(_0x38a201(0xc2b)!==_0x38a201(0xbda))this[_0x38a201(0x56b)](_0x38a201(0xbb4),_0x4114b3);else{if(this['_svBattlerData']!==_0x2e706a)return this[_0x38a201(0x9c2)];return this[_0x38a201(0x588)](),this[_0x38a201(0x9c2)];}}}else return![];}else VisuMZ['BattleCore'][_0x38a201(0x3ab)][_0x38a201(0xa10)](this,_0x4114b3);},Window_BattleLog['prototype']['displayHpDamage']=function(_0x49ac0b){const _0xfc1d78=_0x164fcd;if(_0x49ac0b['result']()[_0xfc1d78(0x9e4)]){_0x49ac0b[_0xfc1d78(0xd00)]=0x0;_0x49ac0b[_0xfc1d78(0xc9e)]()[_0xfc1d78(0xc89)]>0x0&&!_0x49ac0b[_0xfc1d78(0xc9e)]()['drain']&&(_0x49ac0b['_lastHpDamage']=_0x49ac0b[_0xfc1d78(0xc9e)]()['hpDamage'],this[_0xfc1d78(0x56b)](_0xfc1d78(0x42e),_0x49ac0b));if(_0x49ac0b[_0xfc1d78(0xc9e)]()[_0xfc1d78(0xc89)]<0x0){if('HQZaj'!==_0xfc1d78(0x96a))this[_0xfc1d78(0x56b)]('performRecovery',_0x49ac0b);else{const _0x8622f0=_0x1b0c63[_0xfc1d78(0x990)](_0x300056[_0xfc1d78(0x7e1)]()['trim']());_0x8622f0>=0x0&&_0x8622f0<=0x7&&_0x30491a[_0xfc1d78(0x5ef)](_0x8622f0,_0x1fde8a);}}VisuMZ[_0xfc1d78(0xb36)]['Settings'][_0xfc1d78(0xa08)][_0xfc1d78(0x74b)]&&this['push'](_0xfc1d78(0x233),this['makeHpDamageText'](_0x49ac0b));}},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xc66)]=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x4aa)],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x4aa)]=function(_0x14c708){const _0x354a7a=_0x164fcd;if(!VisuMZ[_0x354a7a(0xb36)]['Settings'][_0x354a7a(0xa08)]['ShowMpDmg'])return;VisuMZ[_0x354a7a(0xb36)]['Window_BattleLog_displayMpDamage']['call'](this,_0x14c708);},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x9df)]=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x34a)],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x34a)]=function(_0x2a645f){const _0x80f35c=_0x164fcd;if(!VisuMZ[_0x80f35c(0xb36)][_0x80f35c(0x1de)][_0x80f35c(0xa08)][_0x80f35c(0x140)])return;VisuMZ[_0x80f35c(0xb36)][_0x80f35c(0x9df)]['call'](this,_0x2a645f);},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x7cf)]=function(_0x455e44){const _0x44055e=_0x164fcd;_0x455e44[_0x44055e(0xc9e)]()['isStatusAffected']()&&(this[_0x44055e(0x56b)](_0x44055e(0x1ca)),this['displayChangedStates'](_0x455e44),this['displayChangedBuffs'](_0x455e44),this[_0x44055e(0x56b)](_0x44055e(0x86c)));},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x98e)]=function(_0x5af5e7){const _0x1c5cd8=_0x164fcd,_0x2189a0=_0x5af5e7[_0x1c5cd8(0xc9e)](),_0x3e3d62=_0x2189a0[_0x1c5cd8(0xce6)]();for(const _0x7ef821 of _0x3e3d62){const _0x231767=_0x5af5e7[_0x1c5cd8(0x31f)]()?_0x7ef821[_0x1c5cd8(0x21e)]:_0x7ef821['message2'];_0x231767&&VisuMZ['BattleCore']['Settings']['BattleLog'][_0x1c5cd8(0x855)]&&('Omyur'!==_0x1c5cd8(0x34f)?(this[_0x1c5cd8(0x56b)]('fnordAddedStates'),this['push']('popBaseLine'),this['push'](_0x1c5cd8(0x1ca)),this[_0x1c5cd8(0x56b)]('addText',_0x231767['format'](_0x5af5e7['name']())),this[_0x1c5cd8(0x56b)](_0x1c5cd8(0xa9d))):this[_0x1c5cd8(0x35c)]['bitmap'][_0x1c5cd8(0x225)]=this['_battler'][_0x1c5cd8(0xcdf)]()),_0x7ef821['id']===_0x5af5e7[_0x1c5cd8(0x8eb)]()&&(_0x1c5cd8(0x78a)!==_0x1c5cd8(0x78a)?(this[_0x1c5cd8(0x120)](_0x1c5cd8(0xa82),_0x3b4b62,0x0,!![]),_0x5d2e48['BattleCore'][_0x1c5cd8(0x3dd)][_0x1c5cd8(0xa10)](this,_0x58af10),this['applyBattleCoreJS'](_0x1c5cd8(0x48f),_0x2ec75f,this[_0x1c5cd8(0x786)]||0x0,!![]),this['applyResultSwitches'](_0x4ef698)):this[_0x1c5cd8(0x56b)](_0x1c5cd8(0x6c6),_0x5af5e7));}},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x7ee)]=function(){},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0xb0d)]=function(_0x11bd3f){const _0x37cd74=_0x164fcd;if(!VisuMZ[_0x37cd74(0xb36)][_0x37cd74(0x1de)]['BattleLog'][_0x37cd74(0x47b)])return;const _0x2a1258=_0x11bd3f[_0x37cd74(0xc9e)](),_0x480097=_0x2a1258[_0x37cd74(0x7a4)]();for(const _0x266658 of _0x480097){_0x266658[_0x37cd74(0x85d)]&&(this[_0x37cd74(0x56b)](_0x37cd74(0xcd2)),this[_0x37cd74(0x56b)]('popBaseLine'),this[_0x37cd74(0x56b)](_0x37cd74(0x1ca)),this[_0x37cd74(0x56b)](_0x37cd74(0x233),_0x266658[_0x37cd74(0x85d)][_0x37cd74(0x272)](_0x11bd3f[_0x37cd74(0x16d)]())),this['push'](_0x37cd74(0xa9d)));}},Window_BattleLog['prototype'][_0x164fcd(0xcd2)]=function(){},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x222)]=function(_0x4c3ba8){const _0x137c35=_0x164fcd,_0x29d718=VisuMZ['BattleCore']['Settings']['BattleLog'],_0x218c9d=_0x4c3ba8['result']();if(_0x29d718[_0x137c35(0x1c4)])this['displayBuffs'](_0x4c3ba8,_0x218c9d[_0x137c35(0x89d)],TextManager['buffAdd']);if(_0x29d718[_0x137c35(0xb4a)])this[_0x137c35(0xa95)](_0x4c3ba8,_0x218c9d['addedDebuffs'],TextManager[_0x137c35(0x4f4)]);if(_0x29d718[_0x137c35(0xa7b)])this[_0x137c35(0xa95)](_0x4c3ba8,_0x218c9d[_0x137c35(0x957)],TextManager[_0x137c35(0xc3d)]);},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0xa95)]=function(_0x40c2fb,_0x30d516,_0x4535ef){const _0xc03a2f=_0x164fcd;for(const _0x194809 of _0x30d516){const _0x59fe07=_0x4535ef['format'](_0x40c2fb[_0xc03a2f(0x16d)](),TextManager[_0xc03a2f(0xa8a)](_0x194809));this[_0xc03a2f(0x56b)](_0xc03a2f(0x844)),this[_0xc03a2f(0x56b)](_0xc03a2f(0x1ca)),this[_0xc03a2f(0x56b)]('addText',_0x59fe07),this[_0xc03a2f(0x56b)](_0xc03a2f(0xa9d));}},VisuMZ['BattleCore'][_0x164fcd(0x938)]=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x7bf)],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x7bf)]=function(){const _0x268f97=_0x164fcd;VisuMZ[_0x268f97(0xb36)][_0x268f97(0x938)][_0x268f97(0xa10)](this),this[_0x268f97(0x227)]();},VisuMZ[_0x164fcd(0xb36)]['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x1ca)],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x1ca)]=function(){const _0x413b2d=_0x164fcd;VisuMZ[_0x413b2d(0xb36)][_0x413b2d(0x5d5)][_0x413b2d(0xa10)](this),this[_0x413b2d(0x227)]();},VisuMZ['BattleCore'][_0x164fcd(0xa5a)]=Window_BattleLog[_0x164fcd(0x2bf)]['popBaseLine'],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x844)]=function(){const _0x20f0a6=_0x164fcd;VisuMZ[_0x20f0a6(0xb36)][_0x20f0a6(0xa5a)][_0x20f0a6(0xa10)](this),this[_0x20f0a6(0x425)](),this[_0x20f0a6(0x227)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xc63)]=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x678)],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x678)]=function(_0x45fab2){const _0x9ed31=_0x164fcd;VisuMZ[_0x9ed31(0xb36)][_0x9ed31(0xc63)][_0x9ed31(0xa10)](this,_0x45fab2),this[_0x9ed31(0x227)]();},Window_BattleLog[_0x164fcd(0x2bf)]['waitForNewLine']=function(){const _0x510f56=_0x164fcd;let _0x46fb4d=0x0;if(this[_0x510f56(0x153)]['length']>0x0){if('zTZZs'===_0x510f56(0x559))_0x46fb4d=this[_0x510f56(0x153)][this[_0x510f56(0x153)][_0x510f56(0xd04)]-0x1];else{const _0x39cb3e=_0x4c9d2d[_0x510f56(0x144)]('['+_0x5e7b3c['$1']['match'](/\d+/g)+']');for(const _0x475484 of _0x39cb3e){if(_0x28391b[_0x510f56(0x8a7)](_0x475484))return!![];}return![];}}this[_0x510f56(0x3f0)][_0x510f56(0xd04)]>_0x46fb4d?this[_0x510f56(0xa9d)]():this['callNextMethod']();},VisuMZ[_0x164fcd(0xb36)]['Window_BattleLog_performActionStart']=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x998)],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x998)]=function(_0x3d4286,_0x4faa77){const _0x57e23e=_0x164fcd;VisuMZ[_0x57e23e(0xb36)]['Window_BattleLog_performActionStart'][_0x57e23e(0xa10)](this,_0x3d4286,_0x4faa77),this[_0x57e23e(0x227)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x848)]=Window_BattleLog['prototype']['performAction'],Window_BattleLog[_0x164fcd(0x2bf)]['performAction']=function(_0x23fa9d,_0x406ae8){const _0x29c7f0=_0x164fcd;VisuMZ[_0x29c7f0(0xb36)][_0x29c7f0(0x848)][_0x29c7f0(0xa10)](this,_0x23fa9d,_0x406ae8),this[_0x29c7f0(0x227)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x52e)]=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x815)],Window_BattleLog[_0x164fcd(0x2bf)]['performActionEnd']=function(_0xf00a90){const _0x2110f7=_0x164fcd;VisuMZ['BattleCore'][_0x2110f7(0x52e)]['call'](this,_0xf00a90);for(const _0x41cbc7 of BattleManager[_0x2110f7(0x2cc)]()){if('xBaRo'!=='iVfKl'){if(!_0x41cbc7)continue;if(_0x41cbc7['isDead']())continue;_0x41cbc7[_0x2110f7(0xcb8)]();}else this['wholeActionSet'](_0x50cc83,_0x2a9025,_0xd7fd64);}this[_0x2110f7(0x227)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x996)]=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x42e)],Window_BattleLog['prototype']['performDamage']=function(_0x8c1d18){const _0x3f910d=_0x164fcd;VisuMZ[_0x3f910d(0xb36)][_0x3f910d(0x996)][_0x3f910d(0xa10)](this,_0x8c1d18),this['callNextMethod']();},VisuMZ[_0x164fcd(0xb36)]['Window_BattleLog_performMiss']=Window_BattleLog['prototype']['performMiss'],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x91e)]=function(_0x5a6025){const _0x19bad0=_0x164fcd;VisuMZ[_0x19bad0(0xb36)][_0x19bad0(0xba4)][_0x19bad0(0xa10)](this,_0x5a6025),this['callNextMethod']();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x659)]=Window_BattleLog['prototype'][_0x164fcd(0x8a1)],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x8a1)]=function(_0x509c36){const _0x40f1cf=_0x164fcd;VisuMZ[_0x40f1cf(0xb36)][_0x40f1cf(0x659)][_0x40f1cf(0xa10)](this,_0x509c36),this[_0x40f1cf(0x227)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x644)]=Window_BattleLog[_0x164fcd(0x2bf)]['performEvasion'],Window_BattleLog[_0x164fcd(0x2bf)]['performEvasion']=function(_0x17bdf9){const _0x40630f=_0x164fcd;VisuMZ['BattleCore'][_0x40630f(0x644)][_0x40630f(0xa10)](this,_0x17bdf9),this['callNextMethod']();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x702)]=Window_BattleLog['prototype'][_0x164fcd(0xbb4)],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0xbb4)]=function(_0x13f3f0){const _0x4ce57d=_0x164fcd;VisuMZ[_0x4ce57d(0xb36)][_0x4ce57d(0x702)][_0x4ce57d(0xa10)](this,_0x13f3f0),this[_0x4ce57d(0x227)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0xab6)]=Window_BattleLog['prototype'][_0x164fcd(0x5cf)],Window_BattleLog['prototype'][_0x164fcd(0x5cf)]=function(_0x45e229){const _0x46dfdd=_0x164fcd;VisuMZ['BattleCore'][_0x46dfdd(0xab6)][_0x46dfdd(0xa10)](this,_0x45e229),this[_0x46dfdd(0x227)]();},VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x540)]=Window_BattleLog['prototype'][_0x164fcd(0xa16)],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0xa16)]=function(_0x14fd2b){const _0x3a7520=_0x164fcd;VisuMZ[_0x3a7520(0xb36)][_0x3a7520(0x540)][_0x3a7520(0xa10)](this,_0x14fd2b),this[_0x3a7520(0x227)]();},VisuMZ[_0x164fcd(0xb36)]['Window_BattleLog_performSubstitute']=Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x764)],Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x764)]=function(_0x59003a,_0x833f1c){const _0x2fbafd=_0x164fcd;VisuMZ['BattleCore']['Window_BattleLog_performSubstitute'][_0x2fbafd(0xa10)](this,_0x59003a,_0x833f1c),this[_0x2fbafd(0x227)]();},VisuMZ['BattleCore'][_0x164fcd(0xb22)]=Window_BattleLog['prototype'][_0x164fcd(0x6c6)],Window_BattleLog['prototype'][_0x164fcd(0x6c6)]=function(_0x39a8a2){const _0x49222d=_0x164fcd;VisuMZ['BattleCore'][_0x49222d(0xb22)][_0x49222d(0xa10)](this,_0x39a8a2),this[_0x49222d(0x227)]();},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x1c2)]=function(_0x1e563d,_0x14524e){const _0x4bbc78=_0x164fcd;_0x1e563d[_0x4bbc78(0x1c2)](_0x14524e),this['callNextMethod']();},Window_BattleLog[_0x164fcd(0x2bf)]['showEnemyAttackAnimation']=function(_0x524160,_0x4f70ce){const _0x3cc967=_0x164fcd,_0x2dba68=_0x524160[_0x3cc967(0xb85)]();_0x2dba68<=0x0?_0x3cc967(0x21c)!=='NLDAv'?_0x565efb--:SoundManager[_0x3cc967(0xc75)]():this[_0x3cc967(0x569)](_0x4f70ce,_0x2dba68);},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x1e9)]=function(_0xcfb7cd,_0x59a1b7,_0x26f4f7){const _0x16f0a4=_0x164fcd,_0x2123cf=[_0xcfb7cd][_0x16f0a4(0x395)](_0x59a1b7);for(const _0x2bfe07 of _0x2123cf){if(!_0x2bfe07)continue;_0x2bfe07['setImmortal'](_0x26f4f7);}this[_0x16f0a4(0x227)]();},Window_BattleLog[_0x164fcd(0x2bf)]['waitCount']=function(_0x2e05e8){this['_waitCount']=_0x2e05e8;},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x8f0)]=function(_0xe44ee4,_0x320a75){const _0x1ddbe5=_0x164fcd;for(const _0x1eca97 of _0xe44ee4){if(!_0x1eca97)continue;_0x1eca97[_0x1ddbe5(0x8f0)](_0x320a75);}this[_0x1ddbe5(0x227)]();},Window_BattleLog[_0x164fcd(0x2bf)]['performMoveToPoint']=function(_0x199d6c,_0x98a3e2,_0x55022e,_0x57ae85,_0x130179,_0x7bf6d6){const _0x3239c2=_0x164fcd;_0x199d6c[_0x3239c2(0x887)](_0x98a3e2,_0x55022e,_0x57ae85,_0x130179,_0x7bf6d6,-0x1),this[_0x3239c2(0x227)]();},Window_BattleLog['prototype']['performMoveToTargets']=function(_0x1e7be3,_0x58226a,_0x5db2b5,_0xf775a3,_0x15c58e,_0x52d899,_0x47320f){const _0x5b8fd9=_0x164fcd,_0x9bfe48=Math[_0x5b8fd9(0x584)](..._0x58226a[_0x5b8fd9(0xa98)](_0xe79bf1=>_0xe79bf1[_0x5b8fd9(0x921)]()[_0x5b8fd9(0x6ab)]-_0xe79bf1[_0x5b8fd9(0x921)]()[_0x5b8fd9(0x9db)]()/0x2)),_0x37378a=Math[_0x5b8fd9(0xc92)](..._0x58226a['map'](_0x1c8835=>_0x1c8835[_0x5b8fd9(0x921)]()[_0x5b8fd9(0x6ab)]+_0x1c8835[_0x5b8fd9(0x921)]()['mainSpriteWidth']()/0x2)),_0x31024c=Math[_0x5b8fd9(0x584)](..._0x58226a[_0x5b8fd9(0xa98)](_0x5d595a=>_0x5d595a['battler']()[_0x5b8fd9(0x3db)]-_0x5d595a['battler']()[_0x5b8fd9(0xb35)]())),_0x1bfa3f=Math[_0x5b8fd9(0xc92)](..._0x58226a[_0x5b8fd9(0xa98)](_0x17d2f2=>_0x17d2f2[_0x5b8fd9(0x921)]()['_baseY'])),_0x13ea22=_0x58226a[_0x5b8fd9(0x69f)](_0x4bcadc=>_0x4bcadc[_0x5b8fd9(0x31f)]())['length'],_0x2e616e=_0x58226a[_0x5b8fd9(0x69f)](_0x1138e0=>_0x1138e0[_0x5b8fd9(0xa79)]())['length'];let _0x14255e=0x0,_0x2036fe=0x0;if(_0x5db2b5[_0x5b8fd9(0xa5d)](/front/i))_0x14255e=_0x13ea22>=_0x2e616e?_0x9bfe48:_0x37378a;else{if(_0x5db2b5['match'](/middle/i)){if(_0x5b8fd9(0x8f6)!==_0x5b8fd9(0x75a))_0x14255e=(_0x9bfe48+_0x37378a)/0x2,_0x47320f=-0x1;else{if(this[_0x5b8fd9(0x6e1)]==='all\x20actors')return![];if(this[_0x5b8fd9(0x6e1)]==='all\x20enemies')return!![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this['isForOpponentBattleCore']():_0x54271b['BattleCore']['Game_Action_isForOpponent'][_0x5b8fd9(0xa10)](this);}}else _0x5db2b5[_0x5b8fd9(0xa5d)](/back/i)&&(_0x14255e=_0x13ea22>=_0x2e616e?_0x37378a:_0x9bfe48);}if(_0x5db2b5[_0x5b8fd9(0xa5d)](/head/i))_0x2036fe=_0x31024c;else{if(_0x5db2b5[_0x5b8fd9(0xa5d)](/center/i)){_0x2036fe=(_0x31024c+_0x1bfa3f)/0x2;if(_0x1e7be3[_0x5b8fd9(0x921)]())_0x2036fe+=_0x1e7be3['battler']()[_0x5b8fd9(0x5e0)]/0x2;}else _0x5db2b5['match'](/base/i)&&(_0x2036fe=_0x1bfa3f);}_0x1e7be3[_0x5b8fd9(0x887)](_0x14255e,_0x2036fe,_0xf775a3,_0x15c58e,_0x52d899,_0x47320f),this[_0x5b8fd9(0x227)]();},Window_BattleLog[_0x164fcd(0x2bf)][_0x164fcd(0x1c7)]=function(_0x962b2d,_0x413e00,_0x28bbc2){const _0x31fae4=_0x164fcd;for(const _0x11a979 of _0x962b2d){if(_0x31fae4(0xc06)===_0x31fae4(0xaf3))_0x29fedb[_0x31fae4(0xb83)]*=-0x1;else{if(!_0x11a979)continue;_0x11a979[_0x31fae4(0x666)](_0x413e00,_0x28bbc2);}}this[_0x31fae4(0x227)]();};function Window_BattleMultiTarget(){const _0x6464d=_0x164fcd;this[_0x6464d(0x1ec)](...arguments);}Window_BattleMultiTarget[_0x164fcd(0x2bf)]=Object[_0x164fcd(0x5fc)](Window_Command[_0x164fcd(0x2bf)]),Window_BattleMultiTarget['prototype']['constructor']=Window_BattleMultiTarget,VisuMZ['BattleCore'][_0x164fcd(0x1de)][_0x164fcd(0x7dc)]=VisuMZ['BattleCore'][_0x164fcd(0x1de)][_0x164fcd(0x7dc)]||{},Window_BattleMultiTarget[_0x164fcd(0x879)]=VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x1de)][_0x164fcd(0x7dc)][_0x164fcd(0x89c)]??0x118,Window_BattleMultiTarget[_0x164fcd(0xc20)]=VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x1de)]['MultiTarget'][_0x164fcd(0x2e4)]??0x2,Window_BattleMultiTarget['SHOW_BUTTON']=VisuMZ[_0x164fcd(0xb36)]['Settings']['MultiTarget'][_0x164fcd(0x5fa)]??!![],Window_BattleMultiTarget['ALL_ACTORS']=VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x1de)]['MultiTarget']['AllActorsText']??_0x164fcd(0x48a),Window_BattleMultiTarget['ALL_ENEMIES']=VisuMZ[_0x164fcd(0xb36)]['Settings']['MultiTarget'][_0x164fcd(0x7eb)]??_0x164fcd(0x99d),Window_BattleMultiTarget[_0x164fcd(0x4b3)]=VisuMZ['BattleCore'][_0x164fcd(0x1de)][_0x164fcd(0x7dc)][_0x164fcd(0x49d)]??0x0,Window_BattleMultiTarget[_0x164fcd(0xa6e)]=VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x1de)][_0x164fcd(0x7dc)][_0x164fcd(0x16b)]??0x0,Window_BattleMultiTarget[_0x164fcd(0xbd4)]=VisuMZ[_0x164fcd(0xb36)][_0x164fcd(0x1de)][_0x164fcd(0x7dc)][_0x164fcd(0x32f)]??0x0,Window_BattleMultiTarget[_0x164fcd(0xb08)]=VisuMZ['BattleCore'][_0x164fcd(0x1de)][_0x164fcd(0x7dc)][_0x164fcd(0x8ee)]??0x0,Window_BattleMultiTarget[_0x164fcd(0x2bf)][_0x164fcd(0x1ec)]=function(_0x2c0f4d,_0xc76458){const _0x5bb716=_0x164fcd;this[_0x5bb716(0x9ce)]=_0xc76458,Window_Command[_0x5bb716(0x2bf)][_0x5bb716(0x1ec)][_0x5bb716(0xa10)](this,_0x2c0f4d),this[_0x5bb716(0x518)](Window_BattleMultiTarget[_0x5bb716(0xc20)]),this[_0x5bb716(0x61f)](),this['hide'](),this[_0x5bb716(0x99e)]();},Window_BattleMultiTarget[_0x164fcd(0x2bf)][_0x164fcd(0x8bb)]=function(){const _0xeaf4d9=_0x164fcd;return this[_0xeaf4d9(0x9ce)];},Window_BattleMultiTarget[_0x164fcd(0x2bf)][_0x164fcd(0x3a4)]=function(){const _0x3e735f=_0x164fcd;let _0x36a54c=this[_0x3e735f(0x8bb)]()?Window_BattleMultiTarget[_0x3e735f(0xcbf)]:Window_BattleMultiTarget[_0x3e735f(0xa7c)];if(Imported[_0x3e735f(0x818)]&&Window_BattleMultiTarget['SHOW_BUTTON']){this[_0x3e735f(0x1cd)]=this[_0x3e735f(0x8bb)]()?_0x3e735f(0x124):'pageup',this[_0x3e735f(0xa20)]=TextManager[_0x3e735f(0x986)](this[_0x3e735f(0x1cd)]);const _0x5bcd60=VisuMZ['CoreEngine'][_0x3e735f(0x1de)][_0x3e735f(0x610)][_0x3e735f(0x43e)];_0x36a54c=_0x5bcd60[_0x3e735f(0x272)](this[_0x3e735f(0xa20)],_0x36a54c);}this[_0x3e735f(0x6a2)](_0x36a54c,_0x3e735f(0x5d3));},Window_BattleMultiTarget[_0x164fcd(0x2bf)][_0x164fcd(0x432)]=function(_0x42070c){const _0x5a34b9=_0x164fcd,_0x10349d=this['itemLineRect'](_0x42070c);this[_0x5a34b9(0x61b)](),this['changePaintOpacity'](this['isCommandEnabled'](_0x42070c));const _0x14a3d3=this[_0x5a34b9(0x42c)](_0x42070c),_0x539549=this[_0x5a34b9(0x45a)](_0x14a3d3)['width'],_0xd11558=_0x10349d['x']+Math[_0x5a34b9(0x923)]((_0x10349d[_0x5a34b9(0xab5)]-_0x539549)/0x2);this[_0x5a34b9(0x625)](_0x14a3d3,_0xd11558,_0x10349d['y'],_0x10349d[_0x5a34b9(0xab5)]);},Window_BattleMultiTarget[_0x164fcd(0x2bf)][_0x164fcd(0x71d)]=function(){const _0x13f9f3=_0x164fcd;Window_Command[_0x13f9f3(0x2bf)]['update']['call'](this),this[_0x13f9f3(0xca2)](),this[_0x13f9f3(0x14c)]();},Window_BattleMultiTarget['prototype'][_0x164fcd(0xca2)]=function(){this['visible']=this['visibilityState']();},Window_BattleMultiTarget['prototype']['visibilityState']=function(){const _0x443131=_0x164fcd,_0x18f97e=BattleManager[_0x443131(0x784)](),_0x26306b=_0x18f97e&&_0x18f97e[_0x443131(0x358)]();if(!_0x26306b)return![];const _0x49591e=SceneManager['_scene'];if(this[_0x443131(0x8bb)]()){if(_0x443131(0x9a9)!==_0x443131(0x43a)){if(_0x49591e['_actorWindow'][_0x443131(0x533)]&&_0x49591e[_0x443131(0x91a)][_0x443131(0xa17)][_0x443131(0x124)])return!![];if(_0x49591e[_0x443131(0x95b)][_0x443131(0x533)]&&_0x49591e[_0x443131(0x95b)][_0x443131(0xa17)]['pagedown'])return!![];}else this[_0x443131(0x56b)](_0x443131(0x8a1),_0x1433d7);}else{if(_0x49591e[_0x443131(0x95b)]['active']&&_0x49591e[_0x443131(0x95b)]['_handlers'][_0x443131(0x7b5)])return!![];}return![];},Window_BattleMultiTarget[_0x164fcd(0x2bf)][_0x164fcd(0x14c)]=function(){const _0xf9c264=_0x164fcd;if(!Imported['VisuMZ_0_CoreEngine'])return;if(this[_0xf9c264(0xa20)]!==TextManager[_0xf9c264(0x986)](this['_buttonKey'])){if(_0xf9c264(0x873)===_0xf9c264(0x800))for(const _0x26751d of _0x22622f){const _0x4be23b=_0x1d143e[0x0][_0xf9c264(0x272)](_0x26751d[0x0],_0xeff9c2[0x0]),_0x33214d=_0x35fbd6[0x1][_0xf9c264(0x272)](_0x26751d[0x1],_0x47f55f[0x1])[_0xf9c264(0xab7)](),_0x21df07=new _0x109d43(_0x13b4fb[_0xf9c264(0x272)](_0x33214d),'i');_0x215961[_0x4be23b]=_0x21df07;}else this[_0xf9c264(0x72d)]();}},Window_BattleMultiTarget['prototype']['processTouch']=function(){const _0x28f19b=_0x164fcd;if(this['visible']&&TouchInput['isClicked']()){const _0xe52aae=this[_0x28f19b(0xaf1)]();if(_0xe52aae>=0x0){if('GguCn'!=='eLpBt'){const _0x1cfdb6=this[_0x28f19b(0x8bb)]()?_0x28f19b(0x124):_0x28f19b(0x7b5);Input[_0x28f19b(0xd0f)](_0x1cfdb6);}else{if(!this['_shadowSprite'])return;if(this['_battler']&&this['_battler'][_0x28f19b(0x6e3)]()){const _0x59cb88=this[_0x28f19b(0xc04)][_0x28f19b(0xcf5)];this['_shadowSprite'][_0x28f19b(0x522)](0x0,0x0,_0x59cb88[_0x28f19b(0xab5)],_0x59cb88['height']);}else this[_0x28f19b(0xc04)][_0x28f19b(0x522)](0x0,0x0,0x0,0x0);}}}};